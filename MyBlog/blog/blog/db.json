{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/search.xml","path":"search.xml","modified":0,"renderable":0},{"_id":"themes/hexo/source/css/other.styl","path":"css/other.styl","modified":0,"renderable":1},{"_id":"themes/hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo/source/css/webapp.css","path":"css/webapp.css","modified":0,"renderable":1},{"_id":"themes/hexo/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/js/clock.js","path":"js/clock.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/js/postcover.js","path":"js/postcover.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/js/webapp.js","path":"js/webapp.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/cangshu.png","path":"images/background/cangshu.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/cat.png","path":"images/background/cat.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/chichi.jpg","path":"images/background/chichi.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/lihui.png","path":"images/background/lihui.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/lihui1.jpg","path":"images/background/lihui1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/lihui3.jpg","path":"images/background/lihui3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/lihui2.jpg","path":"images/background/lihui2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/lihui6-1.png","path":"images/background/lihui6-1.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/lihui6-3.png","path":"images/background/lihui6-3.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/lihui6-5.png","path":"images/background/lihui6-5.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/lihui6.png","path":"images/background/lihui6.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/lihui7.png","path":"images/background/lihui7.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/papa.jpg","path":"images/background/papa.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/background/xiaomai.jpg","path":"images/background/xiaomai.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/head/call.jpg","path":"images/head/call.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/head/head.jpg","path":"images/head/head.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/head/tx1.jpg","path":"images/head/tx1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/head/uniapp.jpg","path":"images/head/uniapp.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/head/vue.jpg","path":"images/head/vue.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/100.gif","path":"images/emoji/100.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/101.gif","path":"images/emoji/101.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/102.gif","path":"images/emoji/102.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/103.gif","path":"images/emoji/103.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/104.gif","path":"images/emoji/104.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/105.gif","path":"images/emoji/105.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/106.gif","path":"images/emoji/106.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/107.gif","path":"images/emoji/107.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/108.gif","path":"images/emoji/108.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/109.gif","path":"images/emoji/109.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/110.gif","path":"images/emoji/110.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/111.gif","path":"images/emoji/111.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/112.gif","path":"images/emoji/112.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/113.gif","path":"images/emoji/113.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/114.gif","path":"images/emoji/114.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/116.gif","path":"images/emoji/116.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/115.gif","path":"images/emoji/115.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/117.gif","path":"images/emoji/117.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/118.gif","path":"images/emoji/118.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/119.gif","path":"images/emoji/119.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/120.gif","path":"images/emoji/120.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/121.gif","path":"images/emoji/121.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/122.gif","path":"images/emoji/122.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/123.gif","path":"images/emoji/123.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/124.gif","path":"images/emoji/124.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/125.gif","path":"images/emoji/125.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/126.gif","path":"images/emoji/126.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/127.gif","path":"images/emoji/127.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/128.gif","path":"images/emoji/128.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/129.gif","path":"images/emoji/129.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/130.gif","path":"images/emoji/130.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/131.gif","path":"images/emoji/131.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/132.gif","path":"images/emoji/132.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/133.gif","path":"images/emoji/133.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/134.gif","path":"images/emoji/134.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/135.gif","path":"images/emoji/135.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/136.gif","path":"images/emoji/136.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/137.gif","path":"images/emoji/137.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/138.gif","path":"images/emoji/138.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/139.gif","path":"images/emoji/139.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/140.gif","path":"images/emoji/140.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/141.gif","path":"images/emoji/141.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/143.gif","path":"images/emoji/143.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/142.gif","path":"images/emoji/142.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/144.gif","path":"images/emoji/144.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/145.gif","path":"images/emoji/145.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/146.gif","path":"images/emoji/146.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/147.gif","path":"images/emoji/147.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/148.gif","path":"images/emoji/148.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/149.gif","path":"images/emoji/149.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/150.gif","path":"images/emoji/150.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/151.gif","path":"images/emoji/151.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/152.gif","path":"images/emoji/152.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/153.gif","path":"images/emoji/153.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/154.gif","path":"images/emoji/154.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/155.gif","path":"images/emoji/155.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/156.gif","path":"images/emoji/156.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/157.gif","path":"images/emoji/157.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/158.gif","path":"images/emoji/158.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/159.gif","path":"images/emoji/159.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/160.gif","path":"images/emoji/160.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/162.gif","path":"images/emoji/162.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/163.gif","path":"images/emoji/163.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/164.gif","path":"images/emoji/164.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/161.gif","path":"images/emoji/161.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/165.gif","path":"images/emoji/165.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/166.gif","path":"images/emoji/166.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/167.gif","path":"images/emoji/167.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/168.gif","path":"images/emoji/168.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/169.gif","path":"images/emoji/169.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/170.gif","path":"images/emoji/170.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/171.gif","path":"images/emoji/171.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/172.gif","path":"images/emoji/172.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/173.gif","path":"images/emoji/173.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/174.gif","path":"images/emoji/174.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/175.gif","path":"images/emoji/175.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/176.gif","path":"images/emoji/176.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/177.gif","path":"images/emoji/177.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/178.gif","path":"images/emoji/178.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/179.gif","path":"images/emoji/179.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/180.gif","path":"images/emoji/180.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/181.gif","path":"images/emoji/181.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/182.gif","path":"images/emoji/182.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/183.gif","path":"images/emoji/183.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/184.gif","path":"images/emoji/184.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/185.gif","path":"images/emoji/185.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/186.gif","path":"images/emoji/186.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/187.gif","path":"images/emoji/187.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/188.gif","path":"images/emoji/188.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/189.gif","path":"images/emoji/189.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/190.gif","path":"images/emoji/190.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/191.gif","path":"images/emoji/191.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/192.gif","path":"images/emoji/192.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/193.gif","path":"images/emoji/193.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/194.gif","path":"images/emoji/194.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/195.gif","path":"images/emoji/195.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/196.gif","path":"images/emoji/196.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/197.gif","path":"images/emoji/197.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/198.gif","path":"images/emoji/198.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/199.gif","path":"images/emoji/199.gif","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/200.png","path":"images/emoji/200.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/201.png","path":"images/emoji/201.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/202.png","path":"images/emoji/202.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/203.png","path":"images/emoji/203.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/204.png","path":"images/emoji/204.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/205.png","path":"images/emoji/205.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/206.png","path":"images/emoji/206.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/207.png","path":"images/emoji/207.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/208.png","path":"images/emoji/208.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/210.png","path":"images/emoji/210.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/209.png","path":"images/emoji/209.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/211.png","path":"images/emoji/211.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/212.png","path":"images/emoji/212.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/213.png","path":"images/emoji/213.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/214.png","path":"images/emoji/214.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/216.png","path":"images/emoji/216.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/215.png","path":"images/emoji/215.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/217.png","path":"images/emoji/217.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/218.png","path":"images/emoji/218.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/emoji/219.png","path":"images/emoji/219.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/JavaScript.jpg","path":"images/post/JavaScript.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/TypeScript.jpg","path":"images/post/TypeScript.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/algorithm.jpg","path":"images/post/algorithm.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/beautify.jpg","path":"images/post/beautify.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/browser.jpg","path":"images/post/browser.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/css.jpg","path":"images/post/css.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/data.jpg","path":"images/post/data.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/development_tool.jpg","path":"images/post/development_tool.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/docker.jpg","path":"images/post/docker.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/es6.jpg","path":"images/post/es6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/editor.jpg","path":"images/post/editor.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/git.jpg","path":"images/post/git.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/internet.jpg","path":"images/post/internet.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/java.jpg","path":"images/post/java.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/markerdown.jpg","path":"images/post/markerdown.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/nodejs.jpg","path":"images/post/nodejs.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/phantomjs.png","path":"images/post/phantomjs.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/ui.jpg","path":"images/post/ui.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/vue.jpg","path":"images/post/vue.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/webpack.jpg","path":"images/post/webpack.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/codeBlock/codeBlockFuction.js","path":"lib/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/post/wechat_applet.jpg","path":"images/post/wechat_applet.jpg","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/codeBlock/codeCopy.js","path":"lib/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/codeBlock/codeLang.js","path":"lib/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/codeBlock/codeShrink.js","path":"lib/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/codeBlock/matery.css","path":"lib/codeBlock/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo/source/images/view/render_tree.png","path":"images/view/render_tree.png","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/demo.css","path":"lib/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/demo_index.html","path":"lib/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/iconfont.css","path":"lib/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/iconfont.eot","path":"lib/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/iconfont.js","path":"lib/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/iconfont.json","path":"lib/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/iconfont.svg","path":"lib/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/iconfont.ttf","path":"lib/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/iconfont.woff","path":"lib/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/iconfont/iconfont.woff2","path":"lib/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/fancybox/css/jquery.fancybox.min.css","path":"lib/fancybox/css/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/fancybox/js/jquery.fancybox.min.js","path":"lib/fancybox/js/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/mdui_043tiny/css/mdui.css","path":"lib/mdui_043tiny/css/mdui.css","modified":0,"renderable":1},{"_id":"themes/hexo/source/lib/mdui_043tiny/js/mdui.js","path":"lib/mdui_043tiny/js/mdui.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/search.xml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1656933210000},{"_id":"source/archives.md","hash":"baf31255dbc4ea09873966285ef749db4c3f132d","modified":1656922986000},{"_id":"source/_posts/Hexo-Github搭建博客.md","hash":"94deb932fd3d80b6f35a8c71d8d10acbe0a2e555","modified":1657277255048},{"_id":"source/_posts/Json教程.md","hash":"7624336e8eacbb589f300aacad30f6f91f9352b3","modified":1657025957569},{"_id":"source/_posts/JavaScript对象.md","hash":"2ea6a47c43165c8e3bce4b38ba72049557d5b8f6","modified":1657285326136},{"_id":"source/_posts/MD中的HTML标签文字被网页编译问题.md","hash":"49997e919448c2b34fe57ef4e8cdd8ab24c7d398","modified":1657280077115},{"_id":"source/_posts/Markdown过长导致页面无法显示问题.md","hash":"7b10bc99fb18ef0094ebbf876f4617756807efb3","modified":1656998631189},{"_id":"source/_posts/SpringBoot整合Jpa.md","hash":"a4256f90ff8e7433c9edc79be0fbbdf6ed323da2","modified":1656998856594},{"_id":"source/_posts/SpringBoot笔记(一）.md","hash":"42e6c3fe902399193d2d756d33de619462990d38","modified":1657194734993},{"_id":"source/_posts/一-走进HTML.md","hash":"28c66af05db749e835db823333f503e1798d74b5","modified":1657324833395},{"_id":"source/_posts/hello-world.md","hash":"3573a300e796ac2548f96f3ca8646c07a6f80414","modified":1657190221257},{"_id":"source/_posts/七-盒子模型.md","hash":"66ce194d7387513d0945978962178234a13999e8","modified":1658197821248},{"_id":"source/_posts/三-HTML5.md","hash":"b1c1d1867dcd821bef86c29a2036653164de6b19","modified":1658198201011},{"_id":"source/_posts/九-动画.md","hash":"a8b0f20e5d6560bc52774552bcabda1aed2e77be","modified":1658197574143},{"_id":"source/_posts/二-表单.md","hash":"060bf0e321e7a6fa003ed2f4a0fd993773ad8fa0","modified":1658198290197},{"_id":"source/_posts/五-CSS常用样式.md","hash":"05148a3884370eaf960b71cad074b1a12109b997","modified":1658198365094},{"_id":"source/_posts/八-布局.md","hash":"c6b1e3a5f3f35235555da6e31c7df7021a7a88a6","modified":1658197712036},{"_id":"source/_posts/六-样式表与选择器.md","hash":"e35b60d89eb64b690f93dee3419034f589830ab1","modified":1658197891508},{"_id":"source/_posts/十-JavaScript基础.md","hash":"0cd012ba8199e26aff36fbf0fbc1c0479d1027f9","modified":1658197636856},{"_id":"source/_posts/四-CSS3概述.md","hash":"c413e9e7501a213a7bdb9d3bc3af4e890e99c067","modified":1658198328765},{"_id":"source/_posts/十二-JavaScript-BOM与DOM.md","hash":"dbdb6470cb00b749de07e2435453aa5cc808fa49","modified":1658197103592},{"_id":"themes/hexo/.gitignore","hash":"e168042a3df82a3a61949d78c734138796e58bc2","modified":1656922600000},{"_id":"themes/hexo/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1656922600000},{"_id":"themes/hexo/README.md","hash":"8762d2d1745c91c295a28963a685a5dc235e90b2","modified":1656922600000},{"_id":"themes/hexo/_config.yml","hash":"83ea2447f756526fc41ae839d8fea72690787335","modified":1657596720144},{"_id":"themes/hexo/package.json","hash":"29c5a4f8d60fa2ef3d68af5508d24865a7370132","modified":1656922600000},{"_id":"themes/hexo/languages/default.yml","hash":"a51a693c8ac40a7a4ec428ae37657112aa9b9610","modified":1656922600000},{"_id":"themes/hexo/_config.styl","hash":"4366564468a91bcc440f18a9f811330e757b31cf","modified":1657357251490},{"_id":"themes/hexo/languages/en.yml","hash":"39571a952614b30945000d2f799fb002e8cd7b9d","modified":1656922600000},{"_id":"themes/hexo/languages/zh-TW.yml","hash":"b1f29e39678f59681069ca1203f4fab54abcdbef","modified":1656922600000},{"_id":"themes/hexo/languages/zh-CN.yml","hash":"3607285604590b154bf39550cb565827eb31b083","modified":1656922600000},{"_id":"themes/hexo/layout/archives.ejs","hash":"8c04112b06f954c2555e4d578a8d7f527b185f7a","modified":1656922600000},{"_id":"themes/hexo/layout/index.ejs","hash":"edf1a605d6a05f3f8eec2cb0ec025e8f5d3c3d44","modified":1656922600000},{"_id":"themes/hexo/languages/ja.yml","hash":"4d783ea1c9ef29f4c070e0ffb4cbfea68b6d278b","modified":1656922600000},{"_id":"themes/hexo/layout/layout.ejs","hash":"e1c3dd47750c70114312879ecd892cb14f59aa5c","modified":1656922600000},{"_id":"themes/hexo/languages/zh-HK.yml","hash":"b1f29e39678f59681069ca1203f4fab54abcdbef","modified":1656922600000},{"_id":"themes/hexo/layout/post.ejs","hash":"256372f129e384a2ce95bcfab232efcbb0ff1e1f","modified":1656922600000},{"_id":"themes/hexo/layout/py.ejs","hash":"7e45d20353dbfbe5da965ee5dffd71ff8e969f5b","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/after-footer.ejs","hash":"742906e3a45ad3c45282c360a23dc46212a5d653","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/analytics.ejs","hash":"a9066ea1f75b616e48ba1d5348b10f5721d7c700","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/comment.ejs","hash":"f1e739a0eb8077168074884590033a43d4e8533f","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/copyright.ejs","hash":"874561197fcd227ddcdbb91d8dbedc6d3bffcd50","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/header.ejs","hash":"715713f717c2878d29f17b0bc60df67f79119b5b","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/paginator.ejs","hash":"1e2b53fdd4eccde3c5586f2c9a0ae817384b7404","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/site-verification.ejs","hash":"0e3f39f0b42c0d20c3424a6a06b2f08486b2141c","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/sidebar.ejs","hash":"ff2ba380abe9f938bea3e37986e3d6d4b6a6c202","modified":1656922600000},{"_id":"themes/hexo/layout/_pendant/clock.ejs","hash":"636836bca04508ff1c61d1d7e64c5eee4f926da3","modified":1656922600000},{"_id":"themes/hexo/layout/_pendant/pendant.ejs","hash":"3bbd6261ed1b2bd55451abc18ee429ddfa5ba1b7","modified":1656922600000},{"_id":"themes/hexo/layout/_pendant/qweather.ejs","hash":"ba3bf56c61d741436c951ff8775abf2519a652fa","modified":1656922600000},{"_id":"themes/hexo/layout/_widget/archive.ejs","hash":"ba94994dfbce48a372b6216b1d22fd09f413f2e8","modified":1656922600000},{"_id":"themes/hexo/layout/_widget/category.ejs","hash":"77e0a959a0654b0df59af85e08e9c43d16c6e89e","modified":1656922600000},{"_id":"themes/hexo/layout/_widget/link.ejs","hash":"6696f929fefe1f81c6c7cedc9031c8d4bfabbdbd","modified":1656922600000},{"_id":"themes/hexo/layout/_widget/recent_posts.ejs","hash":"ac93edcc618dcdad716e2549636e9834da2092d7","modified":1656922600000},{"_id":"themes/hexo/layout/_widget/search.ejs","hash":"dc26da0c99b6259116ec142e092aeae41e946409","modified":1656922600000},{"_id":"themes/hexo/layout/_widget/social.ejs","hash":"3bcc461e1100fb03d4caf67cfdda20ad0de3b8c2","modified":1656922600000},{"_id":"themes/hexo/layout/_widget/tag.ejs","hash":"a14146c6177cc083f994c714ab414bb201ef1f07","modified":1656922600000},{"_id":"themes/hexo/scripts/codeBlock/codeBlock.js","hash":"708fd831a40d01befd8221fede47460991794e45","modified":1656922600000},{"_id":"themes/hexo/scripts/clock/clockLink.js","hash":"c845ae0319d69bc2800d3b1e5734a46ea3b00ecd","modified":1656922600000},{"_id":"themes/hexo/scripts/helper/cover_auto_post.js","hash":"7c72c6173276d03f3486221d4b5ff048cb12d668","modified":1656922600000},{"_id":"themes/hexo/layout/_widget/tagcloud.ejs","hash":"14a3b6ccdf4f122aa290aced7987ea9795e6faa8","modified":1656922600000},{"_id":"themes/hexo/scripts/helper/css_auto_version.js","hash":"64c3615fd07c9f53d3cb9ec5ab9f92d56076f916","modified":1656922600000},{"_id":"themes/hexo/scripts/helper/js_auto_version.js","hash":"d1bec90cb9e4e6391ccce14f4ec93e7ea8b00e6e","modified":1656922600000},{"_id":"themes/hexo/scripts/helper/image_auto_lazyload.js","hash":"7b49915276afa9dab6dc81e5155d69ad588acec8","modified":1656922600000},{"_id":"themes/hexo/scripts/search/searchLink.js","hash":"e8736f3d62ce5e399173209c9a065a49664a2d21","modified":1656922600000},{"_id":"themes/hexo/scripts/tag/gallery.js","hash":"79a37a1f1cf6b90b34a6f620d230d77ec9a4cb7b","modified":1656922600000},{"_id":"themes/hexo/scripts/webapp/webappLink.js","hash":"b1d878664ab4dd2b64cdf0dcd96cb83c3275dd78","modified":1656922600000},{"_id":"themes/hexo/source/css/other.styl","hash":"2342d227892d2fa541608a7635b0328a568dfc2b","modified":1657356795009},{"_id":"themes/hexo/source/css/webapp.css","hash":"1abbf605a0074dad66830ef3bb70360840505020","modified":1656922600000},{"_id":"themes/hexo/source/js/app.js","hash":"0886cef5b4decc17e21ac70fb8f1d56d61ef1d29","modified":1656922604000},{"_id":"themes/hexo/source/css/style.styl","hash":"136a5e343d31b6e4ec2eedf768a3f931fc130a15","modified":1657200350784},{"_id":"themes/hexo/source/js/clock.js","hash":"6902df918c8e5211e875c56429201d564a87a1b8","modified":1656922604000},{"_id":"themes/hexo/source/js/postcover.js","hash":"5027fcee69486ec17856d4a956f828fb9f3c08e8","modified":1656922604000},{"_id":"themes/hexo/source/js/webapp.js","hash":"2759b867dde5a506f92ebe2c4ae6a2f2fd8b31b8","modified":1656922604000},{"_id":"themes/hexo/source/js/search.js","hash":"d95b9f04a7c11fb66fea422f137d7fe3188c5a5d","modified":1656922604000},{"_id":"themes/hexo/layout/_partial/_analytics/cnzz.ejs","hash":"03d9d13ef82bceec59f73e525a1124df5f6f97d3","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_analytics/baidu.ejs","hash":"ef3b445b93529c6591b560f7c4f1ebdca56e4553","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_analytics/google.ejs","hash":"ec710def09c853e63dc4598ace5b6346035c1098","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_analytics/gtags.ejs","hash":"7f394a1d7560fd52c9d3ec654c9e374342942b2d","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_analytics/gtm-body.ejs","hash":"9e4d32cf44d3ed373ba0b3e8a714378be0b69a78","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_analytics/tencent.ejs","hash":"e2e27f03fe5e22faf217858c7887849028905773","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_analytics/la.ejs","hash":"92a267edbf6df81ccf4239c1047d1dc7b3f57cf5","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_analytics/gtm-head.ejs","hash":"a0d96fe2a7f108cd6e2b8be5ab0b85d29e4dba57","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_comment/DiscussBot.ejs","hash":"c905c27f2e338dad0236ad3af60070629e3af97f","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_comment/changyan.ejs","hash":"1d703bf1e19ec5f0721dac537f917a077899462b","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_comment/disqus.ejs","hash":"48d8f5e4ac308f8a92a48f8f7dfe99e5465dcb6e","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_comment/gitalk.ejs","hash":"0fcfd92a3a70d1c2b0cbd3e484d2f842088a3863","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_comment/gitment.ejs","hash":"c04e14664b69c4a7f12fc88b547994ddd9a74e1d","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_comment/disqusjs.ejs","hash":"477d18a9c061cc750f6468189bd16218b317b023","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_comment/livere.ejs","hash":"af2ef5889f3f8a3326bcee017319586a0179e439","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_post/meta.ejs","hash":"0c4edfdd6691864684218c739c61d609935684a3","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_comment/valine.ejs","hash":"408edabaaba28477c065c1e7695ec5fdd9a1c9fe","modified":1656922600000},{"_id":"themes/hexo/layout/_partial/_post/tag.ejs","hash":"aa85d5e6f2af22811d699c86e45474da15527527","modified":1656922600000},{"_id":"themes/hexo/source/css/_partial/article.styl","hash":"3c1e12a5a66205ea7b83715112db8943631f30c2","modified":1656922600000},{"_id":"themes/hexo/source/css/_partial/archives.styl","hash":"cfba92eddd35d6228281a508d202f5541d94f207","modified":1656922600000},{"_id":"themes/hexo/source/css/_partial/py.styl","hash":"42e780a854f4d0dbb72c54f97fbee313897be420","modified":1656922600000},{"_id":"themes/hexo/source/images/background/cangshu.png","hash":"79566fdd8d4b29971f84bcf7678b1cd451827534","modified":1656922600000},{"_id":"themes/hexo/source/images/background/cat.png","hash":"ccda3c9f0c85dfc457c723cf24e7868e72314c2a","modified":1656922600000},{"_id":"themes/hexo/source/images/background/chichi.jpg","hash":"e364c38f02bf9c1b74110e4e7cb5915dfeefc89e","modified":1656922600000},{"_id":"themes/hexo/source/images/background/papa.jpg","hash":"10d778fbed199c56e986e3d22ad80c18a06db5f2","modified":1656922600000},{"_id":"themes/hexo/source/images/head/call.jpg","hash":"045628c7e5cde14e50d10cc2db57c503cef8c932","modified":1656922604000},{"_id":"themes/hexo/source/images/head/head.jpg","hash":"ddb660a97661cfbad9958440311061203d102323","modified":1656922604000},{"_id":"themes/hexo/source/images/head/uniapp.jpg","hash":"6ea306a5ff9b0cccc3b0c23db8ff2a70bef6221c","modified":1656922604000},{"_id":"themes/hexo/source/images/head/vue.jpg","hash":"a054b7f6da951ead22c2e5454c5357151c3b62a2","modified":1656922604000},{"_id":"themes/hexo/source/images/emoji/100.gif","hash":"08e13e2f9a57713cac0bb3570472601ad3b64cd4","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/101.gif","hash":"a49210c9d99f5e1663a7b3ee1836c603866fe703","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/102.gif","hash":"b22c01184c47b80c25841ab3dd74525af506132b","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/103.gif","hash":"5a67c38c03c501dd3cc762bd475a2f952a8eb967","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/104.gif","hash":"ecb730525f4bbab66a2f7d1a0beb4c5a33024c4d","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/105.gif","hash":"e70bca66a53a5d5a2633cd806c9e75968ac8df48","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/106.gif","hash":"951441561cf6dc97d90db2e32db95d2ac81e0803","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/107.gif","hash":"8f55b9a520a5daeeb874f18e3a0ff5e8e7a5b7bb","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/108.gif","hash":"8f2e77f259f99cbf81b3ae8e6f5bad08d3c233e8","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/109.gif","hash":"d26731f3ac47eef724940225fdc7cc4b32df0fc9","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/110.gif","hash":"b0011c024457e3fd56151ec6d7a083d9b60824f0","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/111.gif","hash":"efd4e92387b3d2adaa6aafa539b64b94e384e751","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/112.gif","hash":"ead851113876e9ca8b34bb9e14ea795e231ad4c3","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/113.gif","hash":"30f300ea0255b5e2d526e26c7b13cb2a9aca986a","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/114.gif","hash":"38469b26c1e59718b5bc0d11fb770944ffdff6cc","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/116.gif","hash":"fd48dd300d810035667999dd4471d1788fecb3ae","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/115.gif","hash":"112ed4f86a19b83a89fb032bc9b0e045f0f501d2","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/117.gif","hash":"f6528fe54ba1e8e9511ddf70689bcdc65bb3015b","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/118.gif","hash":"eae431af35aaada000bac3bf1169c8522b305ee1","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/120.gif","hash":"be94dcfd79af6b2b0a1934bb3b3a0808134fe9d1","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/119.gif","hash":"a896b477bd134ae30fb49c826841ce0a0ad0709a","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/121.gif","hash":"db18cc01ddaa4668ad1faffc9f5f62eb4452e325","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/122.gif","hash":"e3f7e0d4aa2cffd8b8d48ae25a5250501c4916c9","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/124.gif","hash":"97e045b79958302955e00ceb2ca3eae29e558a87","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/123.gif","hash":"ae6d19d7f175180b8311ab49fbe0a9ee27115713","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/125.gif","hash":"3cca520648813a9223de9e7c40348739db1e2167","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/126.gif","hash":"11834b77f4b20383aeeda4e53c32834ad62b35e2","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/127.gif","hash":"2c24c9b755703a656af6983767d9c76e319b3054","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/128.gif","hash":"53baf1a3eaf8bee92c0376d35d7f504199d52fdb","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/129.gif","hash":"aed1ac54764de1604f1e2f803af91c5400dd12c0","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/130.gif","hash":"a53accded36281c55e3299c635e1f5c47093ead5","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/131.gif","hash":"efc4648182d11ac7f77f5d0f6f5a9fdaac8c3d02","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/132.gif","hash":"f77fe2749048668ca424b7a691e128c9353ed2d0","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/134.gif","hash":"08c8dc4fd6f9018f7c9af1a90c671defe8bbeafd","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/133.gif","hash":"3004a4ca69e73e535fea208e42cbad2d37cbac30","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/135.gif","hash":"114d709fb33e9bc1ff694e3974b9aa249e859e27","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/136.gif","hash":"f55bdf318dfff07a009f27802f2e6492d299a9d5","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/137.gif","hash":"55d89284defe7617b17813a65f1b65c12f509749","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/138.gif","hash":"13cefa1d39ac3ebb77845d21ad817a20557182a0","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/139.gif","hash":"f1a8196f58a2e95c2fc376d65b3362e2f3b360e8","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/140.gif","hash":"14694d0c7e7dd0a87cc83cef5e4064f956618544","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/141.gif","hash":"9de2fa2aef63cf8e6096ad2c0c8ca19bf9bf1409","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/143.gif","hash":"bb33a375ec6cf4b301a858316d991d690dc4694a","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/142.gif","hash":"71c99c8d90fee2e92ab8ebd843d11c884e7a83b2","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/144.gif","hash":"8b487eae23ec61ae136ed82ba46347d9fdc740aa","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/145.gif","hash":"c29cb928fa3982042687a3f0d800f636b5dcce88","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/147.gif","hash":"776285d4af925fe51c9fa179c0c5f499e5bc1009","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/146.gif","hash":"23ef2d150adb840a57e629a3b8d89a3cdb566b4c","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/148.gif","hash":"addae76a66cf12d64f6fe38bb6e83101cfc8cf5c","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/149.gif","hash":"08230e3085ca3d657c27eee81048bd3049df0be1","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/150.gif","hash":"c7a403b5e33b7c45501ef600ea91066e60e25619","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/151.gif","hash":"e79d25fc8730714f7625aae411dda011c39e11ed","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/152.gif","hash":"9e8e1a602549a5daa86a60cd2b932feda12cd856","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/153.gif","hash":"505d8bb3f2b51cac729f8b6602bb1a1d329c8eff","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/154.gif","hash":"e3180081f65ed3f2f02cd9910578f3864003feb9","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/155.gif","hash":"54b4e482b857437e7d4168ae3dc42aeee0041b03","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/156.gif","hash":"67e7ae5690c35528796678fae0307bc6cd8b7139","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/157.gif","hash":"a942190d6ca4ed6707300f0df551a5e9a3559818","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/158.gif","hash":"5acb07481f05bc084b8142d2c3149b497f3d9a43","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/159.gif","hash":"b2d4b7a39b901cf4c3ee263266d45220d2a8d023","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/160.gif","hash":"2f62eb4c5f0756547e09bc259c41d8c0b69b8a4c","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/162.gif","hash":"4b7e2723c14404478bf590e5c10dff34fe95c126","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/164.gif","hash":"f27481a27a18420f256911763e1bd2bc21bb6692","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/163.gif","hash":"a3cd050714583290f5aaa2b03a7821911ca7133f","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/161.gif","hash":"04552d20fc832b0d4b4a0fe7d8ee9bfc2de493ab","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/165.gif","hash":"d89054c0aa501c23b0dc3b6cdd4d2a3465040d4c","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/167.gif","hash":"df1d3e8e957e3bfcc722fd2b04e6ea201bacdb5d","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/166.gif","hash":"af2fee57afe72d6e3162ab04dcd15ac96223b642","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/168.gif","hash":"cbf5294928cbe64e547f299b066aa92fd879cdc7","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/169.gif","hash":"65150b00b3f002d2a35e36b05108869e248945a4","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/170.gif","hash":"0f7cf27e866ae6226967add3cb8e2c54e18044f3","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/171.gif","hash":"78572a3d820aa5460f051a03d9c8171957c96044","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/172.gif","hash":"f1db06ec39eed83eed6253037bfe49e3fb70eab3","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/173.gif","hash":"530ed8b5671e78c91432ea2002cac85c9411795f","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/174.gif","hash":"e8582ecde37573ca8a4c237fb6ee8d8c8309eb2b","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/175.gif","hash":"d7e7f75f7a3e708e548f139240b7d1cf8b0b12e3","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/176.gif","hash":"cd19cc59c65b97621d4d02387941858604709d36","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/177.gif","hash":"32c95ad1721fc143df5e1795388d4f0b2ceab739","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/178.gif","hash":"ab6f3d3e6cfd080af48f5acf02b0544634e5b8f9","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/179.gif","hash":"e74435eb9ef411becedeaf17d380aa0c76c0ff0c","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/180.gif","hash":"2c5247fe32b396b411a02853a3d8177c1acc501a","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/181.gif","hash":"3555eae56a92a6d592e84b7b40b20da6d5cff8da","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/182.gif","hash":"8dfc6421e5d68e9a12867d5c6605edff4b345124","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/183.gif","hash":"a87911529020e62f399902e4290b8e4325378f93","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/184.gif","hash":"1030d1242670e2f541a2c7ef0e94ae00f4401536","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/185.gif","hash":"062280ba4b67e2053d625680578776ce2bd3e748","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/186.gif","hash":"cafff6b96491d24e8c7f87d7bad0b4c8d6df7c2f","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/187.gif","hash":"4265f098e55cfd4a075cb303b12442e02de40b28","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/188.gif","hash":"48c34728a802c10da59c6ece07cf12e4e6fa2f2d","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/189.gif","hash":"707e3552c8b086dfcc627a2e8843405a5cddacec","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/190.gif","hash":"c112e7a0fd8a2ae0ea01442d13a21cb26aab78c6","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/191.gif","hash":"d27dce702731088be15d440abf36e16790eda893","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/192.gif","hash":"3a8fc60f3a8a9592fe4826b7ec01c11973b32818","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/193.gif","hash":"c4100e61798f46ce432488391fb850c0d85915d7","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/194.gif","hash":"d4fa1dfc51723eaaaa351e44afcd90e9f8ed2329","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/195.gif","hash":"d12ecb9031ec2747941054297d542fac3c263b86","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/196.gif","hash":"dd999e90afd8a1779b08923ed9a1aa4e725b6a43","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/197.gif","hash":"6b4ddde064fd31f76f0f16bab4328fe337668391","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/198.gif","hash":"9e20eb98f55781c4f260b078529d3c1b852c553f","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/199.gif","hash":"c4aafef4b734516b0c6fd2d2f344ca383a04e7f3","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/200.png","hash":"11e4c96f09209016c88d9c99c1c884db6abdd0d8","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/201.png","hash":"2e4e9b89539588a65a80ca4d8a246e1a38cfdc34","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/202.png","hash":"9ff2f7dd6c0da725007ede6befd2a3a36c3079c9","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/203.png","hash":"2aec6517e1b8203d3d4b2acddc8fb7b37c5bf64b","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/204.png","hash":"39a4705bfae18f5e312997797869888bb4bc447a","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/205.png","hash":"b934b7a27869b7f37fffac441540104cba1c29d2","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/206.png","hash":"a8e73d095313fe0372eca4e72e92961cf9022f07","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/207.png","hash":"f48194a896768596845c77dcb1f78205b12c8b79","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/208.png","hash":"8f5fd728b5a605a1eeb4c475ac7584e810513347","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/210.png","hash":"510508062daaaf95a3e66d85b777911c59518f29","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/209.png","hash":"367a93350236149c874138b920cbf2c0e6d29176","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/211.png","hash":"cac7341d040a6b7c6747f14c53b630f76101d226","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/212.png","hash":"135435d8b921c1f1bc4843355f88a6ced3901037","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/213.png","hash":"8d83b0b6815b1a69bcd6d4da9ee287c1c2a13972","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/214.png","hash":"25b4e208a518e9993e293025faddd9239893eed3","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/216.png","hash":"0011363a9816758f46d831d6353e58e4d19f1180","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/215.png","hash":"c43d2eb06da33d356f8d519e7f9fd37a97e7b8be","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/217.png","hash":"843311fc87f67bc6bd357c2439d70f25e3d0f5f2","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/218.png","hash":"4ae0ba0b3b6500c20645fe189036c2e2b35d6583","modified":1656922602000},{"_id":"themes/hexo/source/images/emoji/219.png","hash":"14b60d99208719b8953c4630397495640c0d8f16","modified":1656922602000},{"_id":"themes/hexo/source/images/post/JavaScript.jpg","hash":"6933428537582f4ea97c7fe0460e13716dbc13d7","modified":1656922604000},{"_id":"themes/hexo/source/images/post/TypeScript.jpg","hash":"d1330ba7733b6b53993a435fedf1d56ea8d6d0bd","modified":1656922604000},{"_id":"themes/hexo/source/images/post/algorithm.jpg","hash":"a22350c34e87a2877c7ad797601add67d57ef1fd","modified":1656922604000},{"_id":"themes/hexo/source/images/post/beautify.jpg","hash":"2a07d7e9c70332e134c36f5b14e1f37505939756","modified":1656922604000},{"_id":"themes/hexo/source/images/post/browser.jpg","hash":"112c9ac27e9c64900c7b015ebd881ec5c69ebc82","modified":1656922604000},{"_id":"themes/hexo/source/images/post/css.jpg","hash":"8c2650dfb926e9ec19ae515da44cb5257ce09387","modified":1656922604000},{"_id":"themes/hexo/source/images/post/data.jpg","hash":"c51b02dd57aa59357a4385bc4e0e7c7bef8c4c69","modified":1656922604000},{"_id":"themes/hexo/source/images/post/development_tool.jpg","hash":"79304751390001a95d8eb9d014ff0050fe8b47c3","modified":1656922604000},{"_id":"themes/hexo/source/images/post/docker.jpg","hash":"caebb3795b800df635bd89a77a335d5f466975ea","modified":1656922604000},{"_id":"themes/hexo/source/images/post/es6.jpg","hash":"2b3301404f555ca66fbba208970ecf18bd755566","modified":1656922604000},{"_id":"themes/hexo/source/images/post/git.jpg","hash":"8b3ff9dd6d500ad2feaf899bb70380f9467a87cd","modified":1656922604000},{"_id":"themes/hexo/source/images/post/internet.jpg","hash":"1460f2cb6908f4b0c7f3b48d75ebf8379056b222","modified":1656922604000},{"_id":"themes/hexo/source/images/post/markerdown.jpg","hash":"632c5ca83b95c742be114c522c2dd779f9b296f5","modified":1656922604000},{"_id":"themes/hexo/source/images/post/nodejs.jpg","hash":"a6cedb5889544d26ebb0e9683b28ba52f6aab450","modified":1656922604000},{"_id":"themes/hexo/source/images/post/vue.jpg","hash":"26ad5c5ad634347aac9d5bc85fcb217ed980bd4a","modified":1656922604000},{"_id":"themes/hexo/source/images/post/webpack.jpg","hash":"ba36ac97f844f9d2b9df6239a5f7292b19030425","modified":1656922604000},{"_id":"themes/hexo/source/lib/codeBlock/codeBlockFuction.js","hash":"b48efab08a0856094ec67b56b91e8eb5075490f9","modified":1656922604000},{"_id":"themes/hexo/source/images/post/wechat_applet.jpg","hash":"5760cc1715e5930339c6b7d14f5f20c69f2389ad","modified":1656922604000},{"_id":"themes/hexo/source/lib/codeBlock/codeCopy.js","hash":"e590db81151ce9f63e810338bf350ef571e5769f","modified":1656922604000},{"_id":"themes/hexo/source/lib/codeBlock/codeLang.js","hash":"fc584a7cf615eaa8a26f05b8efd6653225c748d7","modified":1656922604000},{"_id":"themes/hexo/source/lib/codeBlock/codeShrink.js","hash":"6db05ce6baeee604ca5c68e0a731eb90153d6fef","modified":1656922604000},{"_id":"themes/hexo/source/lib/codeBlock/matery.css","hash":"a001f7c96966924412c3d5bfed40487a18360979","modified":1656922604000},{"_id":"themes/hexo/source/images/view/render_tree.png","hash":"86409dfcf8b9366bc973cae95a0a03446277e9fc","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/demo_index.html","hash":"77a7fde76271989fb498422f582f29d2ba61b90d","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/iconfont.css","hash":"f77481ef899d42d1f07d009332e92f58a8adcf95","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/iconfont.eot","hash":"465966dac936ddff3e7313dea360f59c43fab804","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/iconfont.js","hash":"bcd569bf13e40a6d49f55aa8f4e488ab89e1041a","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/iconfont.json","hash":"eeeb2c84e41830df6b3e00c3a76294b98f86fcf6","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/iconfont.svg","hash":"8fd873ccd941cdf9313f99aa405334dc6b68ea20","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/iconfont.ttf","hash":"1b497f21aff9732f4e9f66881b028c3eb0e0763e","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/iconfont.woff","hash":"15f15f4b1219ba1bc08267f2e70d2cac5bb3d496","modified":1656922604000},{"_id":"themes/hexo/source/lib/iconfont/iconfont.woff2","hash":"d966e8fdd11265e4e7d84bbff903e89aa778bd18","modified":1656922604000},{"_id":"themes/hexo/source/lib/fancybox/css/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1656922604000},{"_id":"themes/hexo/source/images/background/lihui3.jpg","hash":"a20ec585b4bb226c7f690b0875126b859aaf27ff","modified":1657257206291},{"_id":"themes/hexo/source/images/background/lihui2.jpg","hash":"4b350383b33d82551a60e39ae5030db62634bcc1","modified":1657257195925},{"_id":"themes/hexo/source/images/post/java.jpg","hash":"2a0cbd5d80a679a400b66d2ede2d3a03e3f6e27e","modified":1656922604000},{"_id":"themes/hexo/source/images/post/phantomjs.png","hash":"5dade79e59d099fe1b7e6ab40e294d40ecf9bc1e","modified":1656922604000},{"_id":"themes/hexo/source/images/post/ui.jpg","hash":"caff3b70d12b1e66e4fabc399086467fc04340dd","modified":1656922604000},{"_id":"themes/hexo/source/lib/fancybox/js/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1656922604000},{"_id":"themes/hexo/source/images/background/lihui1.jpg","hash":"99bae71422f2d781609c043aea1b66de10c4ef64","modified":1657257003648},{"_id":"themes/hexo/source/images/background/lihui.png","hash":"9fc8d5b24020428cdc492ddbe82d44e5a6abd9ee","modified":1656922600000},{"_id":"themes/hexo/source/images/background/xiaomai.jpg","hash":"382a4746f7fba1820f82da78f0dd02ce0a6b9627","modified":1656922602000},{"_id":"themes/hexo/source/images/post/editor.jpg","hash":"f988f11f5aee24e549551aff9912ae547cb1ab1e","modified":1656922604000},{"_id":"themes/hexo/source/lib/mdui_043tiny/css/mdui.css","hash":"b79ef94d2b11f8ce05ba048f5d74a3bd09f12e4d","modified":1656922604000},{"_id":"themes/hexo/source/lib/mdui_043tiny/js/mdui.js","hash":"9feeebf8c11d8ce8549ec94896c630ba2334613c","modified":1656922604000},{"_id":"themes/hexo/source/images/head/tx1.jpg","hash":"6d13e0c902b7e45a780794a2046caa59e1bdadd4","modified":1657596049189},{"_id":"themes/hexo/source/images/background/lihui7.png","hash":"d482bbcf1e0b3b03a5b35cbdc3320321bfbd0482","modified":1657337386192},{"_id":"themes/hexo/source/images/background/lihui6-3.png","hash":"96119290c965e80bfbdaaf52307b57d1c609041e","modified":1657349706205},{"_id":"themes/hexo/source/images/background/lihui6-5.png","hash":"6b61cb6a64df122c9df4cca0a2fb1c7bad19f774","modified":1657350023166},{"_id":"themes/hexo/source/images/background/lihui6-1.png","hash":"c0ab16a36b76ba13f2f7ce3ad628fb5108d43cfd","modified":1657348925307},{"_id":"themes/hexo/source/images/background/lihui6.png","hash":"0efa01211c51e822d479c974e25cce39b8d56f83","modified":1657337156850},{"_id":"public/search.xml","hash":"2a2176a754ad0c65d201baaae56bf444dcfb9731","modified":1658235326884},{"_id":"public/2022/07/08/十二-JavaScript-BOM与DOM/index.html","hash":"e5da87981dcded19a2f1f5df0dec02fddd31f38f","modified":1658235331238},{"_id":"public/2022/07/08/九-动画/index.html","hash":"18b3039120c0a3edf51808505a7f9deb62f3de9d","modified":1658235331238},{"_id":"public/2022/07/08/十-JavaScript基础/index.html","hash":"90c5bece257cace3104c16f869a0e358f32af60e","modified":1658235331238},{"_id":"public/2022/07/08/八-布局/index.html","hash":"a4c45ce5f4577237ad6b729f0204926cd9c1aa11","modified":1658235331238},{"_id":"public/2022/07/08/七-盒子模型/index.html","hash":"a8c244f3086f674111caabedc14d8f8697ad861a","modified":1658235331238},{"_id":"public/2022/07/08/六-样式表与选择器/index.html","hash":"ad6578be819838fb0359ad21a408a916a1911420","modified":1658235331238},{"_id":"public/2022/07/08/五-CSS常用样式/index.html","hash":"2a5863b1255bc9a67420d4f70c64d39c3bacada6","modified":1658235331238},{"_id":"public/2022/07/08/四-CSS3概述/index.html","hash":"0f7231560bc499c982f113cab842ff38ac286422","modified":1658235331238},{"_id":"public/2022/07/08/三-HTML5/index.html","hash":"3217deab7935e04d43ee5ed387bf5d3332bc44b3","modified":1658235331238},{"_id":"public/2022/07/08/MD中的HTML标签文字被网页编译问题/index.html","hash":"319f7acabc40924c476958e175c8797901d369b5","modified":1658235331238},{"_id":"public/2022/07/08/二-表单/index.html","hash":"5080966f22d5bfe0eb7d1413a725287f33b0e0fe","modified":1658235331238},{"_id":"public/2022/07/08/一-走进HTML/index.html","hash":"c8b12c892d1b34b1a1c7bab699915d147014bd2d","modified":1658235331238},{"_id":"public/2022/07/07/JavaScript对象/index.html","hash":"02be39ec90d06e2ba7cead752df42f3df7800740","modified":1658235331238},{"_id":"public/2022/07/07/SpringBoot笔记(一）/index.html","hash":"bb6d908e4c57e03a8ec21f9e58752dae4d1182c0","modified":1658235331238},{"_id":"public/2022/07/05/Hexo-Github搭建博客/index.html","hash":"77aba0a15d1ee94a03ccf335d911e4da47b995ea","modified":1658235331238},{"_id":"public/2022/07/05/Markdown过长导致页面无法显示问题/index.html","hash":"75560b694bf5c05390d6537b7b2bf5a7667535e6","modified":1658235331238},{"_id":"public/2022/07/05/SpringBoot整合Jpa/index.html","hash":"74940133a38aab694cdfdec99b17597559084f4b","modified":1658235331238},{"_id":"public/2022/07/04/Json教程/index.html","hash":"117fa3eca10d8ca15dde0e2f79db5ed93806bb89","modified":1658235331238},{"_id":"public/2022/07/02/hello-world/index.html","hash":"f76a5741b14d8b25a23b2fab285a743d4340f81e","modified":1658235331238},{"_id":"public/archives/index.html","hash":"295fd2a00d587c6e639d93718e28543fbbb1d5bf","modified":1658235331238},{"_id":"public/archives/page/2/index.html","hash":"e442ae2041ccf509ed7a6c73d1789b097194ba7e","modified":1658235331238},{"_id":"public/archives/2022/index.html","hash":"aa4d38fcb2c453b991b52a0c2a17cd76e9ef884d","modified":1658235331238},{"_id":"public/archives/2022/page/2/index.html","hash":"194a608de608044b494a59fb97dd8e9e462b548f","modified":1658235331238},{"_id":"public/archives/2022/07/index.html","hash":"9fd65e770a192ae20a8a754c516046479c981046","modified":1658235331238},{"_id":"public/archives/2022/07/page/2/index.html","hash":"bcd7bf173a02c1994286b94988c2036a504193a7","modified":1658235331238},{"_id":"public/categories/问题组/index.html","hash":"bebceb5cee735a0f00aae21e7c15ea790c83ca99","modified":1658235331238},{"_id":"public/index.html","hash":"44ab364487e463c19faae27e5ee4109d6b6842db","modified":1658235331238},{"_id":"public/page/2/index.html","hash":"f0bf6912ee6818f66b0b90f0dff516642c94a89b","modified":1658235331238},{"_id":"public/tags/瞎写的/index.html","hash":"107aa34871a37818ef96982faf81def052589b3f","modified":1658235331238},{"_id":"public/archives.html","hash":"aec5a700096a96dd627a36c08369ff6bf46003bf","modified":1658235331238},{"_id":"public/categories/兴趣组/index.html","hash":"1ea873ce479189af55b6e74ac939de1a15070e88","modified":1658235331238},{"_id":"public/categories/前端组/index.html","hash":"3e437cad9d7023ab1858d47279e91c22960f3998","modified":1658235331238},{"_id":"public/categories/前端组/page/2/index.html","hash":"3e77a6a3ec1ebdc66453fa8a41da9b29010544c0","modified":1658235331238},{"_id":"public/categories/知识组/index.html","hash":"36358b870dc543902326ec1f1f5d85be0e61a344","modified":1658235331238},{"_id":"public/categories/SpringBoot/index.html","hash":"5d75eebaf1ac1b8084e8cd082eff91c21b387be4","modified":1658235331238},{"_id":"public/tags/JavaScript/index.html","hash":"f04558e4b17c1dd88837aad93282f55e25e97692","modified":1658235331238},{"_id":"public/tags/知识/index.html","hash":"c3759d95062331ccbd4202869c2576d1b0531149","modified":1658235331238},{"_id":"public/tags/知识/page/2/index.html","hash":"60d645f6bee3ea24f8f568259ab6f4233a5253b7","modified":1658235331238},{"_id":"public/images/background/cangshu.png","hash":"79566fdd8d4b29971f84bcf7678b1cd451827534","modified":1657596784933},{"_id":"public/images/background/cat.png","hash":"ccda3c9f0c85dfc457c723cf24e7868e72314c2a","modified":1657596784933},{"_id":"public/images/background/chichi.jpg","hash":"e364c38f02bf9c1b74110e4e7cb5915dfeefc89e","modified":1657596784933},{"_id":"public/images/background/papa.jpg","hash":"10d778fbed199c56e986e3d22ad80c18a06db5f2","modified":1657596784933},{"_id":"public/images/head/call.jpg","hash":"045628c7e5cde14e50d10cc2db57c503cef8c932","modified":1657596784933},{"_id":"public/images/head/head.jpg","hash":"ddb660a97661cfbad9958440311061203d102323","modified":1657596784933},{"_id":"public/images/head/uniapp.jpg","hash":"6ea306a5ff9b0cccc3b0c23db8ff2a70bef6221c","modified":1657596784933},{"_id":"public/images/head/vue.jpg","hash":"a054b7f6da951ead22c2e5454c5357151c3b62a2","modified":1657596784933},{"_id":"public/images/emoji/101.gif","hash":"a49210c9d99f5e1663a7b3ee1836c603866fe703","modified":1657596784933},{"_id":"public/images/emoji/102.gif","hash":"b22c01184c47b80c25841ab3dd74525af506132b","modified":1657596784933},{"_id":"public/images/emoji/100.gif","hash":"08e13e2f9a57713cac0bb3570472601ad3b64cd4","modified":1657596784933},{"_id":"public/images/emoji/103.gif","hash":"5a67c38c03c501dd3cc762bd475a2f952a8eb967","modified":1657596784933},{"_id":"public/images/emoji/104.gif","hash":"ecb730525f4bbab66a2f7d1a0beb4c5a33024c4d","modified":1657596784933},{"_id":"public/images/emoji/105.gif","hash":"e70bca66a53a5d5a2633cd806c9e75968ac8df48","modified":1657596784933},{"_id":"public/images/emoji/107.gif","hash":"8f55b9a520a5daeeb874f18e3a0ff5e8e7a5b7bb","modified":1657596784933},{"_id":"public/images/emoji/106.gif","hash":"951441561cf6dc97d90db2e32db95d2ac81e0803","modified":1657596784933},{"_id":"public/images/emoji/108.gif","hash":"8f2e77f259f99cbf81b3ae8e6f5bad08d3c233e8","modified":1657596784933},{"_id":"public/images/emoji/109.gif","hash":"d26731f3ac47eef724940225fdc7cc4b32df0fc9","modified":1657596784933},{"_id":"public/images/emoji/110.gif","hash":"b0011c024457e3fd56151ec6d7a083d9b60824f0","modified":1657596784933},{"_id":"public/images/emoji/111.gif","hash":"efd4e92387b3d2adaa6aafa539b64b94e384e751","modified":1657596784933},{"_id":"public/images/emoji/112.gif","hash":"ead851113876e9ca8b34bb9e14ea795e231ad4c3","modified":1657596784933},{"_id":"public/images/emoji/113.gif","hash":"30f300ea0255b5e2d526e26c7b13cb2a9aca986a","modified":1657596784933},{"_id":"public/images/emoji/114.gif","hash":"38469b26c1e59718b5bc0d11fb770944ffdff6cc","modified":1657596784933},{"_id":"public/images/emoji/116.gif","hash":"fd48dd300d810035667999dd4471d1788fecb3ae","modified":1657596784933},{"_id":"public/images/emoji/115.gif","hash":"112ed4f86a19b83a89fb032bc9b0e045f0f501d2","modified":1657596784933},{"_id":"public/images/emoji/117.gif","hash":"f6528fe54ba1e8e9511ddf70689bcdc65bb3015b","modified":1657596784933},{"_id":"public/images/emoji/118.gif","hash":"eae431af35aaada000bac3bf1169c8522b305ee1","modified":1657596784933},{"_id":"public/images/emoji/120.gif","hash":"be94dcfd79af6b2b0a1934bb3b3a0808134fe9d1","modified":1657596784933},{"_id":"public/images/emoji/119.gif","hash":"a896b477bd134ae30fb49c826841ce0a0ad0709a","modified":1657596784933},{"_id":"public/images/emoji/121.gif","hash":"db18cc01ddaa4668ad1faffc9f5f62eb4452e325","modified":1657596784933},{"_id":"public/images/emoji/122.gif","hash":"e3f7e0d4aa2cffd8b8d48ae25a5250501c4916c9","modified":1657596784933},{"_id":"public/images/emoji/123.gif","hash":"ae6d19d7f175180b8311ab49fbe0a9ee27115713","modified":1657596784933},{"_id":"public/images/emoji/126.gif","hash":"11834b77f4b20383aeeda4e53c32834ad62b35e2","modified":1657596784933},{"_id":"public/images/emoji/124.gif","hash":"97e045b79958302955e00ceb2ca3eae29e558a87","modified":1657596784933},{"_id":"public/images/emoji/125.gif","hash":"3cca520648813a9223de9e7c40348739db1e2167","modified":1657596784933},{"_id":"public/images/emoji/128.gif","hash":"53baf1a3eaf8bee92c0376d35d7f504199d52fdb","modified":1657596784933},{"_id":"public/images/emoji/127.gif","hash":"2c24c9b755703a656af6983767d9c76e319b3054","modified":1657596784933},{"_id":"public/images/emoji/129.gif","hash":"aed1ac54764de1604f1e2f803af91c5400dd12c0","modified":1657596784933},{"_id":"public/images/emoji/130.gif","hash":"a53accded36281c55e3299c635e1f5c47093ead5","modified":1657596784933},{"_id":"public/images/emoji/131.gif","hash":"efc4648182d11ac7f77f5d0f6f5a9fdaac8c3d02","modified":1657596784933},{"_id":"public/images/emoji/132.gif","hash":"f77fe2749048668ca424b7a691e128c9353ed2d0","modified":1657596784933},{"_id":"public/images/emoji/133.gif","hash":"3004a4ca69e73e535fea208e42cbad2d37cbac30","modified":1657596784933},{"_id":"public/images/emoji/134.gif","hash":"08c8dc4fd6f9018f7c9af1a90c671defe8bbeafd","modified":1657596784933},{"_id":"public/images/emoji/135.gif","hash":"114d709fb33e9bc1ff694e3974b9aa249e859e27","modified":1657596784933},{"_id":"public/images/emoji/137.gif","hash":"55d89284defe7617b17813a65f1b65c12f509749","modified":1657596784933},{"_id":"public/images/emoji/136.gif","hash":"f55bdf318dfff07a009f27802f2e6492d299a9d5","modified":1657596784933},{"_id":"public/images/emoji/138.gif","hash":"13cefa1d39ac3ebb77845d21ad817a20557182a0","modified":1657596784933},{"_id":"public/images/emoji/139.gif","hash":"f1a8196f58a2e95c2fc376d65b3362e2f3b360e8","modified":1657596784933},{"_id":"public/images/emoji/140.gif","hash":"14694d0c7e7dd0a87cc83cef5e4064f956618544","modified":1657596784933},{"_id":"public/images/emoji/143.gif","hash":"bb33a375ec6cf4b301a858316d991d690dc4694a","modified":1657596784933},{"_id":"public/images/emoji/141.gif","hash":"9de2fa2aef63cf8e6096ad2c0c8ca19bf9bf1409","modified":1657596784933},{"_id":"public/images/emoji/144.gif","hash":"8b487eae23ec61ae136ed82ba46347d9fdc740aa","modified":1657596784933},{"_id":"public/images/emoji/142.gif","hash":"71c99c8d90fee2e92ab8ebd843d11c884e7a83b2","modified":1657596784933},{"_id":"public/images/emoji/146.gif","hash":"23ef2d150adb840a57e629a3b8d89a3cdb566b4c","modified":1657596784933},{"_id":"public/images/emoji/145.gif","hash":"c29cb928fa3982042687a3f0d800f636b5dcce88","modified":1657596784933},{"_id":"public/images/emoji/147.gif","hash":"776285d4af925fe51c9fa179c0c5f499e5bc1009","modified":1657596784933},{"_id":"public/images/emoji/148.gif","hash":"addae76a66cf12d64f6fe38bb6e83101cfc8cf5c","modified":1657596784933},{"_id":"public/images/emoji/150.gif","hash":"c7a403b5e33b7c45501ef600ea91066e60e25619","modified":1657596784933},{"_id":"public/images/emoji/149.gif","hash":"08230e3085ca3d657c27eee81048bd3049df0be1","modified":1657596784933},{"_id":"public/images/emoji/151.gif","hash":"e79d25fc8730714f7625aae411dda011c39e11ed","modified":1657596784933},{"_id":"public/images/emoji/153.gif","hash":"505d8bb3f2b51cac729f8b6602bb1a1d329c8eff","modified":1657596784933},{"_id":"public/images/emoji/154.gif","hash":"e3180081f65ed3f2f02cd9910578f3864003feb9","modified":1657596784933},{"_id":"public/images/emoji/152.gif","hash":"9e8e1a602549a5daa86a60cd2b932feda12cd856","modified":1657596784933},{"_id":"public/images/emoji/155.gif","hash":"54b4e482b857437e7d4168ae3dc42aeee0041b03","modified":1657596784933},{"_id":"public/images/emoji/156.gif","hash":"67e7ae5690c35528796678fae0307bc6cd8b7139","modified":1657596784933},{"_id":"public/images/emoji/157.gif","hash":"a942190d6ca4ed6707300f0df551a5e9a3559818","modified":1657596784933},{"_id":"public/images/emoji/158.gif","hash":"5acb07481f05bc084b8142d2c3149b497f3d9a43","modified":1657596784933},{"_id":"public/images/emoji/159.gif","hash":"b2d4b7a39b901cf4c3ee263266d45220d2a8d023","modified":1657596784933},{"_id":"public/images/emoji/160.gif","hash":"2f62eb4c5f0756547e09bc259c41d8c0b69b8a4c","modified":1657596784933},{"_id":"public/images/emoji/162.gif","hash":"4b7e2723c14404478bf590e5c10dff34fe95c126","modified":1657596784933},{"_id":"public/images/emoji/163.gif","hash":"a3cd050714583290f5aaa2b03a7821911ca7133f","modified":1657596784933},{"_id":"public/images/emoji/164.gif","hash":"f27481a27a18420f256911763e1bd2bc21bb6692","modified":1657596784933},{"_id":"public/images/emoji/161.gif","hash":"04552d20fc832b0d4b4a0fe7d8ee9bfc2de493ab","modified":1657596784933},{"_id":"public/images/emoji/165.gif","hash":"d89054c0aa501c23b0dc3b6cdd4d2a3465040d4c","modified":1657596784933},{"_id":"public/images/emoji/166.gif","hash":"af2fee57afe72d6e3162ab04dcd15ac96223b642","modified":1657596784933},{"_id":"public/images/emoji/167.gif","hash":"df1d3e8e957e3bfcc722fd2b04e6ea201bacdb5d","modified":1657596784933},{"_id":"public/images/emoji/168.gif","hash":"cbf5294928cbe64e547f299b066aa92fd879cdc7","modified":1657596784933},{"_id":"public/images/emoji/169.gif","hash":"65150b00b3f002d2a35e36b05108869e248945a4","modified":1657596784933},{"_id":"public/images/emoji/170.gif","hash":"0f7cf27e866ae6226967add3cb8e2c54e18044f3","modified":1657596784933},{"_id":"public/images/emoji/171.gif","hash":"78572a3d820aa5460f051a03d9c8171957c96044","modified":1657596784933},{"_id":"public/images/emoji/172.gif","hash":"f1db06ec39eed83eed6253037bfe49e3fb70eab3","modified":1657596784933},{"_id":"public/images/emoji/173.gif","hash":"530ed8b5671e78c91432ea2002cac85c9411795f","modified":1657596784933},{"_id":"public/images/emoji/174.gif","hash":"e8582ecde37573ca8a4c237fb6ee8d8c8309eb2b","modified":1657596784933},{"_id":"public/images/emoji/175.gif","hash":"d7e7f75f7a3e708e548f139240b7d1cf8b0b12e3","modified":1657596784933},{"_id":"public/images/emoji/176.gif","hash":"cd19cc59c65b97621d4d02387941858604709d36","modified":1657596784933},{"_id":"public/images/emoji/177.gif","hash":"32c95ad1721fc143df5e1795388d4f0b2ceab739","modified":1657596784933},{"_id":"public/images/emoji/178.gif","hash":"ab6f3d3e6cfd080af48f5acf02b0544634e5b8f9","modified":1657596784933},{"_id":"public/images/emoji/179.gif","hash":"e74435eb9ef411becedeaf17d380aa0c76c0ff0c","modified":1657596784933},{"_id":"public/images/emoji/180.gif","hash":"2c5247fe32b396b411a02853a3d8177c1acc501a","modified":1657596784933},{"_id":"public/images/emoji/181.gif","hash":"3555eae56a92a6d592e84b7b40b20da6d5cff8da","modified":1657596784933},{"_id":"public/images/emoji/182.gif","hash":"8dfc6421e5d68e9a12867d5c6605edff4b345124","modified":1657596784933},{"_id":"public/images/emoji/183.gif","hash":"a87911529020e62f399902e4290b8e4325378f93","modified":1657596784933},{"_id":"public/images/emoji/184.gif","hash":"1030d1242670e2f541a2c7ef0e94ae00f4401536","modified":1657596784933},{"_id":"public/images/emoji/185.gif","hash":"062280ba4b67e2053d625680578776ce2bd3e748","modified":1657596784933},{"_id":"public/images/emoji/186.gif","hash":"cafff6b96491d24e8c7f87d7bad0b4c8d6df7c2f","modified":1657596784933},{"_id":"public/images/emoji/187.gif","hash":"4265f098e55cfd4a075cb303b12442e02de40b28","modified":1657596784933},{"_id":"public/images/emoji/188.gif","hash":"48c34728a802c10da59c6ece07cf12e4e6fa2f2d","modified":1657596784933},{"_id":"public/images/emoji/189.gif","hash":"707e3552c8b086dfcc627a2e8843405a5cddacec","modified":1657596784933},{"_id":"public/images/emoji/190.gif","hash":"c112e7a0fd8a2ae0ea01442d13a21cb26aab78c6","modified":1657596784933},{"_id":"public/images/emoji/191.gif","hash":"d27dce702731088be15d440abf36e16790eda893","modified":1657596784933},{"_id":"public/images/emoji/192.gif","hash":"3a8fc60f3a8a9592fe4826b7ec01c11973b32818","modified":1657596784933},{"_id":"public/images/emoji/193.gif","hash":"c4100e61798f46ce432488391fb850c0d85915d7","modified":1657596784933},{"_id":"public/images/emoji/194.gif","hash":"d4fa1dfc51723eaaaa351e44afcd90e9f8ed2329","modified":1657596784933},{"_id":"public/images/emoji/195.gif","hash":"d12ecb9031ec2747941054297d542fac3c263b86","modified":1657596784933},{"_id":"public/images/emoji/196.gif","hash":"dd999e90afd8a1779b08923ed9a1aa4e725b6a43","modified":1657596784933},{"_id":"public/images/emoji/197.gif","hash":"6b4ddde064fd31f76f0f16bab4328fe337668391","modified":1657596784933},{"_id":"public/images/emoji/198.gif","hash":"9e20eb98f55781c4f260b078529d3c1b852c553f","modified":1657596784933},{"_id":"public/images/emoji/199.gif","hash":"c4aafef4b734516b0c6fd2d2f344ca383a04e7f3","modified":1657596784933},{"_id":"public/images/emoji/200.png","hash":"11e4c96f09209016c88d9c99c1c884db6abdd0d8","modified":1657596784933},{"_id":"public/images/emoji/201.png","hash":"2e4e9b89539588a65a80ca4d8a246e1a38cfdc34","modified":1657596784933},{"_id":"public/images/emoji/202.png","hash":"9ff2f7dd6c0da725007ede6befd2a3a36c3079c9","modified":1657596784933},{"_id":"public/images/emoji/203.png","hash":"2aec6517e1b8203d3d4b2acddc8fb7b37c5bf64b","modified":1657596784933},{"_id":"public/images/emoji/204.png","hash":"39a4705bfae18f5e312997797869888bb4bc447a","modified":1657596784933},{"_id":"public/images/emoji/205.png","hash":"b934b7a27869b7f37fffac441540104cba1c29d2","modified":1657596784933},{"_id":"public/images/emoji/207.png","hash":"f48194a896768596845c77dcb1f78205b12c8b79","modified":1657596784933},{"_id":"public/images/emoji/206.png","hash":"a8e73d095313fe0372eca4e72e92961cf9022f07","modified":1657596784933},{"_id":"public/images/emoji/208.png","hash":"8f5fd728b5a605a1eeb4c475ac7584e810513347","modified":1657596784933},{"_id":"public/images/emoji/210.png","hash":"510508062daaaf95a3e66d85b777911c59518f29","modified":1657596784933},{"_id":"public/images/emoji/209.png","hash":"367a93350236149c874138b920cbf2c0e6d29176","modified":1657596784933},{"_id":"public/images/emoji/211.png","hash":"cac7341d040a6b7c6747f14c53b630f76101d226","modified":1657596784933},{"_id":"public/images/emoji/212.png","hash":"135435d8b921c1f1bc4843355f88a6ced3901037","modified":1657596784933},{"_id":"public/images/emoji/214.png","hash":"25b4e208a518e9993e293025faddd9239893eed3","modified":1657596784933},{"_id":"public/images/emoji/213.png","hash":"8d83b0b6815b1a69bcd6d4da9ee287c1c2a13972","modified":1657596784933},{"_id":"public/images/emoji/216.png","hash":"0011363a9816758f46d831d6353e58e4d19f1180","modified":1657596784933},{"_id":"public/images/emoji/215.png","hash":"c43d2eb06da33d356f8d519e7f9fd37a97e7b8be","modified":1657596784933},{"_id":"public/images/emoji/218.png","hash":"4ae0ba0b3b6500c20645fe189036c2e2b35d6583","modified":1657596784933},{"_id":"public/images/emoji/219.png","hash":"14b60d99208719b8953c4630397495640c0d8f16","modified":1657596784933},{"_id":"public/images/emoji/217.png","hash":"843311fc87f67bc6bd357c2439d70f25e3d0f5f2","modified":1657596784933},{"_id":"public/images/post/JavaScript.jpg","hash":"6933428537582f4ea97c7fe0460e13716dbc13d7","modified":1657596784933},{"_id":"public/images/post/TypeScript.jpg","hash":"d1330ba7733b6b53993a435fedf1d56ea8d6d0bd","modified":1657596784933},{"_id":"public/images/post/algorithm.jpg","hash":"a22350c34e87a2877c7ad797601add67d57ef1fd","modified":1657596784933},{"_id":"public/images/post/beautify.jpg","hash":"2a07d7e9c70332e134c36f5b14e1f37505939756","modified":1657596784933},{"_id":"public/images/post/browser.jpg","hash":"112c9ac27e9c64900c7b015ebd881ec5c69ebc82","modified":1657596784933},{"_id":"public/images/post/css.jpg","hash":"8c2650dfb926e9ec19ae515da44cb5257ce09387","modified":1657596784933},{"_id":"public/images/post/data.jpg","hash":"c51b02dd57aa59357a4385bc4e0e7c7bef8c4c69","modified":1657596784933},{"_id":"public/images/post/development_tool.jpg","hash":"79304751390001a95d8eb9d014ff0050fe8b47c3","modified":1657596784933},{"_id":"public/images/post/docker.jpg","hash":"caebb3795b800df635bd89a77a335d5f466975ea","modified":1657596784933},{"_id":"public/images/post/es6.jpg","hash":"2b3301404f555ca66fbba208970ecf18bd755566","modified":1657596784933},{"_id":"public/images/post/git.jpg","hash":"8b3ff9dd6d500ad2feaf899bb70380f9467a87cd","modified":1657596784933},{"_id":"public/images/post/internet.jpg","hash":"1460f2cb6908f4b0c7f3b48d75ebf8379056b222","modified":1657596784933},{"_id":"public/images/post/markerdown.jpg","hash":"632c5ca83b95c742be114c522c2dd779f9b296f5","modified":1657596784933},{"_id":"public/images/post/nodejs.jpg","hash":"a6cedb5889544d26ebb0e9683b28ba52f6aab450","modified":1657596784933},{"_id":"public/images/post/webpack.jpg","hash":"ba36ac97f844f9d2b9df6239a5f7292b19030425","modified":1657596784933},{"_id":"public/images/post/vue.jpg","hash":"26ad5c5ad634347aac9d5bc85fcb217ed980bd4a","modified":1657596784933},{"_id":"public/images/post/wechat_applet.jpg","hash":"5760cc1715e5930339c6b7d14f5f20c69f2389ad","modified":1657596784933},{"_id":"public/images/view/render_tree.png","hash":"86409dfcf8b9366bc973cae95a0a03446277e9fc","modified":1657596784933},{"_id":"public/lib/iconfont/iconfont.eot","hash":"465966dac936ddff3e7313dea360f59c43fab804","modified":1657596784933},{"_id":"public/lib/iconfont/iconfont.svg","hash":"8fd873ccd941cdf9313f99aa405334dc6b68ea20","modified":1657596784933},{"_id":"public/lib/iconfont/iconfont.ttf","hash":"1b497f21aff9732f4e9f66881b028c3eb0e0763e","modified":1657596784933},{"_id":"public/lib/iconfont/iconfont.woff","hash":"15f15f4b1219ba1bc08267f2e70d2cac5bb3d496","modified":1657596784933},{"_id":"public/lib/iconfont/iconfont.woff2","hash":"d966e8fdd11265e4e7d84bbff903e89aa778bd18","modified":1657596784933},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1657596784933},{"_id":"public/images/background/lihui3.jpg","hash":"a20ec585b4bb226c7f690b0875126b859aaf27ff","modified":1657596784933},{"_id":"public/images/background/lihui2.jpg","hash":"4b350383b33d82551a60e39ae5030db62634bcc1","modified":1657596784933},{"_id":"public/images/post/java.jpg","hash":"2a0cbd5d80a679a400b66d2ede2d3a03e3f6e27e","modified":1657596784933},{"_id":"public/images/post/phantomjs.png","hash":"5dade79e59d099fe1b7e6ab40e294d40ecf9bc1e","modified":1657596784933},{"_id":"public/images/post/ui.jpg","hash":"caff3b70d12b1e66e4fabc399086467fc04340dd","modified":1657596784933},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1657596784933},{"_id":"public/css/other.css","hash":"f34ea744577898b4c71abb54ce35eb7044d6c0f7","modified":1657596784933},{"_id":"public/css/webapp.css","hash":"1abbf605a0074dad66830ef3bb70360840505020","modified":1657596784933},{"_id":"public/js/app.js","hash":"0886cef5b4decc17e21ac70fb8f1d56d61ef1d29","modified":1657596784933},{"_id":"public/js/clock.js","hash":"6902df918c8e5211e875c56429201d564a87a1b8","modified":1657596784933},{"_id":"public/js/postcover.js","hash":"5027fcee69486ec17856d4a956f828fb9f3c08e8","modified":1657596784933},{"_id":"public/js/search.js","hash":"d95b9f04a7c11fb66fea422f137d7fe3188c5a5d","modified":1657596784933},{"_id":"public/lib/codeBlock/codeLang.js","hash":"fc584a7cf615eaa8a26f05b8efd6653225c748d7","modified":1657596784933},{"_id":"public/lib/codeBlock/codeBlockFuction.js","hash":"b48efab08a0856094ec67b56b91e8eb5075490f9","modified":1657596784933},{"_id":"public/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1657596784933},{"_id":"public/lib/codeBlock/codeShrink.js","hash":"6db05ce6baeee604ca5c68e0a731eb90153d6fef","modified":1657596784933},{"_id":"public/lib/codeBlock/matery.css","hash":"a001f7c96966924412c3d5bfed40487a18360979","modified":1657596784933},{"_id":"public/lib/codeBlock/codeCopy.js","hash":"e590db81151ce9f63e810338bf350ef571e5769f","modified":1657596784933},{"_id":"public/lib/iconfont/iconfont.css","hash":"f77481ef899d42d1f07d009332e92f58a8adcf95","modified":1657596784933},{"_id":"public/js/webapp.js","hash":"2759b867dde5a506f92ebe2c4ae6a2f2fd8b31b8","modified":1657596784933},{"_id":"public/lib/iconfont/iconfont.json","hash":"03e829ff4d38d43953051e0639e5700629df3c5d","modified":1657596784933},{"_id":"public/lib/fancybox/css/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1657596784933},{"_id":"public/css/style.css","hash":"7bb48f3679176bfa20cf38cc488c8a33133483ca","modified":1657596784933},{"_id":"public/lib/iconfont/demo_index.html","hash":"77a7fde76271989fb498422f582f29d2ba61b90d","modified":1657596784933},{"_id":"public/lib/iconfont/iconfont.js","hash":"bcd569bf13e40a6d49f55aa8f4e488ab89e1041a","modified":1657596784933},{"_id":"public/lib/fancybox/js/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1657596784933},{"_id":"public/lib/mdui_043tiny/css/mdui.css","hash":"b79ef94d2b11f8ce05ba048f5d74a3bd09f12e4d","modified":1657596784933},{"_id":"public/lib/mdui_043tiny/js/mdui.js","hash":"9feeebf8c11d8ce8549ec94896c630ba2334613c","modified":1657596784933},{"_id":"public/images/background/lihui1.jpg","hash":"99bae71422f2d781609c043aea1b66de10c4ef64","modified":1657596784933},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1657596784933},{"_id":"public/images/background/lihui.png","hash":"9fc8d5b24020428cdc492ddbe82d44e5a6abd9ee","modified":1657596784933},{"_id":"public/images/background/xiaomai.jpg","hash":"382a4746f7fba1820f82da78f0dd02ce0a6b9627","modified":1657596784933},{"_id":"public/images/post/editor.jpg","hash":"f988f11f5aee24e549551aff9912ae547cb1ab1e","modified":1657596784933},{"_id":"public/images/head/tx1.jpg","hash":"6d13e0c902b7e45a780794a2046caa59e1bdadd4","modified":1657596784933},{"_id":"public/images/background/lihui7.png","hash":"d482bbcf1e0b3b03a5b35cbdc3320321bfbd0482","modified":1657596784933},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1657596784933},{"_id":"public/images/background/lihui6-3.png","hash":"96119290c965e80bfbdaaf52307b57d1c609041e","modified":1657596784933},{"_id":"public/images/background/lihui6-5.png","hash":"6b61cb6a64df122c9df4cca0a2fb1c7bad19f774","modified":1657596784933},{"_id":"public/images/background/lihui6-1.png","hash":"c0ab16a36b76ba13f2f7ce3ad628fb5108d43cfd","modified":1657596784933},{"_id":"public/images/background/lihui6.png","hash":"0efa01211c51e822d479c974e25cce39b8d56f83","modified":1657596784933},{"_id":"source/_posts/Java语言概述.md","hash":"aff43a3d406826b5260b438f83c90c13c96bce8c","modified":1658197457041},{"_id":"public/2022/07/15/Java语言概述/index.html","hash":"dd55024b5fd786cd35a4ca2051be343334781421","modified":1658197170943},{"_id":"public/categories/后端组/index.html","hash":"50c3de821bccde33e186f5516a0a6427dbf065e5","modified":1658235331238},{"_id":"public/tags/Java/index.html","hash":"a41a6927af0df24c392011c0f35b5d4ea015bbd6","modified":1658235331238},{"_id":"source/_posts/Java基础.md","hash":"9941441f3803600ff48ad86f0946fe93926e303d","modified":1658235105524},{"_id":"public/2022/07/19/Java语言概述/index.html","hash":"c2e3cfe66631a32a99c7965a5abaac7dc32f1e8f","modified":1658235331238},{"_id":"public/2022/07/15/Java基础/index.html","hash":"1784c729df0fe2c6b51e02a7d337ae0706848b85","modified":1658235331238},{"_id":"public/archives/page/3/index.html","hash":"9d331e79d49baa9ab86e66509807805131304b05","modified":1658235331238},{"_id":"public/archives/2022/page/3/index.html","hash":"f4e5c31a6340befbde546255f79851bf335c72e1","modified":1658235331238},{"_id":"public/archives/2022/07/page/3/index.html","hash":"501ba231ad7599cc5ec138eceeb98ec9b0c5f4c4","modified":1658235331238},{"_id":"public/page/3/index.html","hash":"30450b4a3057fc310ef2227e5808d48f7f47d12c","modified":1658235331238},{"_id":"source/_posts/Java常见的排序算法.md","hash":"84c2e01b71015441567f4b9dc532b872e492f68b","modified":1658235302508},{"_id":"public/2022/07/19/Java常见的排序算法/index.html","hash":"e62a1b3efdc780614c00448259cf114828601f9e","modified":1658235331238}],"Category":[{"name":"兴趣组","_id":"cl5hmbtlj00032cujfuwk7455"},{"name":"前端组","_id":"cl5hmbtlp00082cuj9qxd3694"},{"name":"知识组","_id":"cl5hmbtlr000e2cuj2ptj0683"},{"name":"问题组","_id":"cl5hmbtlu000k2cuj6vnkev23"},{"name":"SpringBoot","_id":"cl5hmbtm000102cuj4ax799q2"},{"name":"后端组","_id":"cl5pzwvle0001j4uj0no4ek4v"}],"Data":[],"Page":[{"title":"文章归档","layout":"archives","_content":"","source":"archives.md","raw":"---\ntitle: 文章归档\nlayout: archives\npermalink: archives.html\n---","date":"2022-07-06T02:46:32.875Z","updated":"2022-07-04T08:23:06.000Z","path":"archives.html","comments":1,"_id":"cl5hmbtld00002cuj8tpzclf8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo+Github搭建博客","date":"2022-07-05T12:55:31.000Z","cover":"https://img0.baidu.com/it/u=1124800809,3510584668&fm=253&fmt=auto&app=138&f=PNG?w=1000&h=500","coverWidth":1200,"coverHeight":490,"author":"xiguayaaaaa","from":null,"_content":"\nHexo+Github搭建博客\n<!-- more -->\n\n搭建博客千千万，最后受欢迎的9还是Hexo和Jekyll,用户用的非常多的两个静态博客生成系统。本文就介绍利用Hexo结合github page来搭建个人博客。\n\n## 基础知识\n\n### 什么是Hexo？\n\nHexo 是一个基于 node.js 制作的快速、简洁且高效的博客框架。Hexo 可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n\n### Hexo和Jekyll的区别\n\n·本地环境\nJeklly 是由 Ruby 语言编写，需要到官网下载并安装 RubyInstaller。Hexo 则需要安装 Node.js 环境。网上经常看到很多人吐槽安装 Jekyll 经常碰到各种问题。\n\n·速度\n说是比较 Hexo 和 Jeklly 这两个框架，其实要比较 Ruby 和 Node.js 的运行速度。Node.js 是一个 Javascrip t运行环境(Runtime)。实际上它是对 Google V8 引擎进行了封装。众所周知，Google JS Runtime 速度非常快，性能非常好。在本地预览上，Jekyll 是生成了页面然后进行预览，而 Hexo 是没有在根目录生成文件的，速度也快不少。因此，Hexo 在性能和速度上面更胜一筹。\n\n·部署\nJeklly 是将整个工程源码上传到 Github 仓库，然后 Github 会自动生成静态文件。而 Hexo 需要事先在本地生成整个站点页面，再将 Html 文件、资源文件等上传到 Github 上。\n\n·主题\nJekyll 使用 Liquid；它是有 Ruby 语言编写的开源模板语言。Hexo 使用的是 EJS；EJS 是 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。EJS 相对比较复杂，所以可实现的功能更加的多。从开发一个主题难度上看，Hexo 实现起来更方便、更简单些。\n\n\n\n## 安装环境\n\n\n1、本机系统：Windows 10（64位）\n2、Node.js：v6.9.2LTS（64位）\n\n## 前期准备\n\n### 安装Node.js\n简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n打开官网下载链接Node.js:https://nodejs.org/en/ (选择长期服务，版本更稳定)\n\n<img src=\"https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg\" width = \"850\" height = \"400\" div align=right />\n\n下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。\n\n测试安装是否成功：\n\n按【win+R】键，输入cmd，再按回车弹出命令窗口\n\n输入：(显示版本行)\n```\nnode -v \n```\n```\nnpm -v\n```\n显示结果：\n\n<img src=\"https://i.loli.net/2021/10/19/fDzgWhEbnkxPevL.jpg\" width = \"850\" height = \"400\" div align=right />\n\n即安装成功；\n\n### 安装git\n\nGit是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。\n\n<b>从一般开发者的角度来看，git有以下功能：</b>\n1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。\n2、在自己的机器上根据不同的开发目的，创建分支，修改代码。\n3、在单机上自己创建的分支上提交代码。\n4、在单机上合并分支。\n5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。\n6、生成补丁（patch），把补丁发送给主开发者。\n\n打开官网下载链接：https://git-scm.com/downloads (选择windows版本即可)\n\n<img src=\"https://i.loli.net/2021/10/19/7UgXJ4y3MV6Bpri.jpg\" width = \"850\" height = \"400\" div align=right />\n\n\n下载完成之后直接双击安装包，只需点击下一步（出下图外选项，默认所有选项），然后改变安装路径即可。\n\n<img src=\"https://i.loli.net/2021/10/19/oT9CgyscVXWPnbF.jpg\" width = \"850\" height = \"400\" div align=right />\n\n测试是否安装成功：\n\n按【win+R】键，输入cmd，再按回车弹出命令窗口，再输入：\n```\ngit\n```\n显示结果:\n\n<img src=\"https://i.loli.net/2021/10/19/y5LnHxaYiID93Cs.jpg\" width = \"850\" height = \"400\" div align=right />\n\n\n## 开始搭建\n\n### 在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）\n```\nssh-keygen -t rsa -C \"Github注册的邮箱\"\n```\n然后按四次【enter】即可，生成后如下图：\n\n<img src=\"https://i.loli.net/2021/10/19/6S8LwDAmHTMvqJz.jpg\" width = \"850\" height = \"400\" div align=right />\n\n### 打开Github,点击头像-->【setting】\n\n<img src=\"https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg\" width = \"850\" height = \"400\" div align=right />\n\n### 点击【SSH and GPG keys】-->【New SSH key】\n\n<img src=\"https://i.loli.net/2021/10/19/JNnuwh4dAMHFILT.jpg\" width = \"850\" height = \"400\" div align=right />\n\n### 输入title（可以随便输），但Key你需要用记事本或Notepad++打开<b>磁盘中c:/用户/用户名/.ssh/id_rsa.pub</b>然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；\n\n<img src=\"https://i.loli.net/2021/10/19/uglR7p4jMUSbfxe.jpg\" width = \"850\" height = \"300\" div align=right />\n\n### 安装hexo\n在想要搭建博客的目录下创建文件夹名为blog，按【win+R】键，输入cmd，再按回车弹出命令窗口，cd到创建的文件夹下，输入：\n```language\nnpm install hexo-cli -g\n```\n\n<img src=\"https://i.loli.net/2021/10/19/pwBHNlgo2cdZiA4.jpg\" width = \"850\" height = \"300\" div align=right />\n\n不要关闭刚才的命令窗口，在刚才的窗口中初始化hexo，输入：\n\n```language\nhexo init 你的博客名\n```\n\n### 在博客目录中安装依赖\n在刚才的窗口中\n```\ncd 博客名\n```\n```language\nnpm install\n```\n安装完成之后进行测试，窗口中输入：\n\n```language\nhexo s -p 5555\n```\n在浏览器上输入 localhost:5555\n\n<img src=\"https://i.loli.net/2021/10/19/KFMBiULjA1yY8st.jpg\" width = \"850\" height = \"300\" div align=right />\n\n### 安装Sublime Text\n打开官网下载链接：https://www.sublimetext.com/ （点击DPWNLOAD FOR WINDOWS）\n\n<img src=\"https://i.loli.net/2021/10/19/kAnXiPatsr2zxDc.jpg\" width = \"850\" height = \"300\" div align=right />\n\n下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。\n\n打开Sublime 直接将博客目录拖进Sublime即可；\n\n<img src=\"https://i.loli.net/2021/10/19/RMkyeoixVCAt81f.jpg\" width = \"850\" height = \"400\" div align=right />\n\n### hexo发布到Github\n使用Sublime打开博客根目录中_config.yml 修改第16行的url 改为自己的网址（如 https://自己的博客名.github.io ）\n\n<img src=\"https://i.loli.net/2021/10/20/QHMrJse8xOnjWl5.jpg\" width = \"850\" height = \"200\" div align=right />\n\n打开Github网页点击【Your repositories】 最后复制链接\n\n<img src=\"https://i.loli.net/2021/10/20/u1w8kDULWQBvGzs.jpg\" width = \"850\" height = \"450\" div align=right />\n\n<img src=\"https://i.loli.net/2021/10/20/6cGuVNTXKWFSZsw.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<img src=\"https://s2.loli.net/2022/07/05/YuC4zwxFHcrPOgt.jpg\" width = \"850\" height = \"350\" div align=right />\n\n在_config.yml文件最后一行添加repo\n```language\nrepo: \n```\n将你复制的链接添加到repo之后，用引号隔开（切记引号后面必须要有空格）\n\n在最后一行添加\n\n```language\nbranch: main\n```\ntype后添加git\n```language\ntype: git\n```\n\n如下图\n\n![屏幕截图 2022-07-05 210636.png](https://s2.loli.net/2022/07/05/qN5nxLk7d4EfYXF.png)\n在博客根目录下添加插件：\n\n```language\nnpm install hexo-deployer-git --save\n```\n\n### 获取个人访问令牌\n\n对密码身份验证的支持已于 2021 年 8 月 13 日移除。现在改用个人访问令牌。简单点说就是需要把你的密码换成 token。\n\n在个人设置页面，找到 Settings\n<img src=\"https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg\" width = \"850\" height = \"400\" div align=right />\n找到 Developer settings\n<img src=\"https://i.loli.net/2021/10/21/VkyOgL5Z1746mzT.jpg\" width = \"850\" height = \"350\" div align=right />\n选择个人访问令牌 Personal access tokens，然后点击生成令牌 Generate new token\n<img src=\"https://i.loli.net/2021/10/21/KsVtaRpmhUSLorF.jpg\" width = \"850\" height = \"350\" div align=right />\n设置 token 的有效期，访问权限等，生成令牌 Generate token\n<img src=\"https://i.loli.net/2021/10/21/6Kdwmi7Qr2MWUJf.jpg\" width = \"850\" height = \"350\" div align=right />\n如下为生成的令牌\n<img src=\"https://i.loli.net/2021/10/21/LMsRWZaq8oSUwnh.jpg\" width = \"850\" height = \"350\" div align=right />\n\n<font color=RED>注意\n记得把 token 保存下来，当你再次刷新网页的时候，就没办法看见了</font>\n\n\n最后，把 token 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 token 了。\n\n添加到如下图位置：（使用“@”和后面内容隔开）\n\n<img src=\"https://i.loli.net/2021/10/21/WCX7dgp9UNFxJ1B.jpg\" width = \"850\" height = \"200\" div align=right />\n\n### git中设置你的用户名和邮件名\n 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。\n ```language\n git config --global user.name \"Your Name\"\n ```\n ```\n git config --global user.email \"you@example.com\"\n ```\n\n### 生成提交\n\n```\nhexo g\n```\n```\nhexo d\n```\n打开你的浏览器：\n```language\nhttps://博客名.github.io\n```\n恭喜您，您的博客现在已制作完成，现在只需要添加你喜欢的主题既可以开始你的博客之旅了。\n\n### 添加主题\n\nhexo主题网站：https://hexo.io/themes/\n<img src=\"https://i.loli.net/2021/10/21/AhUeqK8sB53jp4k.jpg\" width = \"850\" height = \"400\" div align=right />\n\n找到你喜欢的主题，例如next主题 点击【next】\n<img src=\"https://i.loli.net/2021/10/21/ciqEGsyQ3l9Oorp.jpg\" width = \"850\" height = \"400\" div align=right />\n\n按照文件中所说下载和修改即可\n<img src=\"https://i.loli.net/2021/10/21/b16RkjZFNDQAEic.jpg\" width = \"850\" height = \"400\" div align=right />\n\n在博客根目录中打开【Git Bash Here】\n```language\nnpm install hexo-themes-next\n```\n安装完成后，打开 Hexo 配置文件(_config.yml)并将theme变量设置为next.\n```language\ntheme: next\n```\n\n### 现在来介绍常用的Hexo 命令\n\nnpm install hexo -g #安装Hexo\nnpm update hexo -g #升级\nhexo init #初始化博客\n\n命令简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo g == hexo generate #生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy #部署\n\nhexo server #Hexo会监视文件变动并自动更新，无须重启服务器\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\nhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令","source":"_posts/Hexo-Github搭建博客.md","raw":"---\ntitle: Hexo+Github搭建博客\ndate: 2022-07-05 20:55:31\ntags:\n- \ncategories:\n- 兴趣组\ncover: https://img0.baidu.com/it/u=1124800809,3510584668&fm=253&fmt=auto&app=138&f=PNG?w=1000&h=500\ncoverWidth: 1200\ncoverHeight: 490\nauthor: xiguayaaaaa\nfrom:\n---\n\nHexo+Github搭建博客\n<!-- more -->\n\n搭建博客千千万，最后受欢迎的9还是Hexo和Jekyll,用户用的非常多的两个静态博客生成系统。本文就介绍利用Hexo结合github page来搭建个人博客。\n\n## 基础知识\n\n### 什么是Hexo？\n\nHexo 是一个基于 node.js 制作的快速、简洁且高效的博客框架。Hexo 可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n\n### Hexo和Jekyll的区别\n\n·本地环境\nJeklly 是由 Ruby 语言编写，需要到官网下载并安装 RubyInstaller。Hexo 则需要安装 Node.js 环境。网上经常看到很多人吐槽安装 Jekyll 经常碰到各种问题。\n\n·速度\n说是比较 Hexo 和 Jeklly 这两个框架，其实要比较 Ruby 和 Node.js 的运行速度。Node.js 是一个 Javascrip t运行环境(Runtime)。实际上它是对 Google V8 引擎进行了封装。众所周知，Google JS Runtime 速度非常快，性能非常好。在本地预览上，Jekyll 是生成了页面然后进行预览，而 Hexo 是没有在根目录生成文件的，速度也快不少。因此，Hexo 在性能和速度上面更胜一筹。\n\n·部署\nJeklly 是将整个工程源码上传到 Github 仓库，然后 Github 会自动生成静态文件。而 Hexo 需要事先在本地生成整个站点页面，再将 Html 文件、资源文件等上传到 Github 上。\n\n·主题\nJekyll 使用 Liquid；它是有 Ruby 语言编写的开源模板语言。Hexo 使用的是 EJS；EJS 是 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。EJS 相对比较复杂，所以可实现的功能更加的多。从开发一个主题难度上看，Hexo 实现起来更方便、更简单些。\n\n\n\n## 安装环境\n\n\n1、本机系统：Windows 10（64位）\n2、Node.js：v6.9.2LTS（64位）\n\n## 前期准备\n\n### 安装Node.js\n简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n打开官网下载链接Node.js:https://nodejs.org/en/ (选择长期服务，版本更稳定)\n\n<img src=\"https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg\" width = \"850\" height = \"400\" div align=right />\n\n下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。\n\n测试安装是否成功：\n\n按【win+R】键，输入cmd，再按回车弹出命令窗口\n\n输入：(显示版本行)\n```\nnode -v \n```\n```\nnpm -v\n```\n显示结果：\n\n<img src=\"https://i.loli.net/2021/10/19/fDzgWhEbnkxPevL.jpg\" width = \"850\" height = \"400\" div align=right />\n\n即安装成功；\n\n### 安装git\n\nGit是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。\n\n<b>从一般开发者的角度来看，git有以下功能：</b>\n1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。\n2、在自己的机器上根据不同的开发目的，创建分支，修改代码。\n3、在单机上自己创建的分支上提交代码。\n4、在单机上合并分支。\n5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。\n6、生成补丁（patch），把补丁发送给主开发者。\n\n打开官网下载链接：https://git-scm.com/downloads (选择windows版本即可)\n\n<img src=\"https://i.loli.net/2021/10/19/7UgXJ4y3MV6Bpri.jpg\" width = \"850\" height = \"400\" div align=right />\n\n\n下载完成之后直接双击安装包，只需点击下一步（出下图外选项，默认所有选项），然后改变安装路径即可。\n\n<img src=\"https://i.loli.net/2021/10/19/oT9CgyscVXWPnbF.jpg\" width = \"850\" height = \"400\" div align=right />\n\n测试是否安装成功：\n\n按【win+R】键，输入cmd，再按回车弹出命令窗口，再输入：\n```\ngit\n```\n显示结果:\n\n<img src=\"https://i.loli.net/2021/10/19/y5LnHxaYiID93Cs.jpg\" width = \"850\" height = \"400\" div align=right />\n\n\n## 开始搭建\n\n### 在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）\n```\nssh-keygen -t rsa -C \"Github注册的邮箱\"\n```\n然后按四次【enter】即可，生成后如下图：\n\n<img src=\"https://i.loli.net/2021/10/19/6S8LwDAmHTMvqJz.jpg\" width = \"850\" height = \"400\" div align=right />\n\n### 打开Github,点击头像-->【setting】\n\n<img src=\"https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg\" width = \"850\" height = \"400\" div align=right />\n\n### 点击【SSH and GPG keys】-->【New SSH key】\n\n<img src=\"https://i.loli.net/2021/10/19/JNnuwh4dAMHFILT.jpg\" width = \"850\" height = \"400\" div align=right />\n\n### 输入title（可以随便输），但Key你需要用记事本或Notepad++打开<b>磁盘中c:/用户/用户名/.ssh/id_rsa.pub</b>然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；\n\n<img src=\"https://i.loli.net/2021/10/19/uglR7p4jMUSbfxe.jpg\" width = \"850\" height = \"300\" div align=right />\n\n### 安装hexo\n在想要搭建博客的目录下创建文件夹名为blog，按【win+R】键，输入cmd，再按回车弹出命令窗口，cd到创建的文件夹下，输入：\n```language\nnpm install hexo-cli -g\n```\n\n<img src=\"https://i.loli.net/2021/10/19/pwBHNlgo2cdZiA4.jpg\" width = \"850\" height = \"300\" div align=right />\n\n不要关闭刚才的命令窗口，在刚才的窗口中初始化hexo，输入：\n\n```language\nhexo init 你的博客名\n```\n\n### 在博客目录中安装依赖\n在刚才的窗口中\n```\ncd 博客名\n```\n```language\nnpm install\n```\n安装完成之后进行测试，窗口中输入：\n\n```language\nhexo s -p 5555\n```\n在浏览器上输入 localhost:5555\n\n<img src=\"https://i.loli.net/2021/10/19/KFMBiULjA1yY8st.jpg\" width = \"850\" height = \"300\" div align=right />\n\n### 安装Sublime Text\n打开官网下载链接：https://www.sublimetext.com/ （点击DPWNLOAD FOR WINDOWS）\n\n<img src=\"https://i.loli.net/2021/10/19/kAnXiPatsr2zxDc.jpg\" width = \"850\" height = \"300\" div align=right />\n\n下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。\n\n打开Sublime 直接将博客目录拖进Sublime即可；\n\n<img src=\"https://i.loli.net/2021/10/19/RMkyeoixVCAt81f.jpg\" width = \"850\" height = \"400\" div align=right />\n\n### hexo发布到Github\n使用Sublime打开博客根目录中_config.yml 修改第16行的url 改为自己的网址（如 https://自己的博客名.github.io ）\n\n<img src=\"https://i.loli.net/2021/10/20/QHMrJse8xOnjWl5.jpg\" width = \"850\" height = \"200\" div align=right />\n\n打开Github网页点击【Your repositories】 最后复制链接\n\n<img src=\"https://i.loli.net/2021/10/20/u1w8kDULWQBvGzs.jpg\" width = \"850\" height = \"450\" div align=right />\n\n<img src=\"https://i.loli.net/2021/10/20/6cGuVNTXKWFSZsw.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<img src=\"https://s2.loli.net/2022/07/05/YuC4zwxFHcrPOgt.jpg\" width = \"850\" height = \"350\" div align=right />\n\n在_config.yml文件最后一行添加repo\n```language\nrepo: \n```\n将你复制的链接添加到repo之后，用引号隔开（切记引号后面必须要有空格）\n\n在最后一行添加\n\n```language\nbranch: main\n```\ntype后添加git\n```language\ntype: git\n```\n\n如下图\n\n![屏幕截图 2022-07-05 210636.png](https://s2.loli.net/2022/07/05/qN5nxLk7d4EfYXF.png)\n在博客根目录下添加插件：\n\n```language\nnpm install hexo-deployer-git --save\n```\n\n### 获取个人访问令牌\n\n对密码身份验证的支持已于 2021 年 8 月 13 日移除。现在改用个人访问令牌。简单点说就是需要把你的密码换成 token。\n\n在个人设置页面，找到 Settings\n<img src=\"https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg\" width = \"850\" height = \"400\" div align=right />\n找到 Developer settings\n<img src=\"https://i.loli.net/2021/10/21/VkyOgL5Z1746mzT.jpg\" width = \"850\" height = \"350\" div align=right />\n选择个人访问令牌 Personal access tokens，然后点击生成令牌 Generate new token\n<img src=\"https://i.loli.net/2021/10/21/KsVtaRpmhUSLorF.jpg\" width = \"850\" height = \"350\" div align=right />\n设置 token 的有效期，访问权限等，生成令牌 Generate token\n<img src=\"https://i.loli.net/2021/10/21/6Kdwmi7Qr2MWUJf.jpg\" width = \"850\" height = \"350\" div align=right />\n如下为生成的令牌\n<img src=\"https://i.loli.net/2021/10/21/LMsRWZaq8oSUwnh.jpg\" width = \"850\" height = \"350\" div align=right />\n\n<font color=RED>注意\n记得把 token 保存下来，当你再次刷新网页的时候，就没办法看见了</font>\n\n\n最后，把 token 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 token 了。\n\n添加到如下图位置：（使用“@”和后面内容隔开）\n\n<img src=\"https://i.loli.net/2021/10/21/WCX7dgp9UNFxJ1B.jpg\" width = \"850\" height = \"200\" div align=right />\n\n### git中设置你的用户名和邮件名\n 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。\n ```language\n git config --global user.name \"Your Name\"\n ```\n ```\n git config --global user.email \"you@example.com\"\n ```\n\n### 生成提交\n\n```\nhexo g\n```\n```\nhexo d\n```\n打开你的浏览器：\n```language\nhttps://博客名.github.io\n```\n恭喜您，您的博客现在已制作完成，现在只需要添加你喜欢的主题既可以开始你的博客之旅了。\n\n### 添加主题\n\nhexo主题网站：https://hexo.io/themes/\n<img src=\"https://i.loli.net/2021/10/21/AhUeqK8sB53jp4k.jpg\" width = \"850\" height = \"400\" div align=right />\n\n找到你喜欢的主题，例如next主题 点击【next】\n<img src=\"https://i.loli.net/2021/10/21/ciqEGsyQ3l9Oorp.jpg\" width = \"850\" height = \"400\" div align=right />\n\n按照文件中所说下载和修改即可\n<img src=\"https://i.loli.net/2021/10/21/b16RkjZFNDQAEic.jpg\" width = \"850\" height = \"400\" div align=right />\n\n在博客根目录中打开【Git Bash Here】\n```language\nnpm install hexo-themes-next\n```\n安装完成后，打开 Hexo 配置文件(_config.yml)并将theme变量设置为next.\n```language\ntheme: next\n```\n\n### 现在来介绍常用的Hexo 命令\n\nnpm install hexo -g #安装Hexo\nnpm update hexo -g #升级\nhexo init #初始化博客\n\n命令简写\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo g == hexo generate #生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy #部署\n\nhexo server #Hexo会监视文件变动并自动更新，无须重启服务器\nhexo server -s #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\nhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令","slug":"Hexo-Github搭建博客","published":1,"updated":"2022-07-08T10:47:35.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hmbtlf00012cuj3xr2a53h","content":"<p>Hexo+Github搭建博客</p>\n<span id=\"more\"></span>\n\n<p>搭建博客千千万，最后受欢迎的9还是Hexo和Jekyll,用户用的非常多的两个静态博客生成系统。本文就介绍利用Hexo结合github page来搭建个人博客。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是Hexo？\"><a href=\"#什么是Hexo？\" class=\"headerlink\" title=\"什么是Hexo？\"></a>什么是Hexo？</h3><p>Hexo 是一个基于 node.js 制作的快速、简洁且高效的博客框架。Hexo 可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>\n<h3 id=\"Hexo和Jekyll的区别\"><a href=\"#Hexo和Jekyll的区别\" class=\"headerlink\" title=\"Hexo和Jekyll的区别\"></a>Hexo和Jekyll的区别</h3><p>·本地环境<br>Jeklly 是由 Ruby 语言编写，需要到官网下载并安装 RubyInstaller。Hexo 则需要安装 Node.js 环境。网上经常看到很多人吐槽安装 Jekyll 经常碰到各种问题。</p>\n<p>·速度<br>说是比较 Hexo 和 Jeklly 这两个框架，其实要比较 Ruby 和 Node.js 的运行速度。Node.js 是一个 Javascrip t运行环境(Runtime)。实际上它是对 Google V8 引擎进行了封装。众所周知，Google JS Runtime 速度非常快，性能非常好。在本地预览上，Jekyll 是生成了页面然后进行预览，而 Hexo 是没有在根目录生成文件的，速度也快不少。因此，Hexo 在性能和速度上面更胜一筹。</p>\n<p>·部署<br>Jeklly 是将整个工程源码上传到 Github 仓库，然后 Github 会自动生成静态文件。而 Hexo 需要事先在本地生成整个站点页面，再将 Html 文件、资源文件等上传到 Github 上。</p>\n<p>·主题<br>Jekyll 使用 Liquid；它是有 Ruby 语言编写的开源模板语言。Hexo 使用的是 EJS；EJS 是 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。EJS 相对比较复杂，所以可实现的功能更加的多。从开发一个主题难度上看，Hexo 实现起来更方便、更简单些。</p>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><p>1、本机系统：Windows 10（64位）<br>2、Node.js：v6.9.2LTS（64位）</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>打开官网下载链接Node.js:<a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a> (选择长期服务，版本更稳定)</p>\n<img src=\"https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>\n<p>测试安装是否成功：</p>\n<p>按【win+R】键，输入cmd，再按回车弹出命令窗口</p>\n<p>输入：(显示版本行)</p>\n<pre><code>node -v \n</code></pre>\n<pre><code>npm -v\n</code></pre>\n<p>显示结果：</p>\n<img src=\"https://i.loli.net/2021/10/19/fDzgWhEbnkxPevL.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<p>即安装成功；</p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p>\n<p><b>从一般开发者的角度来看，git有以下功能：</b><br>1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。<br>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。<br>3、在单机上自己创建的分支上提交代码。<br>4、在单机上合并分支。<br>5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。<br>6、生成补丁（patch），把补丁发送给主开发者。</p>\n<p>打开官网下载链接：<a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a> (选择windows版本即可)</p>\n<img src=\"https://i.loli.net/2021/10/19/7UgXJ4y3MV6Bpri.jpg\" width = \"850\" height = \"400\" div align=right />\n\n\n<p>下载完成之后直接双击安装包，只需点击下一步（出下图外选项，默认所有选项），然后改变安装路径即可。</p>\n<img src=\"https://i.loli.net/2021/10/19/oT9CgyscVXWPnbF.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<p>测试是否安装成功：</p>\n<p>按【win+R】键，输入cmd，再按回车弹出命令窗口，再输入：</p>\n<pre><code>git\n</code></pre>\n<p>显示结果:</p>\n<img src=\"https://i.loli.net/2021/10/19/y5LnHxaYiID93Cs.jpg\" width = \"850\" height = \"400\" div align=right />\n\n\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）\"><a href=\"#在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）\" class=\"headerlink\" title=\"在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）\"></a>在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）</h3><pre><code>ssh-keygen -t rsa -C &quot;Github注册的邮箱&quot;\n</code></pre>\n<p>然后按四次【enter】即可，生成后如下图：</p>\n<img src=\"https://i.loli.net/2021/10/19/6S8LwDAmHTMvqJz.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<h3 id=\"打开Github-点击头像–-gt-【setting】\"><a href=\"#打开Github-点击头像–-gt-【setting】\" class=\"headerlink\" title=\"打开Github,点击头像–&gt;【setting】\"></a>打开Github,点击头像–&gt;【setting】</h3><img src=\"https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<h3 id=\"点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】\"><a href=\"#点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】\" class=\"headerlink\" title=\"点击【SSH and GPG keys】–&gt;【New SSH key】\"></a>点击【SSH and GPG keys】–&gt;【New SSH key】</h3><img src=\"https://i.loli.net/2021/10/19/JNnuwh4dAMHFILT.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<h3 id=\"输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；\"><a href=\"#输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；\" class=\"headerlink\" title=\"输入title（可以随便输），但Key你需要用记事本或Notepad++打开磁盘中c:/用户/用户名/.ssh/id_rsa.pub然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；\"></a>输入title（可以随便输），但Key你需要用记事本或Notepad++打开<b>磁盘中c:/用户/用户名/.ssh/id_rsa.pub</b>然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；</h3><img src=\"https://i.loli.net/2021/10/19/uglR7p4jMUSbfxe.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>在想要搭建博客的目录下创建文件夹名为blog，按【win+R】键，输入cmd，再按回车弹出命令窗口，cd到创建的文件夹下，输入：</p>\n<pre><code class=\"language\">npm install hexo-cli -g\n</code></pre>\n<img src=\"https://i.loli.net/2021/10/19/pwBHNlgo2cdZiA4.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<p>不要关闭刚才的命令窗口，在刚才的窗口中初始化hexo，输入：</p>\n<pre><code class=\"language\">hexo init 你的博客名\n</code></pre>\n<h3 id=\"在博客目录中安装依赖\"><a href=\"#在博客目录中安装依赖\" class=\"headerlink\" title=\"在博客目录中安装依赖\"></a>在博客目录中安装依赖</h3><p>在刚才的窗口中</p>\n<pre><code>cd 博客名\n</code></pre>\n<pre><code class=\"language\">npm install\n</code></pre>\n<p>安装完成之后进行测试，窗口中输入：</p>\n<pre><code class=\"language\">hexo s -p 5555\n</code></pre>\n<p>在浏览器上输入 localhost:5555</p>\n<img src=\"https://i.loli.net/2021/10/19/KFMBiULjA1yY8st.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<h3 id=\"安装Sublime-Text\"><a href=\"#安装Sublime-Text\" class=\"headerlink\" title=\"安装Sublime Text\"></a>安装Sublime Text</h3><p>打开官网下载链接：<a href=\"https://www.sublimetext.com/\">https://www.sublimetext.com/</a> （点击DPWNLOAD FOR WINDOWS）</p>\n<img src=\"https://i.loli.net/2021/10/19/kAnXiPatsr2zxDc.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>\n<p>打开Sublime 直接将博客目录拖进Sublime即可；</p>\n<img src=\"https://i.loli.net/2021/10/19/RMkyeoixVCAt81f.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<h3 id=\"hexo发布到Github\"><a href=\"#hexo发布到Github\" class=\"headerlink\" title=\"hexo发布到Github\"></a>hexo发布到Github</h3><p>使用Sublime打开博客根目录中_config.yml 修改第16行的url 改为自己的网址（如 https://自己的博客名.github.io ）</p>\n<img src=\"https://i.loli.net/2021/10/20/QHMrJse8xOnjWl5.jpg\" width = \"850\" height = \"200\" div align=right />\n\n<p>打开Github网页点击【Your repositories】 最后复制链接</p>\n<img src=\"https://i.loli.net/2021/10/20/u1w8kDULWQBvGzs.jpg\" width = \"850\" height = \"450\" div align=right />\n\n<img src=\"https://i.loli.net/2021/10/20/6cGuVNTXKWFSZsw.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<img src=\"https://s2.loli.net/2022/07/05/YuC4zwxFHcrPOgt.jpg\" width = \"850\" height = \"350\" div align=right />\n\n<p>在_config.yml文件最后一行添加repo</p>\n<pre><code class=\"language\">repo: \n</code></pre>\n<p>将你复制的链接添加到repo之后，用引号隔开（切记引号后面必须要有空格）</p>\n<p>在最后一行添加</p>\n<pre><code class=\"language\">branch: main\n</code></pre>\n<p>type后添加git</p>\n<pre><code class=\"language\">type: git\n</code></pre>\n<p>如下图</p>\n<p><img src=\"https://s2.loli.net/2022/07/05/qN5nxLk7d4EfYXF.png\" alt=\"屏幕截图 2022-07-05 210636.png\"><br>在博客根目录下添加插件：</p>\n<pre><code class=\"language\">npm install hexo-deployer-git --save\n</code></pre>\n<h3 id=\"获取个人访问令牌\"><a href=\"#获取个人访问令牌\" class=\"headerlink\" title=\"获取个人访问令牌\"></a>获取个人访问令牌</h3><p>对密码身份验证的支持已于 2021 年 8 月 13 日移除。现在改用个人访问令牌。简单点说就是需要把你的密码换成 token。</p>\n<p>在个人设置页面，找到 Settings<br><img src=\"https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg\" width = \"850\" height = \"400\" div align=right /><br>找到 Developer settings<br><img src=\"https://i.loli.net/2021/10/21/VkyOgL5Z1746mzT.jpg\" width = \"850\" height = \"350\" div align=right /><br>选择个人访问令牌 Personal access tokens，然后点击生成令牌 Generate new token<br><img src=\"https://i.loli.net/2021/10/21/KsVtaRpmhUSLorF.jpg\" width = \"850\" height = \"350\" div align=right /><br>设置 token 的有效期，访问权限等，生成令牌 Generate token<br><img src=\"https://i.loli.net/2021/10/21/6Kdwmi7Qr2MWUJf.jpg\" width = \"850\" height = \"350\" div align=right /><br>如下为生成的令牌<br><img src=\"https://i.loli.net/2021/10/21/LMsRWZaq8oSUwnh.jpg\" width = \"850\" height = \"350\" div align=right /></p>\n<p><font color=RED>注意<br>记得把 token 保存下来，当你再次刷新网页的时候，就没办法看见了</font></p>\n<p>最后，把 token 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 token 了。</p>\n<p>添加到如下图位置：（使用“@”和后面内容隔开）</p>\n<img src=\"https://i.loli.net/2021/10/21/WCX7dgp9UNFxJ1B.jpg\" width = \"850\" height = \"200\" div align=right />\n\n<h3 id=\"git中设置你的用户名和邮件名\"><a href=\"#git中设置你的用户名和邮件名\" class=\"headerlink\" title=\"git中设置你的用户名和邮件名\"></a>git中设置你的用户名和邮件名</h3><p> 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。</p>\n<pre><code class=\"language\">git config --global user.name &quot;Your Name&quot;\n</code></pre>\n<pre><code>git config --global user.email &quot;you@example.com&quot;\n</code></pre>\n<h3 id=\"生成提交\"><a href=\"#生成提交\" class=\"headerlink\" title=\"生成提交\"></a>生成提交</h3><pre><code>hexo g\n</code></pre>\n<pre><code>hexo d\n</code></pre>\n<p>打开你的浏览器：</p>\n<pre><code class=\"language\">https://博客名.github.io\n</code></pre>\n<p>恭喜您，您的博客现在已制作完成，现在只需要添加你喜欢的主题既可以开始你的博客之旅了。</p>\n<h3 id=\"添加主题\"><a href=\"#添加主题\" class=\"headerlink\" title=\"添加主题\"></a>添加主题</h3><p>hexo主题网站：<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br><img src=\"https://i.loli.net/2021/10/21/AhUeqK8sB53jp4k.jpg\" width = \"850\" height = \"400\" div align=right /></p>\n<p>找到你喜欢的主题，例如next主题 点击【next】<br><img src=\"https://i.loli.net/2021/10/21/ciqEGsyQ3l9Oorp.jpg\" width = \"850\" height = \"400\" div align=right /></p>\n<p>按照文件中所说下载和修改即可<br><img src=\"https://i.loli.net/2021/10/21/b16RkjZFNDQAEic.jpg\" width = \"850\" height = \"400\" div align=right /></p>\n<p>在博客根目录中打开【Git Bash Here】</p>\n<pre><code class=\"language\">npm install hexo-themes-next\n</code></pre>\n<p>安装完成后，打开 Hexo 配置文件(_config.yml)并将theme变量设置为next.</p>\n<pre><code class=\"language\">theme: next\n</code></pre>\n<h3 id=\"现在来介绍常用的Hexo-命令\"><a href=\"#现在来介绍常用的Hexo-命令\" class=\"headerlink\" title=\"现在来介绍常用的Hexo 命令\"></a>现在来介绍常用的Hexo 命令</h3><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>\n<p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p>\n<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>\n","site":{"data":{}},"excerpt":"<p>Hexo+Github搭建博客</p>","more":"<p>搭建博客千千万，最后受欢迎的9还是Hexo和Jekyll,用户用的非常多的两个静态博客生成系统。本文就介绍利用Hexo结合github page来搭建个人博客。</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"什么是Hexo？\"><a href=\"#什么是Hexo？\" class=\"headerlink\" title=\"什么是Hexo？\"></a>什么是Hexo？</h3><p>Hexo 是一个基于 node.js 制作的快速、简洁且高效的博客框架。Hexo 可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>\n<h3 id=\"Hexo和Jekyll的区别\"><a href=\"#Hexo和Jekyll的区别\" class=\"headerlink\" title=\"Hexo和Jekyll的区别\"></a>Hexo和Jekyll的区别</h3><p>·本地环境<br>Jeklly 是由 Ruby 语言编写，需要到官网下载并安装 RubyInstaller。Hexo 则需要安装 Node.js 环境。网上经常看到很多人吐槽安装 Jekyll 经常碰到各种问题。</p>\n<p>·速度<br>说是比较 Hexo 和 Jeklly 这两个框架，其实要比较 Ruby 和 Node.js 的运行速度。Node.js 是一个 Javascrip t运行环境(Runtime)。实际上它是对 Google V8 引擎进行了封装。众所周知，Google JS Runtime 速度非常快，性能非常好。在本地预览上，Jekyll 是生成了页面然后进行预览，而 Hexo 是没有在根目录生成文件的，速度也快不少。因此，Hexo 在性能和速度上面更胜一筹。</p>\n<p>·部署<br>Jeklly 是将整个工程源码上传到 Github 仓库，然后 Github 会自动生成静态文件。而 Hexo 需要事先在本地生成整个站点页面，再将 Html 文件、资源文件等上传到 Github 上。</p>\n<p>·主题<br>Jekyll 使用 Liquid；它是有 Ruby 语言编写的开源模板语言。Hexo 使用的是 EJS；EJS 是 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。EJS 相对比较复杂，所以可实现的功能更加的多。从开发一个主题难度上看，Hexo 实现起来更方便、更简单些。</p>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><p>1、本机系统：Windows 10（64位）<br>2、Node.js：v6.9.2LTS（64位）</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>打开官网下载链接Node.js:<a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a> (选择长期服务，版本更稳定)</p>\n<img src=\"https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>\n<p>测试安装是否成功：</p>\n<p>按【win+R】键，输入cmd，再按回车弹出命令窗口</p>\n<p>输入：(显示版本行)</p>\n<pre><code>node -v \n</code></pre>\n<pre><code>npm -v\n</code></pre>\n<p>显示结果：</p>\n<img src=\"https://i.loli.net/2021/10/19/fDzgWhEbnkxPevL.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<p>即安装成功；</p>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p>\n<p><b>从一般开发者的角度来看，git有以下功能：</b><br>1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。<br>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。<br>3、在单机上自己创建的分支上提交代码。<br>4、在单机上合并分支。<br>5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。<br>6、生成补丁（patch），把补丁发送给主开发者。</p>\n<p>打开官网下载链接：<a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a> (选择windows版本即可)</p>\n<img src=\"https://i.loli.net/2021/10/19/7UgXJ4y3MV6Bpri.jpg\" width = \"850\" height = \"400\" div align=right />\n\n\n<p>下载完成之后直接双击安装包，只需点击下一步（出下图外选项，默认所有选项），然后改变安装路径即可。</p>\n<img src=\"https://i.loli.net/2021/10/19/oT9CgyscVXWPnbF.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<p>测试是否安装成功：</p>\n<p>按【win+R】键，输入cmd，再按回车弹出命令窗口，再输入：</p>\n<pre><code>git\n</code></pre>\n<p>显示结果:</p>\n<img src=\"https://i.loli.net/2021/10/19/y5LnHxaYiID93Cs.jpg\" width = \"850\" height = \"400\" div align=right />\n\n\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）\"><a href=\"#在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）\" class=\"headerlink\" title=\"在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）\"></a>在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）</h3><pre><code>ssh-keygen -t rsa -C &quot;Github注册的邮箱&quot;\n</code></pre>\n<p>然后按四次【enter】即可，生成后如下图：</p>\n<img src=\"https://i.loli.net/2021/10/19/6S8LwDAmHTMvqJz.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<h3 id=\"打开Github-点击头像–-gt-【setting】\"><a href=\"#打开Github-点击头像–-gt-【setting】\" class=\"headerlink\" title=\"打开Github,点击头像–&gt;【setting】\"></a>打开Github,点击头像–&gt;【setting】</h3><img src=\"https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<h3 id=\"点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】\"><a href=\"#点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】\" class=\"headerlink\" title=\"点击【SSH and GPG keys】–&gt;【New SSH key】\"></a>点击【SSH and GPG keys】–&gt;【New SSH key】</h3><img src=\"https://i.loli.net/2021/10/19/JNnuwh4dAMHFILT.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<h3 id=\"输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；\"><a href=\"#输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；\" class=\"headerlink\" title=\"输入title（可以随便输），但Key你需要用记事本或Notepad++打开磁盘中c:/用户/用户名/.ssh/id_rsa.pub然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；\"></a>输入title（可以随便输），但Key你需要用记事本或Notepad++打开<b>磁盘中c:/用户/用户名/.ssh/id_rsa.pub</b>然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；</h3><img src=\"https://i.loli.net/2021/10/19/uglR7p4jMUSbfxe.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>在想要搭建博客的目录下创建文件夹名为blog，按【win+R】键，输入cmd，再按回车弹出命令窗口，cd到创建的文件夹下，输入：</p>\n<pre><code class=\"language\">npm install hexo-cli -g\n</code></pre>\n<img src=\"https://i.loli.net/2021/10/19/pwBHNlgo2cdZiA4.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<p>不要关闭刚才的命令窗口，在刚才的窗口中初始化hexo，输入：</p>\n<pre><code class=\"language\">hexo init 你的博客名\n</code></pre>\n<h3 id=\"在博客目录中安装依赖\"><a href=\"#在博客目录中安装依赖\" class=\"headerlink\" title=\"在博客目录中安装依赖\"></a>在博客目录中安装依赖</h3><p>在刚才的窗口中</p>\n<pre><code>cd 博客名\n</code></pre>\n<pre><code class=\"language\">npm install\n</code></pre>\n<p>安装完成之后进行测试，窗口中输入：</p>\n<pre><code class=\"language\">hexo s -p 5555\n</code></pre>\n<p>在浏览器上输入 localhost:5555</p>\n<img src=\"https://i.loli.net/2021/10/19/KFMBiULjA1yY8st.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<h3 id=\"安装Sublime-Text\"><a href=\"#安装Sublime-Text\" class=\"headerlink\" title=\"安装Sublime Text\"></a>安装Sublime Text</h3><p>打开官网下载链接：<a href=\"https://www.sublimetext.com/\">https://www.sublimetext.com/</a> （点击DPWNLOAD FOR WINDOWS）</p>\n<img src=\"https://i.loli.net/2021/10/19/kAnXiPatsr2zxDc.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p>\n<p>打开Sublime 直接将博客目录拖进Sublime即可；</p>\n<img src=\"https://i.loli.net/2021/10/19/RMkyeoixVCAt81f.jpg\" width = \"850\" height = \"400\" div align=right />\n\n<h3 id=\"hexo发布到Github\"><a href=\"#hexo发布到Github\" class=\"headerlink\" title=\"hexo发布到Github\"></a>hexo发布到Github</h3><p>使用Sublime打开博客根目录中_config.yml 修改第16行的url 改为自己的网址（如 https://自己的博客名.github.io ）</p>\n<img src=\"https://i.loli.net/2021/10/20/QHMrJse8xOnjWl5.jpg\" width = \"850\" height = \"200\" div align=right />\n\n<p>打开Github网页点击【Your repositories】 最后复制链接</p>\n<img src=\"https://i.loli.net/2021/10/20/u1w8kDULWQBvGzs.jpg\" width = \"850\" height = \"450\" div align=right />\n\n<img src=\"https://i.loli.net/2021/10/20/6cGuVNTXKWFSZsw.jpg\" width = \"850\" height = \"300\" div align=right />\n\n<img src=\"https://s2.loli.net/2022/07/05/YuC4zwxFHcrPOgt.jpg\" width = \"850\" height = \"350\" div align=right />\n\n<p>在_config.yml文件最后一行添加repo</p>\n<pre><code class=\"language\">repo: \n</code></pre>\n<p>将你复制的链接添加到repo之后，用引号隔开（切记引号后面必须要有空格）</p>\n<p>在最后一行添加</p>\n<pre><code class=\"language\">branch: main\n</code></pre>\n<p>type后添加git</p>\n<pre><code class=\"language\">type: git\n</code></pre>\n<p>如下图</p>\n<p><img src=\"https://s2.loli.net/2022/07/05/qN5nxLk7d4EfYXF.png\" alt=\"屏幕截图 2022-07-05 210636.png\"><br>在博客根目录下添加插件：</p>\n<pre><code class=\"language\">npm install hexo-deployer-git --save\n</code></pre>\n<h3 id=\"获取个人访问令牌\"><a href=\"#获取个人访问令牌\" class=\"headerlink\" title=\"获取个人访问令牌\"></a>获取个人访问令牌</h3><p>对密码身份验证的支持已于 2021 年 8 月 13 日移除。现在改用个人访问令牌。简单点说就是需要把你的密码换成 token。</p>\n<p>在个人设置页面，找到 Settings<br><img src=\"https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg\" width = \"850\" height = \"400\" div align=right /><br>找到 Developer settings<br><img src=\"https://i.loli.net/2021/10/21/VkyOgL5Z1746mzT.jpg\" width = \"850\" height = \"350\" div align=right /><br>选择个人访问令牌 Personal access tokens，然后点击生成令牌 Generate new token<br><img src=\"https://i.loli.net/2021/10/21/KsVtaRpmhUSLorF.jpg\" width = \"850\" height = \"350\" div align=right /><br>设置 token 的有效期，访问权限等，生成令牌 Generate token<br><img src=\"https://i.loli.net/2021/10/21/6Kdwmi7Qr2MWUJf.jpg\" width = \"850\" height = \"350\" div align=right /><br>如下为生成的令牌<br><img src=\"https://i.loli.net/2021/10/21/LMsRWZaq8oSUwnh.jpg\" width = \"850\" height = \"350\" div align=right /></p>\n<p><font color=RED>注意<br>记得把 token 保存下来，当你再次刷新网页的时候，就没办法看见了</font></p>\n<p>最后，把 token 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 token 了。</p>\n<p>添加到如下图位置：（使用“@”和后面内容隔开）</p>\n<img src=\"https://i.loli.net/2021/10/21/WCX7dgp9UNFxJ1B.jpg\" width = \"850\" height = \"200\" div align=right />\n\n<h3 id=\"git中设置你的用户名和邮件名\"><a href=\"#git中设置你的用户名和邮件名\" class=\"headerlink\" title=\"git中设置你的用户名和邮件名\"></a>git中设置你的用户名和邮件名</h3><p> 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。</p>\n<pre><code class=\"language\">git config --global user.name &quot;Your Name&quot;\n</code></pre>\n<pre><code>git config --global user.email &quot;you@example.com&quot;\n</code></pre>\n<h3 id=\"生成提交\"><a href=\"#生成提交\" class=\"headerlink\" title=\"生成提交\"></a>生成提交</h3><pre><code>hexo g\n</code></pre>\n<pre><code>hexo d\n</code></pre>\n<p>打开你的浏览器：</p>\n<pre><code class=\"language\">https://博客名.github.io\n</code></pre>\n<p>恭喜您，您的博客现在已制作完成，现在只需要添加你喜欢的主题既可以开始你的博客之旅了。</p>\n<h3 id=\"添加主题\"><a href=\"#添加主题\" class=\"headerlink\" title=\"添加主题\"></a>添加主题</h3><p>hexo主题网站：<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br><img src=\"https://i.loli.net/2021/10/21/AhUeqK8sB53jp4k.jpg\" width = \"850\" height = \"400\" div align=right /></p>\n<p>找到你喜欢的主题，例如next主题 点击【next】<br><img src=\"https://i.loli.net/2021/10/21/ciqEGsyQ3l9Oorp.jpg\" width = \"850\" height = \"400\" div align=right /></p>\n<p>按照文件中所说下载和修改即可<br><img src=\"https://i.loli.net/2021/10/21/b16RkjZFNDQAEic.jpg\" width = \"850\" height = \"400\" div align=right /></p>\n<p>在博客根目录中打开【Git Bash Here】</p>\n<pre><code class=\"language\">npm install hexo-themes-next\n</code></pre>\n<p>安装完成后，打开 Hexo 配置文件(_config.yml)并将theme变量设置为next.</p>\n<pre><code class=\"language\">theme: next\n</code></pre>\n<h3 id=\"现在来介绍常用的Hexo-命令\"><a href=\"#现在来介绍常用的Hexo-命令\" class=\"headerlink\" title=\"现在来介绍常用的Hexo 命令\"></a>现在来介绍常用的Hexo 命令</h3><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>\n<p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p>\n<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>"},{"title":"JavaScript对象","date":"2022-07-07T11:41:21.000Z","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp.cdn.sohu.com%2Fbc4e413e%2Fc8d120dfacc6cf91e861b5b9b0f14624.jpeg&refer=http%3A%2F%2Fp.cdn.sohu.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659877301&t=937bcfcda9286bda709a7e6cb9fa1392","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"JavaScript对象\n<!--more-->\n\n\n+ 什么是对象\n  + 对象是一种复合值，它汇聚多个值（原始值或者是其它对象），并且允许我们按照名称存储和获取这些值。\n  + 对象是一个属性无序的集合，每个属性都有自己的名字和值，只有在对象中，其使用起来与顺序无关，只需要打点即可调用。\n  + 在JavaScript中对象可以从其它对象继承属性。\n  + JavaScript对象是动态的，即可以动态的添加和删除对象属性。\n+ 认识对象\n  + 创建自定义对象我们可以通过创建Object实例来实现，然后再给他添加属性和方法（函数）\n  ```html\n  \t<script>\n\t\tlet person = new Object();\n\t\tperson.name = \"zhangsan\";\n\t\tperson.age = 18;\n\t\tperson.job = \"Teacher\"; \n\t\tconsole.log(this.name+\"，年龄\"+this.age+\"岁，他的工作是：\"+this.job);\n\t\tperson.work = function(){}\n\t\t---\n\t\tlet person = {\n\t\tname = \"zhangsan\",\n\t\tage = 18,\n\t\tjob = \"Teacher\",\n\t\twork(){\n\t\tconsole.log(this.name+\"，年龄\"+this.age+\"岁，他的工作是：\"+this.job);\n\t\t}\n\t\t}\n\t\t</script>\n  ```\n\n+ 属性的类型\n\n  + JavaScript使用了一些内部特性来描述属性的特征，这些特性由JavaScript实现引擎的规范定义的，所以开发者不能直接在JavaScript中访问这些访问。\n\n  + 属性特性分两种\n\n    + 数据属性\n\n      + 数据属性包含一个保存数据值得位置，数据的值会从这个位置中读取，当然也可以写入到这个位置，数据属性有4个特性描述他的行为\n\n        + 【Configurable】：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。其默认情况下为true\n        + 【Enumerable】：表示属性是否可以通过for-in循环返回，默认情况也为true\n        + 【Writable】：表示属性的值是否可以被修改，其默认值为true\n        + 【Value】：包含属性的实际值，其默认值为undefined\n\n      + 这些属性特性我们在定义对象时并不需要显式的添加前三个，而Value特性也会被我们定义，如：name:\"zhangsan\"\n\n      + 如果想要修改这些默认特性，就必须使用Object.defineProperty()方法，这个方法在使用时接收三个参数：要给其添加属性的对象，属性的名称，以及一个描述特性的对象及其参数\n\n    + 示例\n    ```html\n    <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n         <meta charset=\"UTF-8\">\n         <title>Title</title>\n         <script>\n         let person = {};\n         Object.defineProperty(person,\"name\",{\n         writable:false,\n         value:\"王麻子\"\n         });\n         console.log(person.name);\n         person.name = \"张金条\";\n         console.log(person.name);\n         </script>\n        </head>\n        <body>\n        </body>\n        </html>\n        <html lang=\"en\">\n        <head>\n         <meta charset=\"UTF-8\">\n         <title>Title</title>\n         <script>\n         let person = {};\n         Object.defineProperty(person,\"name\",{\n         // configurable:true,\n         configurable:false,\n         value:\"王麻子\"\n         });\n         console.log(person.name);\n         delete person.name;\n         console.log(person.name);\n         </script>\n        </head>\n        <body>\n        </body>\n        </html>\n    ```\n    + 访问器属性\n\n      + 访问器属性不包含数据值，它包含一个获取（getter）函数以及一个设置 （setter）函数，不过这两个函数并非必须函数。\n\n      + 在读取访问器属性时，程序会自个调用获取函数，也就是说获取函数的主 要任务就是返回一个有效的值\n\n      + 访问器属性也有4个特性用了描述它们的行为\n        + 【Configurable】，默认值为true，表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性\n        + 【Enumerable】，默认值为true，能否通过for-in循环返回属性\n        + 【get】读取这个属性时调用的函数 getter函数\n        + 【set】在为这个属性赋值时调用的函数 setter函数\n\n     + 以上这些属性也是不能直接定义的，必须通过Object-defineProperty()\n\t```html\n    \t\t\t<html lang=\"en\">\n   \t \t\t\t<head>\n   \t \t\t\t<meta charset=\"UTF-8\">\n   \t \t\t\t<title>Title</title>\n   \t \t\t\t <script>\n   \t \t\t\t \t\tlet book = {\n   \t \t\t\t \t\tname:\"七侠五义\",\n   \t \t\t\t \t\tprice:1\n   \t \t\t\t \t\t};\n   \t \t\t\t \t\tbook.name = \"斗破苍穹\";\n   \t \t\t\t \t\tconsole.log(book.name);\n   \t \t\t\t \t\tObject.defineProperty(book,\"name\",{\n   \t \t\t\t \t\tget(){\n\t\t\t\t\t\t\t return this.name;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tset(newValue){\n\t\t\t\t\t\t\tthis.name = newValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t</script>\n\t\t\t\t\t</head>\n\t\t\t\t\t<body>\n\t\t\t\t\t</body>\n\t\t\t\t\t</html>\n  ```\n\n\n+ 对象合并\n  +  在开发JavaScript时我们会把多个对象合并使用\n  +  具体来说就是把一个对象的所有属性复制到了目标对象上，这种方式也被称之为混入，通过对象的合并我们可以增强对象功能\n  +  JavaScript专门为合并对象提供了一个Object.assign()方法，这个方法接收一个目标对象和一个或多个其它对象（源对象），然后将每个源对象中自有属性复制到目标对象\n  ```html\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>Title</title>\n\t\t<script>\n\t\t\t//目标对象\n\t\t\tObj1 = {name:\"老八\"};\n\t\t\t//源对象\n\t\t\tObj2 = {name:\"老八\"};\n\t\t\t//把2复制到目标对象中\n\t\t\tresult = Object.assign(Obj1,Obj2);\n\t\t\tconsole.log(Obj1 === result)\n\t\t\tconsole.log(Obj2 === result)\n\t\t\tconsole.log(result)\n\t\t</script>\n\t\t</head>\n\t\t<body>\n\t\t</body>\n\t\t</html>\n\t```\n+ 增强的对象语法\n\n  + ES6位对象定义了很多定义对象及其操作对象的语法特性，这些特性可以极大程度提高对象处理的方便程度\n\n  + 属性值得简写\n\n    + 在给对象添加值时我们可以引用变量\n    ```html\n\t\t\t<script>\n\t\t\t\tlet username= \"sanlvzi\";\n\t\t\t\tlet person = {\n\t\t\t\tusername:username\n\t\t\t\t};\n\t\t\t\tconsole.log(person)\n\t\t\t</script>\n    ```\n    + 还能简写（以下这种情况必须时变量名域对象的属性名相同才可以这么写）\n    ```html\n\t\t<script>\n\t\tlet username= \"sanlvzi\";\n\t\tusername\n\t\t};\n\t\tlet person = {\n\t\tconsole.log(person)\n\t\t</script>\n    ```","source":"_posts/JavaScript对象.md","raw":"---\ntitle: JavaScript对象\ndate: 2022-07-07 19:41:21\ntags:\n- JavaScript\ncategories:\n- 前端组\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp.cdn.sohu.com%2Fbc4e413e%2Fc8d120dfacc6cf91e861b5b9b0f14624.jpeg&refer=http%3A%2F%2Fp.cdn.sohu.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659877301&t=937bcfcda9286bda709a7e6cb9fa1392\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom: \n---\nJavaScript对象\n<!--more-->\n\n\n+ 什么是对象\n  + 对象是一种复合值，它汇聚多个值（原始值或者是其它对象），并且允许我们按照名称存储和获取这些值。\n  + 对象是一个属性无序的集合，每个属性都有自己的名字和值，只有在对象中，其使用起来与顺序无关，只需要打点即可调用。\n  + 在JavaScript中对象可以从其它对象继承属性。\n  + JavaScript对象是动态的，即可以动态的添加和删除对象属性。\n+ 认识对象\n  + 创建自定义对象我们可以通过创建Object实例来实现，然后再给他添加属性和方法（函数）\n  ```html\n  \t<script>\n\t\tlet person = new Object();\n\t\tperson.name = \"zhangsan\";\n\t\tperson.age = 18;\n\t\tperson.job = \"Teacher\"; \n\t\tconsole.log(this.name+\"，年龄\"+this.age+\"岁，他的工作是：\"+this.job);\n\t\tperson.work = function(){}\n\t\t---\n\t\tlet person = {\n\t\tname = \"zhangsan\",\n\t\tage = 18,\n\t\tjob = \"Teacher\",\n\t\twork(){\n\t\tconsole.log(this.name+\"，年龄\"+this.age+\"岁，他的工作是：\"+this.job);\n\t\t}\n\t\t}\n\t\t</script>\n  ```\n\n+ 属性的类型\n\n  + JavaScript使用了一些内部特性来描述属性的特征，这些特性由JavaScript实现引擎的规范定义的，所以开发者不能直接在JavaScript中访问这些访问。\n\n  + 属性特性分两种\n\n    + 数据属性\n\n      + 数据属性包含一个保存数据值得位置，数据的值会从这个位置中读取，当然也可以写入到这个位置，数据属性有4个特性描述他的行为\n\n        + 【Configurable】：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。其默认情况下为true\n        + 【Enumerable】：表示属性是否可以通过for-in循环返回，默认情况也为true\n        + 【Writable】：表示属性的值是否可以被修改，其默认值为true\n        + 【Value】：包含属性的实际值，其默认值为undefined\n\n      + 这些属性特性我们在定义对象时并不需要显式的添加前三个，而Value特性也会被我们定义，如：name:\"zhangsan\"\n\n      + 如果想要修改这些默认特性，就必须使用Object.defineProperty()方法，这个方法在使用时接收三个参数：要给其添加属性的对象，属性的名称，以及一个描述特性的对象及其参数\n\n    + 示例\n    ```html\n    <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n         <meta charset=\"UTF-8\">\n         <title>Title</title>\n         <script>\n         let person = {};\n         Object.defineProperty(person,\"name\",{\n         writable:false,\n         value:\"王麻子\"\n         });\n         console.log(person.name);\n         person.name = \"张金条\";\n         console.log(person.name);\n         </script>\n        </head>\n        <body>\n        </body>\n        </html>\n        <html lang=\"en\">\n        <head>\n         <meta charset=\"UTF-8\">\n         <title>Title</title>\n         <script>\n         let person = {};\n         Object.defineProperty(person,\"name\",{\n         // configurable:true,\n         configurable:false,\n         value:\"王麻子\"\n         });\n         console.log(person.name);\n         delete person.name;\n         console.log(person.name);\n         </script>\n        </head>\n        <body>\n        </body>\n        </html>\n    ```\n    + 访问器属性\n\n      + 访问器属性不包含数据值，它包含一个获取（getter）函数以及一个设置 （setter）函数，不过这两个函数并非必须函数。\n\n      + 在读取访问器属性时，程序会自个调用获取函数，也就是说获取函数的主 要任务就是返回一个有效的值\n\n      + 访问器属性也有4个特性用了描述它们的行为\n        + 【Configurable】，默认值为true，表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性\n        + 【Enumerable】，默认值为true，能否通过for-in循环返回属性\n        + 【get】读取这个属性时调用的函数 getter函数\n        + 【set】在为这个属性赋值时调用的函数 setter函数\n\n     + 以上这些属性也是不能直接定义的，必须通过Object-defineProperty()\n\t```html\n    \t\t\t<html lang=\"en\">\n   \t \t\t\t<head>\n   \t \t\t\t<meta charset=\"UTF-8\">\n   \t \t\t\t<title>Title</title>\n   \t \t\t\t <script>\n   \t \t\t\t \t\tlet book = {\n   \t \t\t\t \t\tname:\"七侠五义\",\n   \t \t\t\t \t\tprice:1\n   \t \t\t\t \t\t};\n   \t \t\t\t \t\tbook.name = \"斗破苍穹\";\n   \t \t\t\t \t\tconsole.log(book.name);\n   \t \t\t\t \t\tObject.defineProperty(book,\"name\",{\n   \t \t\t\t \t\tget(){\n\t\t\t\t\t\t\t return this.name;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tset(newValue){\n\t\t\t\t\t\t\tthis.name = newValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t</script>\n\t\t\t\t\t</head>\n\t\t\t\t\t<body>\n\t\t\t\t\t</body>\n\t\t\t\t\t</html>\n  ```\n\n\n+ 对象合并\n  +  在开发JavaScript时我们会把多个对象合并使用\n  +  具体来说就是把一个对象的所有属性复制到了目标对象上，这种方式也被称之为混入，通过对象的合并我们可以增强对象功能\n  +  JavaScript专门为合并对象提供了一个Object.assign()方法，这个方法接收一个目标对象和一个或多个其它对象（源对象），然后将每个源对象中自有属性复制到目标对象\n  ```html\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>Title</title>\n\t\t<script>\n\t\t\t//目标对象\n\t\t\tObj1 = {name:\"老八\"};\n\t\t\t//源对象\n\t\t\tObj2 = {name:\"老八\"};\n\t\t\t//把2复制到目标对象中\n\t\t\tresult = Object.assign(Obj1,Obj2);\n\t\t\tconsole.log(Obj1 === result)\n\t\t\tconsole.log(Obj2 === result)\n\t\t\tconsole.log(result)\n\t\t</script>\n\t\t</head>\n\t\t<body>\n\t\t</body>\n\t\t</html>\n\t```\n+ 增强的对象语法\n\n  + ES6位对象定义了很多定义对象及其操作对象的语法特性，这些特性可以极大程度提高对象处理的方便程度\n\n  + 属性值得简写\n\n    + 在给对象添加值时我们可以引用变量\n    ```html\n\t\t\t<script>\n\t\t\t\tlet username= \"sanlvzi\";\n\t\t\t\tlet person = {\n\t\t\t\tusername:username\n\t\t\t\t};\n\t\t\t\tconsole.log(person)\n\t\t\t</script>\n    ```\n    + 还能简写（以下这种情况必须时变量名域对象的属性名相同才可以这么写）\n    ```html\n\t\t<script>\n\t\tlet username= \"sanlvzi\";\n\t\tusername\n\t\t};\n\t\tlet person = {\n\t\tconsole.log(person)\n\t\t</script>\n    ```","slug":"JavaScript对象","published":1,"updated":"2022-07-08T13:02:06.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hmbtlh00022cuj1at992td","content":"<p>JavaScript对象</p>\n<span id=\"more\"></span>\n\n\n<ul>\n<li><p>什么是对象</p>\n<ul>\n<li>对象是一种复合值，它汇聚多个值（原始值或者是其它对象），并且允许我们按照名称存储和获取这些值。</li>\n<li>对象是一个属性无序的集合，每个属性都有自己的名字和值，只有在对象中，其使用起来与顺序无关，只需要打点即可调用。</li>\n<li>在JavaScript中对象可以从其它对象继承属性。</li>\n<li>JavaScript对象是动态的，即可以动态的添加和删除对象属性。</li>\n</ul>\n</li>\n<li><p>认识对象</p>\n<ul>\n<li>创建自定义对象我们可以通过创建Object实例来实现，然后再给他添加属性和方法（函数）<pre><code class=\"html\">  &lt;script&gt;\n    let person = new Object();\n    person.name = &quot;zhangsan&quot;;\n    person.age = 18;\n    person.job = &quot;Teacher&quot;; \n    console.log(this.name+&quot;，年龄&quot;+this.age+&quot;岁，他的工作是：&quot;+this.job);\n    person.work = function()&#123;&#125;\n    ---\n    let person = &#123;\n    name = &quot;zhangsan&quot;,\n    age = 18,\n    job = &quot;Teacher&quot;,\n    work()&#123;\n    console.log(this.name+&quot;，年龄&quot;+this.age+&quot;岁，他的工作是：&quot;+this.job);\n    &#125;\n    &#125;\n    &lt;/script&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>属性的类型</p>\n<ul>\n<li><p>JavaScript使用了一些内部特性来描述属性的特征，这些特性由JavaScript实现引擎的规范定义的，所以开发者不能直接在JavaScript中访问这些访问。</p>\n</li>\n<li><p>属性特性分两种</p>\n<ul>\n<li><p>数据属性</p>\n<ul>\n<li><p>数据属性包含一个保存数据值得位置，数据的值会从这个位置中读取，当然也可以写入到这个位置，数据属性有4个特性描述他的行为</p>\n<ul>\n<li>【Configurable】：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。其默认情况下为true</li>\n<li>【Enumerable】：表示属性是否可以通过for-in循环返回，默认情况也为true</li>\n<li>【Writable】：表示属性的值是否可以被修改，其默认值为true</li>\n<li>【Value】：包含属性的实际值，其默认值为undefined</li>\n</ul>\n</li>\n<li><p>这些属性特性我们在定义对象时并不需要显式的添加前三个，而Value特性也会被我们定义，如：name:”zhangsan”</p>\n</li>\n<li><p>如果想要修改这些默认特性，就必须使用Object.defineProperty()方法，这个方法在使用时接收三个参数：要给其添加属性的对象，属性的名称，以及一个描述特性的对象及其参数</p>\n</li>\n</ul>\n</li>\n<li><p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n  &lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n   &lt;meta charset=&quot;UTF-8&quot;&gt;\n   &lt;title&gt;Title&lt;/title&gt;\n   &lt;script&gt;\n   let person = &#123;&#125;;\n   Object.defineProperty(person,&quot;name&quot;,&#123;\n   writable:false,\n   value:&quot;王麻子&quot;\n   &#125;);\n   console.log(person.name);\n   person.name = &quot;张金条&quot;;\n   console.log(person.name);\n   &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n  &lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n   &lt;meta charset=&quot;UTF-8&quot;&gt;\n   &lt;title&gt;Title&lt;/title&gt;\n   &lt;script&gt;\n   let person = &#123;&#125;;\n   Object.defineProperty(person,&quot;name&quot;,&#123;\n   // configurable:true,\n   configurable:false,\n   value:&quot;王麻子&quot;\n   &#125;);\n   console.log(person.name);\n   delete person.name;\n   console.log(person.name);\n   &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre>\n</li>\n<li><p>访问器属性</p>\n<ul>\n<li><p>访问器属性不包含数据值，它包含一个获取（getter）函数以及一个设置 （setter）函数，不过这两个函数并非必须函数。</p>\n</li>\n<li><p>在读取访问器属性时，程序会自个调用获取函数，也就是说获取函数的主 要任务就是返回一个有效的值</p>\n</li>\n<li><p>访问器属性也有4个特性用了描述它们的行为</p>\n<ul>\n<li>【Configurable】，默认值为true，表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性</li>\n<li>【Enumerable】，默认值为true，能否通过for-in循环返回属性</li>\n<li>【get】读取这个属性时调用的函数 getter函数</li>\n<li>【set】在为这个属性赋值时调用的函数 setter函数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>以上这些属性也是不能直接定义的，必须通过Object-defineProperty()</p>\n<pre><code class=\"html\">         &lt;html lang=&quot;en&quot;&gt;\n             &lt;head&gt;\n             &lt;meta charset=&quot;UTF-8&quot;&gt;\n             &lt;title&gt;Title&lt;/title&gt;\n              &lt;script&gt;\n                      let book = &#123;\n                      name:&quot;七侠五义&quot;,\n                      price:1\n                      &#125;;\n                      book.name = &quot;斗破苍穹&quot;;\n                      console.log(book.name);\n                      Object.defineProperty(book,&quot;name&quot;,&#123;\n                      get()&#123;\n                      return this.name;\n                 &#125;,\n                 set(newValue)&#123;\n                     this.name = newValue;\n                     &#125;\n                 &#125;);\n             &lt;/script&gt;\n             &lt;/head&gt;\n             &lt;body&gt;\n             &lt;/body&gt;\n             &lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>对象合并</p>\n<ul>\n<li> 在开发JavaScript时我们会把多个对象合并使用</li>\n<li> 具体来说就是把一个对象的所有属性复制到了目标对象上，这种方式也被称之为混入，通过对象的合并我们可以增强对象功能</li>\n<li>JavaScript专门为合并对象提供了一个Object.assign()方法，这个方法接收一个目标对象和一个或多个其它对象（源对象），然后将每个源对象中自有属性复制到目标对象<pre><code class=\"html\">    &lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;script&gt;\n        //目标对象\n        Obj1 = &#123;name:&quot;老八&quot;&#125;;\n        //源对象\n        Obj2 = &#123;name:&quot;老八&quot;&#125;;\n        //把2复制到目标对象中\n        result = Object.assign(Obj1,Obj2);\n        console.log(Obj1 === result)\n        console.log(Obj2 === result)\n        console.log(result)\n    &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>增强的对象语法</p>\n<ul>\n<li><p>ES6位对象定义了很多定义对象及其操作对象的语法特性，这些特性可以极大程度提高对象处理的方便程度</p>\n</li>\n<li><p>属性值得简写</p>\n<ul>\n<li>在给对象添加值时我们可以引用变量<pre><code class=\"html\">      &lt;script&gt;\n          let username= &quot;sanlvzi&quot;;\n          let person = &#123;\n          username:username\n          &#125;;\n          console.log(person)\n      &lt;/script&gt;\n</code></pre>\n</li>\n<li>还能简写（以下这种情况必须时变量名域对象的属性名相同才可以这么写）<pre><code class=\"html\">  &lt;script&gt;\n  let username= &quot;sanlvzi&quot;;\n  username\n  &#125;;\n  let person = &#123;\n  console.log(person)\n  &lt;/script&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>JavaScript对象</p>","more":"<ul>\n<li><p>什么是对象</p>\n<ul>\n<li>对象是一种复合值，它汇聚多个值（原始值或者是其它对象），并且允许我们按照名称存储和获取这些值。</li>\n<li>对象是一个属性无序的集合，每个属性都有自己的名字和值，只有在对象中，其使用起来与顺序无关，只需要打点即可调用。</li>\n<li>在JavaScript中对象可以从其它对象继承属性。</li>\n<li>JavaScript对象是动态的，即可以动态的添加和删除对象属性。</li>\n</ul>\n</li>\n<li><p>认识对象</p>\n<ul>\n<li>创建自定义对象我们可以通过创建Object实例来实现，然后再给他添加属性和方法（函数）<pre><code class=\"html\">  &lt;script&gt;\n    let person = new Object();\n    person.name = &quot;zhangsan&quot;;\n    person.age = 18;\n    person.job = &quot;Teacher&quot;; \n    console.log(this.name+&quot;，年龄&quot;+this.age+&quot;岁，他的工作是：&quot;+this.job);\n    person.work = function()&#123;&#125;\n    ---\n    let person = &#123;\n    name = &quot;zhangsan&quot;,\n    age = 18,\n    job = &quot;Teacher&quot;,\n    work()&#123;\n    console.log(this.name+&quot;，年龄&quot;+this.age+&quot;岁，他的工作是：&quot;+this.job);\n    &#125;\n    &#125;\n    &lt;/script&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>属性的类型</p>\n<ul>\n<li><p>JavaScript使用了一些内部特性来描述属性的特征，这些特性由JavaScript实现引擎的规范定义的，所以开发者不能直接在JavaScript中访问这些访问。</p>\n</li>\n<li><p>属性特性分两种</p>\n<ul>\n<li><p>数据属性</p>\n<ul>\n<li><p>数据属性包含一个保存数据值得位置，数据的值会从这个位置中读取，当然也可以写入到这个位置，数据属性有4个特性描述他的行为</p>\n<ul>\n<li>【Configurable】：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。其默认情况下为true</li>\n<li>【Enumerable】：表示属性是否可以通过for-in循环返回，默认情况也为true</li>\n<li>【Writable】：表示属性的值是否可以被修改，其默认值为true</li>\n<li>【Value】：包含属性的实际值，其默认值为undefined</li>\n</ul>\n</li>\n<li><p>这些属性特性我们在定义对象时并不需要显式的添加前三个，而Value特性也会被我们定义，如：name:”zhangsan”</p>\n</li>\n<li><p>如果想要修改这些默认特性，就必须使用Object.defineProperty()方法，这个方法在使用时接收三个参数：要给其添加属性的对象，属性的名称，以及一个描述特性的对象及其参数</p>\n</li>\n</ul>\n</li>\n<li><p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n  &lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n   &lt;meta charset=&quot;UTF-8&quot;&gt;\n   &lt;title&gt;Title&lt;/title&gt;\n   &lt;script&gt;\n   let person = &#123;&#125;;\n   Object.defineProperty(person,&quot;name&quot;,&#123;\n   writable:false,\n   value:&quot;王麻子&quot;\n   &#125;);\n   console.log(person.name);\n   person.name = &quot;张金条&quot;;\n   console.log(person.name);\n   &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n  &lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n   &lt;meta charset=&quot;UTF-8&quot;&gt;\n   &lt;title&gt;Title&lt;/title&gt;\n   &lt;script&gt;\n   let person = &#123;&#125;;\n   Object.defineProperty(person,&quot;name&quot;,&#123;\n   // configurable:true,\n   configurable:false,\n   value:&quot;王麻子&quot;\n   &#125;);\n   console.log(person.name);\n   delete person.name;\n   console.log(person.name);\n   &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre>\n</li>\n<li><p>访问器属性</p>\n<ul>\n<li><p>访问器属性不包含数据值，它包含一个获取（getter）函数以及一个设置 （setter）函数，不过这两个函数并非必须函数。</p>\n</li>\n<li><p>在读取访问器属性时，程序会自个调用获取函数，也就是说获取函数的主 要任务就是返回一个有效的值</p>\n</li>\n<li><p>访问器属性也有4个特性用了描述它们的行为</p>\n<ul>\n<li>【Configurable】，默认值为true，表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性</li>\n<li>【Enumerable】，默认值为true，能否通过for-in循环返回属性</li>\n<li>【get】读取这个属性时调用的函数 getter函数</li>\n<li>【set】在为这个属性赋值时调用的函数 setter函数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>以上这些属性也是不能直接定义的，必须通过Object-defineProperty()</p>\n<pre><code class=\"html\">         &lt;html lang=&quot;en&quot;&gt;\n             &lt;head&gt;\n             &lt;meta charset=&quot;UTF-8&quot;&gt;\n             &lt;title&gt;Title&lt;/title&gt;\n              &lt;script&gt;\n                      let book = &#123;\n                      name:&quot;七侠五义&quot;,\n                      price:1\n                      &#125;;\n                      book.name = &quot;斗破苍穹&quot;;\n                      console.log(book.name);\n                      Object.defineProperty(book,&quot;name&quot;,&#123;\n                      get()&#123;\n                      return this.name;\n                 &#125;,\n                 set(newValue)&#123;\n                     this.name = newValue;\n                     &#125;\n                 &#125;);\n             &lt;/script&gt;\n             &lt;/head&gt;\n             &lt;body&gt;\n             &lt;/body&gt;\n             &lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>对象合并</p>\n<ul>\n<li> 在开发JavaScript时我们会把多个对象合并使用</li>\n<li> 具体来说就是把一个对象的所有属性复制到了目标对象上，这种方式也被称之为混入，通过对象的合并我们可以增强对象功能</li>\n<li>JavaScript专门为合并对象提供了一个Object.assign()方法，这个方法接收一个目标对象和一个或多个其它对象（源对象），然后将每个源对象中自有属性复制到目标对象<pre><code class=\"html\">    &lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;script&gt;\n        //目标对象\n        Obj1 = &#123;name:&quot;老八&quot;&#125;;\n        //源对象\n        Obj2 = &#123;name:&quot;老八&quot;&#125;;\n        //把2复制到目标对象中\n        result = Object.assign(Obj1,Obj2);\n        console.log(Obj1 === result)\n        console.log(Obj2 === result)\n        console.log(result)\n    &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>增强的对象语法</p>\n<ul>\n<li><p>ES6位对象定义了很多定义对象及其操作对象的语法特性，这些特性可以极大程度提高对象处理的方便程度</p>\n</li>\n<li><p>属性值得简写</p>\n<ul>\n<li>在给对象添加值时我们可以引用变量<pre><code class=\"html\">      &lt;script&gt;\n          let username= &quot;sanlvzi&quot;;\n          let person = &#123;\n          username:username\n          &#125;;\n          console.log(person)\n      &lt;/script&gt;\n</code></pre>\n</li>\n<li>还能简写（以下这种情况必须时变量名域对象的属性名相同才可以这么写）<pre><code class=\"html\">  &lt;script&gt;\n  let username= &quot;sanlvzi&quot;;\n  username\n  &#125;;\n  let person = &#123;\n  console.log(person)\n  &lt;/script&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"Json教程","date":"2022-07-04T08:36:28.000Z","cover":"https://img0.baidu.com/it/u=1264698771,643931544&fm=253&fmt=auto&app=138&f=JPEG?w=640&h=404","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"Json教程\n<!--more-->\n\n## Json教程\n\nJSON: **J**ava**S**cript **O**bject **N**otation(JavaScript 对象表示法)\n\nJSON 是存储和交换文本信息的语法，类似 XML。\n\nJSON 比 XML 更小、更快，更易解析。\n\nJSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。\n\n```json\n{\n    \"sites\": [\n    { \"name\":\"百度\" , \"url\":\"www.baidu.com\" }, \n    { \"name\":\"google\" , \"url\":\"www.google.com\" }, \n    { \"name\":\"微博\" , \"url\":\"www.weibo.com\" }\n    ]\n}\n```\n\n### Json语法规则\n\nJSON 语法是 JavaScript 对象表示语法的子集。\n\n- 数据在名称/值对中\n- 数据由逗号分隔\n- 大括号 **{}** 保存对象\n- 中括号 **[]** 保存数组，数组可以包含多个对象\n\n### JSON 名称/值对\n\nJSON 数据的书写格式是：\"key\":\"value\"\n\n### JSON 值数据类型\n\nJSON 值可以是：\n\n- 数字（整数或浮点数）:JSON 数字可以是整型或者浮点型，例如，\"age\":18\n- 字符串（在双引号中）:例如，\"name\":\"王钢蛋\"\n- 逻辑值（true 或 false）:JSON 布尔值可以是 true 或者 false，例如，\"flag\":true\n- 数组（在中括号中）:JSON 数组在中括号 **[]** 中书写，JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。数组可包含多个对象。\n- 对象（在大括号中）:JSON 对象在大括号 **{}** 中书写，例如，{\"data\":{\"name\":\"张三\",\"age\":18}}\n- 对象可以包含多个 **key/value（键/值）**对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。key 和 value 中使用冒号(:)分割。每个 key/value 对使用逗号(,)分割。\n- null：例如，“name”:null\n\n### JSON访问\n\n#### 访问JSON对象\n\n```javascript\nlet str = '{\"name\":\"张三\",\"age\":18}'\n//将JSON格式的字符串转换成JSON对象\nlet obj = JSON.parse(str)\nconsole.log(obj.name)\nconsole.log(obj.age)\n```\n\n#### 访问JSON数组\n\n```javascript\nlet ary = '[\"google\",\"baidu\",\"sohu\",\"sina\"]'\nlet obj = JSON.parse(ary);\n\t\t\nconsole.log(obj[0]);\nconsole.log(obj[1]);\n```\n\n#### 复杂情形\n\n```javascript\nlet str = '{\"students\":[{\"name\":\"张三\",\"age\":18},{\"name\":\"李四\",\"age\":18}]}'\nlet obj = JSON.parse(str);\n\t\t\nlet ary = obj.students;\nfor(let i = 0;i<ary.length;i++){\n\tconsole.log(ary[i].name+\"============\"+ary[i].age);\n}\n```\n\n### JSON.parse()\n\nJSON 通常用于与服务端交换数据。\n\n在接收服务器数据时一般是字符串。\n\n我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。\n\n\n\n","source":"_posts/Json教程.md","raw":"---\ntitle: Json教程\ndate: 2022-07-04 16:36:28\ntags:\n- 知识\ncategories:\n- 知识组\ncover: https://img0.baidu.com/it/u=1264698771,643931544&fm=253&fmt=auto&app=138&f=JPEG?w=640&h=404\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\nJson教程\n<!--more-->\n\n## Json教程\n\nJSON: **J**ava**S**cript **O**bject **N**otation(JavaScript 对象表示法)\n\nJSON 是存储和交换文本信息的语法，类似 XML。\n\nJSON 比 XML 更小、更快，更易解析。\n\nJSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。\n\n```json\n{\n    \"sites\": [\n    { \"name\":\"百度\" , \"url\":\"www.baidu.com\" }, \n    { \"name\":\"google\" , \"url\":\"www.google.com\" }, \n    { \"name\":\"微博\" , \"url\":\"www.weibo.com\" }\n    ]\n}\n```\n\n### Json语法规则\n\nJSON 语法是 JavaScript 对象表示语法的子集。\n\n- 数据在名称/值对中\n- 数据由逗号分隔\n- 大括号 **{}** 保存对象\n- 中括号 **[]** 保存数组，数组可以包含多个对象\n\n### JSON 名称/值对\n\nJSON 数据的书写格式是：\"key\":\"value\"\n\n### JSON 值数据类型\n\nJSON 值可以是：\n\n- 数字（整数或浮点数）:JSON 数字可以是整型或者浮点型，例如，\"age\":18\n- 字符串（在双引号中）:例如，\"name\":\"王钢蛋\"\n- 逻辑值（true 或 false）:JSON 布尔值可以是 true 或者 false，例如，\"flag\":true\n- 数组（在中括号中）:JSON 数组在中括号 **[]** 中书写，JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。数组可包含多个对象。\n- 对象（在大括号中）:JSON 对象在大括号 **{}** 中书写，例如，{\"data\":{\"name\":\"张三\",\"age\":18}}\n- 对象可以包含多个 **key/value（键/值）**对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。key 和 value 中使用冒号(:)分割。每个 key/value 对使用逗号(,)分割。\n- null：例如，“name”:null\n\n### JSON访问\n\n#### 访问JSON对象\n\n```javascript\nlet str = '{\"name\":\"张三\",\"age\":18}'\n//将JSON格式的字符串转换成JSON对象\nlet obj = JSON.parse(str)\nconsole.log(obj.name)\nconsole.log(obj.age)\n```\n\n#### 访问JSON数组\n\n```javascript\nlet ary = '[\"google\",\"baidu\",\"sohu\",\"sina\"]'\nlet obj = JSON.parse(ary);\n\t\t\nconsole.log(obj[0]);\nconsole.log(obj[1]);\n```\n\n#### 复杂情形\n\n```javascript\nlet str = '{\"students\":[{\"name\":\"张三\",\"age\":18},{\"name\":\"李四\",\"age\":18}]}'\nlet obj = JSON.parse(str);\n\t\t\nlet ary = obj.students;\nfor(let i = 0;i<ary.length;i++){\n\tconsole.log(ary[i].name+\"============\"+ary[i].age);\n}\n```\n\n### JSON.parse()\n\nJSON 通常用于与服务端交换数据。\n\n在接收服务器数据时一般是字符串。\n\n我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。\n\n\n\n","slug":"Json教程","published":1,"updated":"2022-07-05T12:59:17.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hmbtll00042cujdsgog32c","content":"<p>Json教程</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Json教程\"><a href=\"#Json教程\" class=\"headerlink\" title=\"Json教程\"></a>Json教程</h2><p>JSON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JavaScript 对象表示法)</p>\n<p>JSON 是存储和交换文本信息的语法，类似 XML。</p>\n<p>JSON 比 XML 更小、更快，更易解析。</p>\n<p>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p>\n<pre><code class=\"json\">&#123;\n    &quot;sites&quot;: [\n    &#123; &quot;name&quot;:&quot;百度&quot; , &quot;url&quot;:&quot;www.baidu.com&quot; &#125;, \n    &#123; &quot;name&quot;:&quot;google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;, \n    &#123; &quot;name&quot;:&quot;微博&quot; , &quot;url&quot;:&quot;www.weibo.com&quot; &#125;\n    ]\n&#125;\n</code></pre>\n<h3 id=\"Json语法规则\"><a href=\"#Json语法规则\" class=\"headerlink\" title=\"Json语法规则\"></a>Json语法规则</h3><p>JSON 语法是 JavaScript 对象表示语法的子集。</p>\n<ul>\n<li>数据在名称/值对中</li>\n<li>数据由逗号分隔</li>\n<li>大括号 <strong>{}</strong> 保存对象</li>\n<li>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</li>\n</ul>\n<h3 id=\"JSON-名称-值对\"><a href=\"#JSON-名称-值对\" class=\"headerlink\" title=\"JSON 名称/值对\"></a>JSON 名称/值对</h3><p>JSON 数据的书写格式是：”key”:”value”</p>\n<h3 id=\"JSON-值数据类型\"><a href=\"#JSON-值数据类型\" class=\"headerlink\" title=\"JSON 值数据类型\"></a>JSON 值数据类型</h3><p>JSON 值可以是：</p>\n<ul>\n<li>数字（整数或浮点数）:JSON 数字可以是整型或者浮点型，例如，”age”:18</li>\n<li>字符串（在双引号中）:例如，”name”:”王钢蛋”</li>\n<li>逻辑值（true 或 false）:JSON 布尔值可以是 true 或者 false，例如，”flag”:true</li>\n<li>数组（在中括号中）:JSON 数组在中括号 <strong>[]</strong> 中书写，JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。数组可包含多个对象。</li>\n<li>对象（在大括号中）:JSON 对象在大括号 <strong>{}</strong> 中书写，例如，{“data”:{“name”:”张三”,”age”:18}}</li>\n<li>对象可以包含多个 <strong>key/value（键/值）</strong>对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。key 和 value 中使用冒号(:)分割。每个 key/value 对使用逗号(,)分割。</li>\n<li>null：例如，“name”:null</li>\n</ul>\n<h3 id=\"JSON访问\"><a href=\"#JSON访问\" class=\"headerlink\" title=\"JSON访问\"></a>JSON访问</h3><h4 id=\"访问JSON对象\"><a href=\"#访问JSON对象\" class=\"headerlink\" title=\"访问JSON对象\"></a>访问JSON对象</h4><pre><code class=\"javascript\">let str = &#39;&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;&#39;\n//将JSON格式的字符串转换成JSON对象\nlet obj = JSON.parse(str)\nconsole.log(obj.name)\nconsole.log(obj.age)\n</code></pre>\n<h4 id=\"访问JSON数组\"><a href=\"#访问JSON数组\" class=\"headerlink\" title=\"访问JSON数组\"></a>访问JSON数组</h4><pre><code class=\"javascript\">let ary = &#39;[&quot;google&quot;,&quot;baidu&quot;,&quot;sohu&quot;,&quot;sina&quot;]&#39;\nlet obj = JSON.parse(ary);\n        \nconsole.log(obj[0]);\nconsole.log(obj[1]);\n</code></pre>\n<h4 id=\"复杂情形\"><a href=\"#复杂情形\" class=\"headerlink\" title=\"复杂情形\"></a>复杂情形</h4><pre><code class=\"javascript\">let str = &#39;&#123;&quot;students&quot;:[&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:18&#125;]&#125;&#39;\nlet obj = JSON.parse(str);\n        \nlet ary = obj.students;\nfor(let i = 0;i&lt;ary.length;i++)&#123;\n    console.log(ary[i].name+&quot;============&quot;+ary[i].age);\n&#125;\n</code></pre>\n<h3 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse()\"></a>JSON.parse()</h3><p>JSON 通常用于与服务端交换数据。</p>\n<p>在接收服务器数据时一般是字符串。</p>\n<p>我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p>\n","site":{"data":{}},"excerpt":"<p>Json教程</p>","more":"<h2 id=\"Json教程\"><a href=\"#Json教程\" class=\"headerlink\" title=\"Json教程\"></a>Json教程</h2><p>JSON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JavaScript 对象表示法)</p>\n<p>JSON 是存储和交换文本信息的语法，类似 XML。</p>\n<p>JSON 比 XML 更小、更快，更易解析。</p>\n<p>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p>\n<pre><code class=\"json\">&#123;\n    &quot;sites&quot;: [\n    &#123; &quot;name&quot;:&quot;百度&quot; , &quot;url&quot;:&quot;www.baidu.com&quot; &#125;, \n    &#123; &quot;name&quot;:&quot;google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;, \n    &#123; &quot;name&quot;:&quot;微博&quot; , &quot;url&quot;:&quot;www.weibo.com&quot; &#125;\n    ]\n&#125;\n</code></pre>\n<h3 id=\"Json语法规则\"><a href=\"#Json语法规则\" class=\"headerlink\" title=\"Json语法规则\"></a>Json语法规则</h3><p>JSON 语法是 JavaScript 对象表示语法的子集。</p>\n<ul>\n<li>数据在名称/值对中</li>\n<li>数据由逗号分隔</li>\n<li>大括号 <strong>{}</strong> 保存对象</li>\n<li>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</li>\n</ul>\n<h3 id=\"JSON-名称-值对\"><a href=\"#JSON-名称-值对\" class=\"headerlink\" title=\"JSON 名称/值对\"></a>JSON 名称/值对</h3><p>JSON 数据的书写格式是：”key”:”value”</p>\n<h3 id=\"JSON-值数据类型\"><a href=\"#JSON-值数据类型\" class=\"headerlink\" title=\"JSON 值数据类型\"></a>JSON 值数据类型</h3><p>JSON 值可以是：</p>\n<ul>\n<li>数字（整数或浮点数）:JSON 数字可以是整型或者浮点型，例如，”age”:18</li>\n<li>字符串（在双引号中）:例如，”name”:”王钢蛋”</li>\n<li>逻辑值（true 或 false）:JSON 布尔值可以是 true 或者 false，例如，”flag”:true</li>\n<li>数组（在中括号中）:JSON 数组在中括号 <strong>[]</strong> 中书写，JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。数组可包含多个对象。</li>\n<li>对象（在大括号中）:JSON 对象在大括号 <strong>{}</strong> 中书写，例如，{“data”:{“name”:”张三”,”age”:18}}</li>\n<li>对象可以包含多个 <strong>key/value（键/值）</strong>对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。key 和 value 中使用冒号(:)分割。每个 key/value 对使用逗号(,)分割。</li>\n<li>null：例如，“name”:null</li>\n</ul>\n<h3 id=\"JSON访问\"><a href=\"#JSON访问\" class=\"headerlink\" title=\"JSON访问\"></a>JSON访问</h3><h4 id=\"访问JSON对象\"><a href=\"#访问JSON对象\" class=\"headerlink\" title=\"访问JSON对象\"></a>访问JSON对象</h4><pre><code class=\"javascript\">let str = &#39;&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;&#39;\n//将JSON格式的字符串转换成JSON对象\nlet obj = JSON.parse(str)\nconsole.log(obj.name)\nconsole.log(obj.age)\n</code></pre>\n<h4 id=\"访问JSON数组\"><a href=\"#访问JSON数组\" class=\"headerlink\" title=\"访问JSON数组\"></a>访问JSON数组</h4><pre><code class=\"javascript\">let ary = &#39;[&quot;google&quot;,&quot;baidu&quot;,&quot;sohu&quot;,&quot;sina&quot;]&#39;\nlet obj = JSON.parse(ary);\n        \nconsole.log(obj[0]);\nconsole.log(obj[1]);\n</code></pre>\n<h4 id=\"复杂情形\"><a href=\"#复杂情形\" class=\"headerlink\" title=\"复杂情形\"></a>复杂情形</h4><pre><code class=\"javascript\">let str = &#39;&#123;&quot;students&quot;:[&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:18&#125;]&#125;&#39;\nlet obj = JSON.parse(str);\n        \nlet ary = obj.students;\nfor(let i = 0;i&lt;ary.length;i++)&#123;\n    console.log(ary[i].name+&quot;============&quot;+ary[i].age);\n&#125;\n</code></pre>\n<h3 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse()\"></a>JSON.parse()</h3><p>JSON 通常用于与服务端交换数据。</p>\n<p>在接收服务器数据时一般是字符串。</p>\n<p>我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p>"},{"title":"Markdown过长导致页面无法显示问题","date":"2022-07-05T05:18:25.000Z","cover":"https://img1.baidu.com/it/u=729938845,709425648&fm=253&fmt=auto&app=138&f=JPEG?w=977&h=500","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"Markdown过长导致页面无法显示问题\n<!-- more -->\n\n## 文章摘要设置\n\n打开主题配置文件 _config.yml 文件，找到如下：\n\n```\n# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\nauto_excerpt:\n  enable: false\n  length: 150\n```\n\n把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。\n\n这里我们可以通过在文章使用`<!-- more -->`标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。\n\n\n\n强烈推荐使用该`<!-- more -->`标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。\n\n## 其他的文章配置\n\n```\n# ---------------------------------------------------------------\n# Post Settings\n# ---------------------------------------------------------------# Automatically scroll page to section which is under <!-- more --> mark.\n# 自动将页面滚动到<!-- more -->标记下的地方。\nscroll_to_more: false# Automatically saving scroll position on each post/page in cookies.\n# 自动保存每篇文章或页面上一次滚动的地方。\nsave_scroll: false# Automatically excerpt description in homepage as preamble text.\n# 自动在首页对文章进行摘要描述作为前言文本。\nexcerpt_description: true# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\n# 不推荐使用自动摘要。\n# 请在文章中使用<!-- more -->标志来精确控制摘要长度。\nauto_excerpt:\n  enable: true\n  length: 200# Post meta display settings\n# 文章元数据展示设置\npost_meta:\n  # 文本显示\n  item_text: true\n  # 创建时间\n  created_at: true\n  # 更新时间\n  # 这个更新时间有点问题，因为每次重新生成文章/部署时都会刷新更新时间，不建议使用\n  updated_at: false\n  # 目录分类\n  categories: true# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\n# 文章字数展示设置\npost_wordcount:\n  # 文本显示\n  item_text: true\n  # 文章字数统计\n  wordcount: true\n  # 阅读时长\n  min2read: true\n  # 站点总字数统计\n  totalcount: true\n  # 该post_wordcount的所有设置另起一行显示\n  separated_meta: true\n```\n","source":"_posts/Markdown过长导致页面无法显示问题.md","raw":"---\ntitle: Markdown过长导致页面无法显示问题\ndate: 2022-07-05 13:18:25\ntags:\n- 瞎写的\ncategories:\n- 问题组\ncover: https://img1.baidu.com/it/u=729938845,709425648&fm=253&fmt=auto&app=138&f=JPEG?w=977&h=500\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\nMarkdown过长导致页面无法显示问题\n<!-- more -->\n\n## 文章摘要设置\n\n打开主题配置文件 _config.yml 文件，找到如下：\n\n```\n# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\nauto_excerpt:\n  enable: false\n  length: 150\n```\n\n把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。\n\n这里我们可以通过在文章使用`<!-- more -->`标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。\n\n\n\n强烈推荐使用该`<!-- more -->`标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。\n\n## 其他的文章配置\n\n```\n# ---------------------------------------------------------------\n# Post Settings\n# ---------------------------------------------------------------# Automatically scroll page to section which is under <!-- more --> mark.\n# 自动将页面滚动到<!-- more -->标记下的地方。\nscroll_to_more: false# Automatically saving scroll position on each post/page in cookies.\n# 自动保存每篇文章或页面上一次滚动的地方。\nsave_scroll: false# Automatically excerpt description in homepage as preamble text.\n# 自动在首页对文章进行摘要描述作为前言文本。\nexcerpt_description: true# Automatically Excerpt. Not recommend.\n# Please use <!-- more --> in the post to control excerpt accurately.\n# 不推荐使用自动摘要。\n# 请在文章中使用<!-- more -->标志来精确控制摘要长度。\nauto_excerpt:\n  enable: true\n  length: 200# Post meta display settings\n# 文章元数据展示设置\npost_meta:\n  # 文本显示\n  item_text: true\n  # 创建时间\n  created_at: true\n  # 更新时间\n  # 这个更新时间有点问题，因为每次重新生成文章/部署时都会刷新更新时间，不建议使用\n  updated_at: false\n  # 目录分类\n  categories: true# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\n# 文章字数展示设置\npost_wordcount:\n  # 文本显示\n  item_text: true\n  # 文章字数统计\n  wordcount: true\n  # 阅读时长\n  min2read: true\n  # 站点总字数统计\n  totalcount: true\n  # 该post_wordcount的所有设置另起一行显示\n  separated_meta: true\n```\n","slug":"Markdown过长导致页面无法显示问题","published":1,"updated":"2022-07-05T05:23:51.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hmbtln00062cujhh2e49cl","content":"<p>Markdown过长导致页面无法显示问题</p>\n<span id=\"more\"></span>\n\n<h2 id=\"文章摘要设置\"><a href=\"#文章摘要设置\" class=\"headerlink\" title=\"文章摘要设置\"></a>文章摘要设置</h2><p>打开主题配置文件 _config.yml 文件，找到如下：</p>\n<pre><code># Automatically Excerpt. Not recommend.\n# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.\nauto_excerpt:\n  enable: false\n  length: 150\n</code></pre>\n<p>把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。</p>\n<p>这里我们可以通过在文章使用<code>&lt;!-- more --&gt;</code>标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。</p>\n<p>强烈推荐使用该<code>&lt;!-- more --&gt;</code>标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</p>\n<h2 id=\"其他的文章配置\"><a href=\"#其他的文章配置\" class=\"headerlink\" title=\"其他的文章配置\"></a>其他的文章配置</h2><pre><code># ---------------------------------------------------------------\n# Post Settings\n# ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.\n# 自动将页面滚动到&lt;!-- more --&gt;标记下的地方。\nscroll_to_more: false# Automatically saving scroll position on each post/page in cookies.\n# 自动保存每篇文章或页面上一次滚动的地方。\nsave_scroll: false# Automatically excerpt description in homepage as preamble text.\n# 自动在首页对文章进行摘要描述作为前言文本。\nexcerpt_description: true# Automatically Excerpt. Not recommend.\n# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.\n# 不推荐使用自动摘要。\n# 请在文章中使用&lt;!-- more --&gt;标志来精确控制摘要长度。\nauto_excerpt:\n  enable: true\n  length: 200# Post meta display settings\n# 文章元数据展示设置\npost_meta:\n  # 文本显示\n  item_text: true\n  # 创建时间\n  created_at: true\n  # 更新时间\n  # 这个更新时间有点问题，因为每次重新生成文章/部署时都会刷新更新时间，不建议使用\n  updated_at: false\n  # 目录分类\n  categories: true# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\n# 文章字数展示设置\npost_wordcount:\n  # 文本显示\n  item_text: true\n  # 文章字数统计\n  wordcount: true\n  # 阅读时长\n  min2read: true\n  # 站点总字数统计\n  totalcount: true\n  # 该post_wordcount的所有设置另起一行显示\n  separated_meta: true\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>Markdown过长导致页面无法显示问题</p>","more":"<h2 id=\"文章摘要设置\"><a href=\"#文章摘要设置\" class=\"headerlink\" title=\"文章摘要设置\"></a>文章摘要设置</h2><p>打开主题配置文件 _config.yml 文件，找到如下：</p>\n<pre><code># Automatically Excerpt. Not recommend.\n# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.\nauto_excerpt:\n  enable: false\n  length: 150\n</code></pre>\n<p>把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。</p>\n<p>这里我们可以通过在文章使用<code>&lt;!-- more --&gt;</code>标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。</p>\n<p>强烈推荐使用该<code>&lt;!-- more --&gt;</code>标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</p>\n<h2 id=\"其他的文章配置\"><a href=\"#其他的文章配置\" class=\"headerlink\" title=\"其他的文章配置\"></a>其他的文章配置</h2><pre><code># ---------------------------------------------------------------\n# Post Settings\n# ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.\n# 自动将页面滚动到&lt;!-- more --&gt;标记下的地方。\nscroll_to_more: false# Automatically saving scroll position on each post/page in cookies.\n# 自动保存每篇文章或页面上一次滚动的地方。\nsave_scroll: false# Automatically excerpt description in homepage as preamble text.\n# 自动在首页对文章进行摘要描述作为前言文本。\nexcerpt_description: true# Automatically Excerpt. Not recommend.\n# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.\n# 不推荐使用自动摘要。\n# 请在文章中使用&lt;!-- more --&gt;标志来精确控制摘要长度。\nauto_excerpt:\n  enable: true\n  length: 200# Post meta display settings\n# 文章元数据展示设置\npost_meta:\n  # 文本显示\n  item_text: true\n  # 创建时间\n  created_at: true\n  # 更新时间\n  # 这个更新时间有点问题，因为每次重新生成文章/部署时都会刷新更新时间，不建议使用\n  updated_at: false\n  # 目录分类\n  categories: true# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\n# 文章字数展示设置\npost_wordcount:\n  # 文本显示\n  item_text: true\n  # 文章字数统计\n  wordcount: true\n  # 阅读时长\n  min2read: true\n  # 站点总字数统计\n  totalcount: true\n  # 该post_wordcount的所有设置另起一行显示\n  separated_meta: true\n</code></pre>"},{"title":"MD中的HTML标签文字被网页编译问题","date":"2022-07-08T11:30:21.000Z","cover":null,"coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"\n\nMD中的HTML标签文字被网页编译问题\n\n<!--more-->\n### 在每个标签前加上“\\“进行转义","source":"_posts/MD中的HTML标签文字被网页编译问题.md","raw":"---\ntitle: MD中的HTML标签文字被网页编译问题\ndate: 2022-07-08 19:30:21\ntags:\n- 瞎写的\ncategories:\n- 问题组\ncover: \ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\n\n\nMD中的HTML标签文字被网页编译问题\n\n<!--more-->\n### 在每个标签前加上“\\“进行转义","slug":"MD中的HTML标签文字被网页编译问题","published":1,"updated":"2022-07-08T11:34:37.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hmbtlo00072cuj9fa65kdb","content":"<p>MD中的HTML标签文字被网页编译问题</p>\n<span id=\"more\"></span>\n<h3 id=\"在每个标签前加上“-“进行转义\"><a href=\"#在每个标签前加上“-“进行转义\" class=\"headerlink\" title=\"在每个标签前加上“\\“进行转义\"></a>在每个标签前加上“\\“进行转义</h3>","site":{"data":{}},"excerpt":"<p>MD中的HTML标签文字被网页编译问题</p>","more":"<h3 id=\"在每个标签前加上“-“进行转义\"><a href=\"#在每个标签前加上“-“进行转义\" class=\"headerlink\" title=\"在每个标签前加上“\\“进行转义\"></a>在每个标签前加上“\\“进行转义</h3>"},{"title":"SpringBoot整合Jpa","date":"2022-07-05T05:17:33.000Z","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F2331630%2F202107%2F2331630-20210721141158611-538846916.png&refer=http%3A%2F%2Fimg2020.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659501639&t=2f8efd79e607e9df171c317efc448f26","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"SpringBoot整合Jpa\n<!-- more -->\n\n\n1.添加依赖\n\n```SQL\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n```\n\n2.配置数据源\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/student?serverTimezone=Asia/Shanghai\n    username: root\n    password: root\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  jpa:\n    #打印SQL语句\n    show-sql: true\n    #使用测试用例时需要配置该项\n    properties:\n      hibernate:\n        enable_lazy_load_no_trans: true\n```\n\n3.新建实体类，并建立映射关系\n\n```java\n@Table(name = \"student\")\n@Entity\n@Data\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer studentId;\n    @Column(name = \"student_name\")\n    private String studentName;\n    @Column(name = \"student_gender\")\n    private String studentGender;\n    @Column(name = \"student_age\")\n    private String studentAge;\n}\n\n```\n\n@Table：用于表明该实体类对应的是数据库中的哪张表，name属性用于配置表名。\n\n@Entity：JPA要求实体类上需要标注该注解\n\n@Id：在标注了@Entity的类上必须有一个字段标注该注解，该注解用于表明标注了此注解的字段是主键。\n\n@GeneratedValue：用于表明该主键的生成策略，通常和@Id同时出现\n\n@Column：该注解并不是必须的，通常用于表明该变量对应的数据库表字段，如果字段名称使用经典命名法，而变量名称使用了驼峰命名法，则此注解可以省略\n\n### JpaRepository接口详解\n\n```sql\npublic interface JpaRepository<T, ID> extends PagingAndSortingRepository<T, ID>, QueryByExampleExecutor<T> {\n\t//查询所有的数据\n    List<T> findAll();\n\t//查询所有的数据，并排序，排序的字段及排序方式通过Sort对象指定\n    List<T> findAll(Sort sort);\n\t//根据ID批量查询\n    List<T> findAllById(Iterable<ID> ids);\n\t//批量保存\n    <S extends T> List<S> saveAll(Iterable<S> entities);\n\t//刷新缓存\n    void flush();\n\t//保存并刷新缓存\n    <S extends T> S saveAndFlush(S entity);\n\t//批量保存并刷新缓存\n    <S extends T> List<S> saveAllAndFlush(Iterable<S> entities);\n\t//批量删除\n    void deleteAllInBatch(Iterable<T> entities);\n\t//通过ID批量删除\n    void deleteAllByIdInBatch(Iterable<ID> ids);\n\t//等价于删除全部数据\n    void deleteAllInBatch();\n\t//通过ID查询\n    T getById(ID id);\n\t//通过示例批量查询\n    <S extends T> List<S> findAll(Example<S> example);\n\t//通过示例批量查询\n    <S extends T> List<S> findAll(Example<S> example, Sort sort);\n}\n\n```\n","source":"_posts/SpringBoot整合Jpa.md","raw":"---\ntitle: SpringBoot整合Jpa\ndate: 2022-07-05 13:17:33\ntags:\n- 知识\ncategories:\n- SpringBoot\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F2331630%2F202107%2F2331630-20210721141158611-538846916.png&refer=http%3A%2F%2Fimg2020.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659501639&t=2f8efd79e607e9df171c317efc448f26\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\nSpringBoot整合Jpa\n<!-- more -->\n\n\n1.添加依赖\n\n```SQL\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n```\n\n2.配置数据源\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/student?serverTimezone=Asia/Shanghai\n    username: root\n    password: root\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  jpa:\n    #打印SQL语句\n    show-sql: true\n    #使用测试用例时需要配置该项\n    properties:\n      hibernate:\n        enable_lazy_load_no_trans: true\n```\n\n3.新建实体类，并建立映射关系\n\n```java\n@Table(name = \"student\")\n@Entity\n@Data\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer studentId;\n    @Column(name = \"student_name\")\n    private String studentName;\n    @Column(name = \"student_gender\")\n    private String studentGender;\n    @Column(name = \"student_age\")\n    private String studentAge;\n}\n\n```\n\n@Table：用于表明该实体类对应的是数据库中的哪张表，name属性用于配置表名。\n\n@Entity：JPA要求实体类上需要标注该注解\n\n@Id：在标注了@Entity的类上必须有一个字段标注该注解，该注解用于表明标注了此注解的字段是主键。\n\n@GeneratedValue：用于表明该主键的生成策略，通常和@Id同时出现\n\n@Column：该注解并不是必须的，通常用于表明该变量对应的数据库表字段，如果字段名称使用经典命名法，而变量名称使用了驼峰命名法，则此注解可以省略\n\n### JpaRepository接口详解\n\n```sql\npublic interface JpaRepository<T, ID> extends PagingAndSortingRepository<T, ID>, QueryByExampleExecutor<T> {\n\t//查询所有的数据\n    List<T> findAll();\n\t//查询所有的数据，并排序，排序的字段及排序方式通过Sort对象指定\n    List<T> findAll(Sort sort);\n\t//根据ID批量查询\n    List<T> findAllById(Iterable<ID> ids);\n\t//批量保存\n    <S extends T> List<S> saveAll(Iterable<S> entities);\n\t//刷新缓存\n    void flush();\n\t//保存并刷新缓存\n    <S extends T> S saveAndFlush(S entity);\n\t//批量保存并刷新缓存\n    <S extends T> List<S> saveAllAndFlush(Iterable<S> entities);\n\t//批量删除\n    void deleteAllInBatch(Iterable<T> entities);\n\t//通过ID批量删除\n    void deleteAllByIdInBatch(Iterable<ID> ids);\n\t//等价于删除全部数据\n    void deleteAllInBatch();\n\t//通过ID查询\n    T getById(ID id);\n\t//通过示例批量查询\n    <S extends T> List<S> findAll(Example<S> example);\n\t//通过示例批量查询\n    <S extends T> List<S> findAll(Example<S> example, Sort sort);\n}\n\n```\n","slug":"SpringBoot整合Jpa","published":1,"updated":"2022-07-05T05:27:36.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hmbtlp00092cuj5kxgd4rd","content":"<p>SpringBoot整合Jpa</p>\n<span id=\"more\"></span>\n\n\n<p>1.添加依赖</p>\n<pre><code class=\"SQL\">&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>2.配置数据源</p>\n<pre><code class=\"yaml\">spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/student?serverTimezone=Asia/Shanghai\n    username: root\n    password: root\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  jpa:\n    #打印SQL语句\n    show-sql: true\n    #使用测试用例时需要配置该项\n    properties:\n      hibernate:\n        enable_lazy_load_no_trans: true\n</code></pre>\n<p>3.新建实体类，并建立映射关系</p>\n<pre><code class=\"java\">@Table(name = &quot;student&quot;)\n@Entity\n@Data\npublic class Student &#123;\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer studentId;\n    @Column(name = &quot;student_name&quot;)\n    private String studentName;\n    @Column(name = &quot;student_gender&quot;)\n    private String studentGender;\n    @Column(name = &quot;student_age&quot;)\n    private String studentAge;\n&#125;\n</code></pre>\n<p>@Table：用于表明该实体类对应的是数据库中的哪张表，name属性用于配置表名。</p>\n<p>@Entity：JPA要求实体类上需要标注该注解</p>\n<p>@Id：在标注了@Entity的类上必须有一个字段标注该注解，该注解用于表明标注了此注解的字段是主键。</p>\n<p>@GeneratedValue：用于表明该主键的生成策略，通常和@Id同时出现</p>\n<p>@Column：该注解并不是必须的，通常用于表明该变量对应的数据库表字段，如果字段名称使用经典命名法，而变量名称使用了驼峰命名法，则此注解可以省略</p>\n<h3 id=\"JpaRepository接口详解\"><a href=\"#JpaRepository接口详解\" class=\"headerlink\" title=\"JpaRepository接口详解\"></a>JpaRepository接口详解</h3><pre><code class=\"sql\">public interface JpaRepository&lt;T, ID&gt; extends PagingAndSortingRepository&lt;T, ID&gt;, QueryByExampleExecutor&lt;T&gt; &#123;\n    //查询所有的数据\n    List&lt;T&gt; findAll();\n    //查询所有的数据，并排序，排序的字段及排序方式通过Sort对象指定\n    List&lt;T&gt; findAll(Sort sort);\n    //根据ID批量查询\n    List&lt;T&gt; findAllById(Iterable&lt;ID&gt; ids);\n    //批量保存\n    &lt;S extends T&gt; List&lt;S&gt; saveAll(Iterable&lt;S&gt; entities);\n    //刷新缓存\n    void flush();\n    //保存并刷新缓存\n    &lt;S extends T&gt; S saveAndFlush(S entity);\n    //批量保存并刷新缓存\n    &lt;S extends T&gt; List&lt;S&gt; saveAllAndFlush(Iterable&lt;S&gt; entities);\n    //批量删除\n    void deleteAllInBatch(Iterable&lt;T&gt; entities);\n    //通过ID批量删除\n    void deleteAllByIdInBatch(Iterable&lt;ID&gt; ids);\n    //等价于删除全部数据\n    void deleteAllInBatch();\n    //通过ID查询\n    T getById(ID id);\n    //通过示例批量查询\n    &lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example);\n    //通过示例批量查询\n    &lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example, Sort sort);\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>SpringBoot整合Jpa</p>","more":"<p>1.添加依赖</p>\n<pre><code class=\"SQL\">&lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>2.配置数据源</p>\n<pre><code class=\"yaml\">spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/student?serverTimezone=Asia/Shanghai\n    username: root\n    password: root\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  jpa:\n    #打印SQL语句\n    show-sql: true\n    #使用测试用例时需要配置该项\n    properties:\n      hibernate:\n        enable_lazy_load_no_trans: true\n</code></pre>\n<p>3.新建实体类，并建立映射关系</p>\n<pre><code class=\"java\">@Table(name = &quot;student&quot;)\n@Entity\n@Data\npublic class Student &#123;\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer studentId;\n    @Column(name = &quot;student_name&quot;)\n    private String studentName;\n    @Column(name = &quot;student_gender&quot;)\n    private String studentGender;\n    @Column(name = &quot;student_age&quot;)\n    private String studentAge;\n&#125;\n</code></pre>\n<p>@Table：用于表明该实体类对应的是数据库中的哪张表，name属性用于配置表名。</p>\n<p>@Entity：JPA要求实体类上需要标注该注解</p>\n<p>@Id：在标注了@Entity的类上必须有一个字段标注该注解，该注解用于表明标注了此注解的字段是主键。</p>\n<p>@GeneratedValue：用于表明该主键的生成策略，通常和@Id同时出现</p>\n<p>@Column：该注解并不是必须的，通常用于表明该变量对应的数据库表字段，如果字段名称使用经典命名法，而变量名称使用了驼峰命名法，则此注解可以省略</p>\n<h3 id=\"JpaRepository接口详解\"><a href=\"#JpaRepository接口详解\" class=\"headerlink\" title=\"JpaRepository接口详解\"></a>JpaRepository接口详解</h3><pre><code class=\"sql\">public interface JpaRepository&lt;T, ID&gt; extends PagingAndSortingRepository&lt;T, ID&gt;, QueryByExampleExecutor&lt;T&gt; &#123;\n    //查询所有的数据\n    List&lt;T&gt; findAll();\n    //查询所有的数据，并排序，排序的字段及排序方式通过Sort对象指定\n    List&lt;T&gt; findAll(Sort sort);\n    //根据ID批量查询\n    List&lt;T&gt; findAllById(Iterable&lt;ID&gt; ids);\n    //批量保存\n    &lt;S extends T&gt; List&lt;S&gt; saveAll(Iterable&lt;S&gt; entities);\n    //刷新缓存\n    void flush();\n    //保存并刷新缓存\n    &lt;S extends T&gt; S saveAndFlush(S entity);\n    //批量保存并刷新缓存\n    &lt;S extends T&gt; List&lt;S&gt; saveAllAndFlush(Iterable&lt;S&gt; entities);\n    //批量删除\n    void deleteAllInBatch(Iterable&lt;T&gt; entities);\n    //通过ID批量删除\n    void deleteAllByIdInBatch(Iterable&lt;ID&gt; ids);\n    //等价于删除全部数据\n    void deleteAllInBatch();\n    //通过ID查询\n    T getById(ID id);\n    //通过示例批量查询\n    &lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example);\n    //通过示例批量查询\n    &lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example, Sort sort);\n&#125;\n</code></pre>"},{"title":"SpringBoot笔记(一）","date":"2022-07-07T09:28:39.000Z","cover":"https://pic2.zhimg.com/v2-704d04346a5e35b9bd3a4923732a589d_180x120.jpg","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"SpringBoot笔记(一）\n<!--more-->\n处理静态资源\n***\n在springboot中，可以使用以下方式处理静态资源：\n+ webjars：localhost:8080/webjars/...\n 百度输入webjars官网，可以找到很多资源的maven依赖方式，如jQuery，bootstrap等等。\n+ public，static，/**，resource：localhost:8080/\n其中优先级：resource>static(默认)>public。\n\n首页订制\n***\n+ 我们一般通过controller跳转到index首页，将index.html放入templates包中，\n  需导入模板引擎thymeleaf依赖。\n\n模板引擎thymeleaf\n***\n+ 我们要使用thymeleaf，需要在html文件中导入命名空间的\n  约束`<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">`，方便提示。\n  \n\nthymeleaf在html标签中输入th无提示的问题解决\n***\n+ 听说IDEA默认的thymeleaf版本是2.X版本，2.X版本有不少的功能缺陷，\n但是据说现在IDEA提高了默认的thymeleaf版本，导入前文的依赖后3.X版本\n的会一同下载下来，并没有去考证，死马当做活马医，手动升级了版本，\n在pom.xml文件的 properties 标签中添加以下代码：\n`<properties>\n         <thymeleaf.version>3.0.11.RELEASE</thymeleaf.version>\n         <thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>\n </properties>`\n [原文连接](https://blog.csdn.net/qq_43446147/article/details/108000547)\n\n前端页面模板下载\n+ [连接](https://www.php.cn/) \"首页->资源下载\"\n\n首页配置\n+ 所有页面的静态资源都需要使用thymeleaf接管,@{}.\n\n页面国际化\n+ (国际化:internationalization) i与n之间有18个字母,故称i18n,\n在resource下创建i18n文件夹.\n+ 三个文件:默认/英文/中文 可以一个页面实现多个语言编码\n+ 在application.properties中添加`spring.messages.basename=i18n.文件名`\n+ 国际化页面前端页面用#{}取值.\n+ 切换中文/English config中创建类实现接口LocaleResolver,配置解析请求.\n+ 步骤: \n    * 我们需要配置i18n文件\n    * 我们如果需要在项目中进行按钮自动切换,我们需要自定义一个组件LocaleResolver\n    * 记得将自己写的组件配置到spring容器@Bean\n\n登录＋拦截器\n+ 拦截未登录直接通过地址访问管理员页面\n\n定义Data的输入格式\n+ 如果不做如何处理,日期格式输入格式为`\tWed Apr 27 22:58:12 CST 2022`\n+ 我们可以使用dates.format来定义日期的输出格式，如\n    `#dates.format(emp.getBirth(),'yyyy-mm-dd')` \n    yyyy-mm-dd hh-mm-ss表示年-月-日 时-分-秒\n+ 也可在application.properties中加入`spring.jackson.date-format=yyyy-mm-dd`\n\n","source":"_posts/SpringBoot笔记(一）.md","raw":"---\ntitle: SpringBoot笔记(一）\ndate: 2022-07-07 17:28:39\ntags:\n- 知识\ncategories:\n- SpringBoot\ncover: https://pic2.zhimg.com/v2-704d04346a5e35b9bd3a4923732a589d_180x120.jpg\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\nSpringBoot笔记(一）\n<!--more-->\n处理静态资源\n***\n在springboot中，可以使用以下方式处理静态资源：\n+ webjars：localhost:8080/webjars/...\n 百度输入webjars官网，可以找到很多资源的maven依赖方式，如jQuery，bootstrap等等。\n+ public，static，/**，resource：localhost:8080/\n其中优先级：resource>static(默认)>public。\n\n首页订制\n***\n+ 我们一般通过controller跳转到index首页，将index.html放入templates包中，\n  需导入模板引擎thymeleaf依赖。\n\n模板引擎thymeleaf\n***\n+ 我们要使用thymeleaf，需要在html文件中导入命名空间的\n  约束`<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">`，方便提示。\n  \n\nthymeleaf在html标签中输入th无提示的问题解决\n***\n+ 听说IDEA默认的thymeleaf版本是2.X版本，2.X版本有不少的功能缺陷，\n但是据说现在IDEA提高了默认的thymeleaf版本，导入前文的依赖后3.X版本\n的会一同下载下来，并没有去考证，死马当做活马医，手动升级了版本，\n在pom.xml文件的 properties 标签中添加以下代码：\n`<properties>\n         <thymeleaf.version>3.0.11.RELEASE</thymeleaf.version>\n         <thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>\n </properties>`\n [原文连接](https://blog.csdn.net/qq_43446147/article/details/108000547)\n\n前端页面模板下载\n+ [连接](https://www.php.cn/) \"首页->资源下载\"\n\n首页配置\n+ 所有页面的静态资源都需要使用thymeleaf接管,@{}.\n\n页面国际化\n+ (国际化:internationalization) i与n之间有18个字母,故称i18n,\n在resource下创建i18n文件夹.\n+ 三个文件:默认/英文/中文 可以一个页面实现多个语言编码\n+ 在application.properties中添加`spring.messages.basename=i18n.文件名`\n+ 国际化页面前端页面用#{}取值.\n+ 切换中文/English config中创建类实现接口LocaleResolver,配置解析请求.\n+ 步骤: \n    * 我们需要配置i18n文件\n    * 我们如果需要在项目中进行按钮自动切换,我们需要自定义一个组件LocaleResolver\n    * 记得将自己写的组件配置到spring容器@Bean\n\n登录＋拦截器\n+ 拦截未登录直接通过地址访问管理员页面\n\n定义Data的输入格式\n+ 如果不做如何处理,日期格式输入格式为`\tWed Apr 27 22:58:12 CST 2022`\n+ 我们可以使用dates.format来定义日期的输出格式，如\n    `#dates.format(emp.getBirth(),'yyyy-mm-dd')` \n    yyyy-mm-dd hh-mm-ss表示年-月-日 时-分-秒\n+ 也可在application.properties中加入`spring.jackson.date-format=yyyy-mm-dd`\n\n","slug":"SpringBoot笔记(一）","published":1,"updated":"2022-07-07T11:52:14.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hmbtlr000c2cuj98brawgx","content":"<p>SpringBoot笔记(一）</p>\n<span id=\"more\"></span>\n<p>处理静态资源</p>\n<hr>\n<p>在springboot中，可以使用以下方式处理静态资源：</p>\n<ul>\n<li>webjars：localhost:8080/webjars/…<br>百度输入webjars官网，可以找到很多资源的maven依赖方式，如jQuery，bootstrap等等。</li>\n<li>public，static，/**，resource：localhost:8080/<br>其中优先级：resource&gt;static(默认)&gt;public。</li>\n</ul>\n<p>首页订制</p>\n<hr>\n<ul>\n<li>我们一般通过controller跳转到index首页，将index.html放入templates包中，<br>需导入模板引擎thymeleaf依赖。</li>\n</ul>\n<p>模板引擎thymeleaf</p>\n<hr>\n<ul>\n<li>我们要使用thymeleaf，需要在html文件中导入命名空间的<br>约束<code>&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>，方便提示。</li>\n</ul>\n<p>thymeleaf在html标签中输入th无提示的问题解决</p>\n<hr>\n<ul>\n<li>听说IDEA默认的thymeleaf版本是2.X版本，2.X版本有不少的功能缺陷，<br>但是据说现在IDEA提高了默认的thymeleaf版本，导入前文的依赖后3.X版本<br>的会一同下载下来，并没有去考证，死马当做活马医，手动升级了版本，<br>在pom.xml文件的 properties 标签中添加以下代码：<br>`<properties><pre><code>   &lt;thymeleaf.version&gt;3.0.11.RELEASE&lt;/thymeleaf.version&gt;\n   &lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;\n</code></pre>\n</properties>`<br><a href=\"https://blog.csdn.net/qq_43446147/article/details/108000547\">原文连接</a></li>\n</ul>\n<p>前端页面模板下载</p>\n<ul>\n<li><a href=\"https://www.php.cn/\">连接</a> “首页-&gt;资源下载”</li>\n</ul>\n<p>首页配置</p>\n<ul>\n<li>所有页面的静态资源都需要使用thymeleaf接管,@{}.</li>\n</ul>\n<p>页面国际化</p>\n<ul>\n<li>(国际化:internationalization) i与n之间有18个字母,故称i18n,<br>在resource下创建i18n文件夹.</li>\n<li>三个文件:默认/英文/中文 可以一个页面实现多个语言编码</li>\n<li>在application.properties中添加<code>spring.messages.basename=i18n.文件名</code></li>\n<li>国际化页面前端页面用#{}取值.</li>\n<li>切换中文/English config中创建类实现接口LocaleResolver,配置解析请求.</li>\n<li>步骤: <ul>\n<li>我们需要配置i18n文件</li>\n<li>我们如果需要在项目中进行按钮自动切换,我们需要自定义一个组件LocaleResolver</li>\n<li>记得将自己写的组件配置到spring容器@Bean</li>\n</ul>\n</li>\n</ul>\n<p>登录＋拦截器</p>\n<ul>\n<li>拦截未登录直接通过地址访问管理员页面</li>\n</ul>\n<p>定义Data的输入格式</p>\n<ul>\n<li>如果不做如何处理,日期格式输入格式为<code>    Wed Apr 27 22:58:12 CST 2022</code></li>\n<li>我们可以使用dates.format来定义日期的输出格式，如<br>  <code>#dates.format(emp.getBirth(),&#39;yyyy-mm-dd&#39;)</code><br>  yyyy-mm-dd hh-mm-ss表示年-月-日 时-分-秒</li>\n<li>也可在application.properties中加入<code>spring.jackson.date-format=yyyy-mm-dd</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>SpringBoot笔记(一）</p>","more":"<p>处理静态资源</p>\n<hr>\n<p>在springboot中，可以使用以下方式处理静态资源：</p>\n<ul>\n<li>webjars：localhost:8080/webjars/…<br>百度输入webjars官网，可以找到很多资源的maven依赖方式，如jQuery，bootstrap等等。</li>\n<li>public，static，/**，resource：localhost:8080/<br>其中优先级：resource&gt;static(默认)&gt;public。</li>\n</ul>\n<p>首页订制</p>\n<hr>\n<ul>\n<li>我们一般通过controller跳转到index首页，将index.html放入templates包中，<br>需导入模板引擎thymeleaf依赖。</li>\n</ul>\n<p>模板引擎thymeleaf</p>\n<hr>\n<ul>\n<li>我们要使用thymeleaf，需要在html文件中导入命名空间的<br>约束<code>&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>，方便提示。</li>\n</ul>\n<p>thymeleaf在html标签中输入th无提示的问题解决</p>\n<hr>\n<ul>\n<li>听说IDEA默认的thymeleaf版本是2.X版本，2.X版本有不少的功能缺陷，<br>但是据说现在IDEA提高了默认的thymeleaf版本，导入前文的依赖后3.X版本<br>的会一同下载下来，并没有去考证，死马当做活马医，手动升级了版本，<br>在pom.xml文件的 properties 标签中添加以下代码：<br>`<properties><pre><code>   &lt;thymeleaf.version&gt;3.0.11.RELEASE&lt;/thymeleaf.version&gt;\n   &lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;\n</code></pre>\n</properties>`<br><a href=\"https://blog.csdn.net/qq_43446147/article/details/108000547\">原文连接</a></li>\n</ul>\n<p>前端页面模板下载</p>\n<ul>\n<li><a href=\"https://www.php.cn/\">连接</a> “首页-&gt;资源下载”</li>\n</ul>\n<p>首页配置</p>\n<ul>\n<li>所有页面的静态资源都需要使用thymeleaf接管,@{}.</li>\n</ul>\n<p>页面国际化</p>\n<ul>\n<li>(国际化:internationalization) i与n之间有18个字母,故称i18n,<br>在resource下创建i18n文件夹.</li>\n<li>三个文件:默认/英文/中文 可以一个页面实现多个语言编码</li>\n<li>在application.properties中添加<code>spring.messages.basename=i18n.文件名</code></li>\n<li>国际化页面前端页面用#{}取值.</li>\n<li>切换中文/English config中创建类实现接口LocaleResolver,配置解析请求.</li>\n<li>步骤: <ul>\n<li>我们需要配置i18n文件</li>\n<li>我们如果需要在项目中进行按钮自动切换,我们需要自定义一个组件LocaleResolver</li>\n<li>记得将自己写的组件配置到spring容器@Bean</li>\n</ul>\n</li>\n</ul>\n<p>登录＋拦截器</p>\n<ul>\n<li>拦截未登录直接通过地址访问管理员页面</li>\n</ul>\n<p>定义Data的输入格式</p>\n<ul>\n<li>如果不做如何处理,日期格式输入格式为<code>    Wed Apr 27 22:58:12 CST 2022</code></li>\n<li>我们可以使用dates.format来定义日期的输出格式，如<br>  <code>#dates.format(emp.getBirth(),&#39;yyyy-mm-dd&#39;)</code><br>  yyyy-mm-dd hh-mm-ss表示年-月-日 时-分-秒</li>\n<li>也可在application.properties中加入<code>spring.jackson.date-format=yyyy-mm-dd</code></li>\n</ul>"},{"title":"Hello World","date":"2022-07-02T08:36:28.000Z","cover":null,"coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"Welcome to [Hexo](https://hexo.io/)!\n\n<!--more-->\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022-07-02 16:36:28\ntags:\n- 瞎写的\ncategories:\n- 问题组\ncover: \ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\nWelcome to [Hexo](https://hexo.io/)!\n\n<!--more-->\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-07-07T10:37:01.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hmbtls000f2cujbb7ngnfl","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!</p>\n<span id=\"more\"></span>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!</p>","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"(一)走进HTML","date":"2022-07-08T09:04:11.000Z","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.php.cn%2Fupload%2Farticle%2F000%2F000%2F029%2F5de09308e9912367.jpg&refer=http%3A%2F%2Fimg.php.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659868948&t=32927ec46d42bc175fbc4ba757b64c70","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":" 走进HTML\n<!--more-->\n## HTML的开发环境和运行环境\n\nHTML本质上就是一个文档，市面上常见的一些简单的文本编辑器都是可以用来开发HTML，编辑之后只需将后缀修改为\".html\"即可 如：记事本，EditPlus等\n\n前端开发也有众多专业的开发软件，如：Webstrom，Sublime Text，Dreamweaver，HBuilder等，本书主要以webstrom为主要开发软件\n\nHTML运行环境即各种浏览器，如:IE，edge，Chrome，Firefox，Safari等均可作为HTML的运行环境\n\n\n\n## HTML文档结构\n\nHTML文档有明确的文档结构，包含三个部分：\\<HTML>中包含\\<head>...\\</head>部分和\\<body>...\\</body>部分\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n\n\n## Hello World\n\n1. 创建html文件，并键入如下代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>我的第一个网页</title>\n</head>\n<body>\n    Hello World\n</body>\n</html>\n```\n\n\n\n## 元素\n\nHTML文档由HTML元素定义，一个基本元素由“开始标签”，“元素内容”，“结束标签”构成\n\n## 块级标签和行级标签\n\nHTML中，所有标签都是预定义的，也就是说所有的标签都有各自的特点属性，根据这些特点可将标签分为块级标签和行级标签两类\n\n#### 块级标签\n\n块级标签编译后在浏览器中默认没有高度，其高度由其添加的内容决定，其宽度默认为屏幕宽度，也就是说块级标签默认占一行\n\n#### 行级标签\n\n行级标签编译后在浏览器中默认没有宽度和高度，其宽高均有添加的内容决定，也就是说行级标签在其内容不满一行时不会换行\n\n\n\n## HTML常用标签\n\n#### 常用的块级标签\n\n- 标题标签\n\n- - 标题（Heading）通过\\<h1>....\\<h6>标签定义，表示一级标题至六级标题，其中\\<h1>最大，\\<h6>最小\n\n  - 标题标签只用于标题\n\n  - 标题标签不单单用于字体放大加粗，更多的是为搜索引擎使用标题帮助网页索引\n  ```html\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>标题标签</title>\n\t\t</head>\n\t\t<body>\n\t\t<h1>一级标题</h1>\n\t\t<h2>二级标题</h2>\n\t\t<h3>三级标题</h3>\n\t\t<h4>四级标题</h4>\n\t\t<h5>五级标题</h5>\n\t\t<h6>六级标题</h6>\n\t\t</body>\n  ```\n\n- 段落标签\n\n- - 段落通过\\<p>...\\</p>标签定义，表示文档中的一个自然段\n  - 注：段落标签不能嵌套使用，若想要段落标签中的内容换行显示可使用\\<br/>标签换行\n  ```html\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Title</title>\n\t</head>\n\t<body>\n\t<p>\n\t面朝大海，春暖花开<br/>\n\t作者: 海子\n\t</p>\n\t<p>从明天起，做一个幸福的人</p>\n\t<p>喂马，劈柴，周游世界</p>\n\t<p>从明天起，关心粮食和蔬菜</p>\n\t<p>我有一所房子，面朝大海，春暖花开</p>\n\t<p>从明天起，和每一个亲人通信</p>\n\t<p>告诉他们我的幸福</p>\n\t<p>那幸福的闪电告诉我的</p>\n\t<p>我将告诉每一个人</p>\n\t<p>给每一条河每一座山取一个温暖的名字</p>\n\t<p>陌生人，我也为你祝福</p>\n\t<p>愿你有一个灿烂的前程</p>\n\t<p>愿你有情人终成眷属</p>\n\t<p>愿你在尘世获得幸福</p>\n\t<p>我只愿面朝大海，春暖花开</p>\n</body>\n</html>\n  \n  ```\n\n- div标签\n\n- - div标签用于定义文档中的分区或节\n  - 可以把文档分割为独立的，不同的部分\n  - 在后期通过学习样式表，div可以与CSS配合对整个网页进行页面布局，模块划分，让网页制作不再有难度\n  - div若不带样式单独使用则与段落标签\\<p>相似，没有特定的含义\n\n- - div若不带样式单独使用则与段落标签\\<p>相似，没有特定的含义\n\n代码\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>无序列表</title>\n</head>\n<body>\n    <div>\n  \t\t这是div标签，用于页面划分页面布局\n  \t</div>\n</body>\n</html>\n```\n\n- 无序列表\n\n- - 列表可以结合链接标签用来定义新闻标题等一些较为常用的标题类链接\n\n  - 无序列表使用\\<ul>定义列表，\\<li>定义列表中的条目，默认此列项目使用黑色小圆点进行标记\n\n  - 通过在\\<ul>中添加type属性更改列表的展示标记，其中disc表示实心圆，square表示矩形显示，circle表示空心圆\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>无序列表</title>\n    </head>\n    <body>\n        <ul>\n            <li>热烈庆祝xxx同学高薪就业</li>\n            <li>热烈庆祝xxx同学高薪就业</li>\n        </ul>\n        <ul type=\"square\">\n            <li>热烈庆祝xxx同学高薪就业</li>\n            <li>热烈庆祝xxx同学高薪就业</li>\n        </ul>\n        <ul type=\"circle\">\n            <li>热烈庆祝xxx同学高薪就业</li>\n            <li>热烈庆祝xxx同学高薪就业</li>\n        </ul>\n    </body>\n    </html>\n    ```\n\n- 有序列表\n\n- - 有序列表使用\\<ol>定义列表，\\<li>定义列表中的条目，默认此列项目使用阿拉伯数字进行标记\n\n  - 通过在\\<ol>中添加type属性更改列表的展示标记，其中‘A’表示大写字母，‘a’表示小写字母，‘I’表示大写罗马数字，‘i’表示小写罗马数字，‘1’表示阿拉伯数字（默认）\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>有序列表</title>\n    </head>\n    <body>\n        <h3>工作流程</h3>\n        <ol>\n            <li>每日晨会，任务分配</li>\n            <li>工作任务</li>\n            <li>工作日报</li>\n            <li>下班回家</li>\n        </ol>\n        <ol type=\"A\">\n              <li>每日晨会，任务分配</li>\n              <li>工作任务</li>\n              <li>工作日报</li>\n              <li>下班回家</li>\n        </ol>\n        <ol type=\"a\">\n              <li>每日晨会，任务分配</li>\n              <li>工作任务</li>\n              <li>工作日报</li>\n              <li>下班回家</li>\n        </ol>\n        <ol type=\"I\">\n              <li>每日晨会，任务分配</li>\n              <li>工作任务</li>\n              <li>工作日报</li>\n              <li>下班回家</li>\n        </ol>\n        <ol type=\"i\">\n              <li>每日晨会，任务分配</li>\n              <li>工作任务</li>\n              <li>工作日报</li>\n              <li>下班回家</li>\n         </ol>\n    </body>\n    </html>\n    ```\n\n- 自定义列表\n\n- - 使用\\<dl>定义列表，\\<dt>定义列表中的项目，\\<dd>定义列表条目\n\n  - 自定义列表不单单只用了区分项目，后期通过样式，标签嵌套可以胜任诸多任务，如：商城，外卖类网站商品的模块划分\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>自定义列表</title>\n    </head>\n    <body>\n        <dl>\n            <dt>pc端游戏</dt>\n            <dd>穿越火线</dd>\n            <dd>英雄联盟</dd>\n            <dd>CSGO</dd>\n            <dt>手机游戏</dt>\n            <dd>和平精英</dd>\n            <dd>王者荣耀</dd>\n            <dd>阴阳师</dd>\n        </dl>\n    </body>\n    </html>\n    ```\n\n- 嵌套列表\n\n- - 列表可以通过多层嵌套实现多级列表\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>嵌套列表</title>\n    </head>\n    <body>\n        <ul>\n            <li>茶\n                <ul>\n                    <li>白茶</li>\n                    <li>绿茶</li>\n                    <li>红茶</li>\n                </ul>\n            </li>\n            <li>咖啡\n                <ul>\n                    <li>拿铁</li>\n                    <li>卡布奇洛</li>\n                </ul>\n            </li>\n        </ul>\n    </body>\n    </html>\n    ```\n\n\n\n\n\n#### 常用的行级标签\n\n- 内联元素\n\n- - 使用\\<span>...\\<span>表示\n\n  - 单独使用没有特定的含义\n\n  - 当与CSS一同使用，用来组合文档中的行内元素，如：在一行文字中给某一个字单独设置样式，再或者在某行字中添加小图标\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>span</title>\n    </head>\n    <body>\n        <p>\n            <span style=\"font-size: 33px\">我</span>\n            最\n            <span style=\"font-size: 33px\">帅</span>\n        </p>\n    </body>\n    </html>\n    ```\n\n- 链接标签\n\n- - 使用\\<a href=\"url\">...\\</a>表示\n  - 用于从一个页面跳转到另一个页面\n  - href表示跳转的链接目标\n  - 默认情况下链接将以以下形式出现在网页中\n\n- - - 在未点击访问时链接字体程蓝色并带同色下划线\n    - 在点击后链接字体会程红色显示并带同色下划线\n\n- - 标签常用属性\n\t![img](https://s2.loli.net/2022/07/08/q4JpNFAyeStIfE5.png)\n\n- - 在网页开发中常用的链接有以下四种：\n\t![img](https://s2.loli.net/2022/07/08/SUz5vErMnaX4HFx.png)\n\n附：\n\n空链接“#”与“javascript:void(0)”的区别：\n\n1. “#”包含一个位置信息，默认为网页顶端，当页面高度大于一屏时，点击后会跳转到网页顶部\n2. “javascript:void(0)”是一个伪协议，表示url内容通过javascript执行，而void(0)则表示不作任何操作，这样该标签既保留了链接样式还能防止页面跳转\n3. 空链接通常通过添加javascript事件去做一些其它操作，如：设置收藏，设置首页，弹窗等，这些会在本书javascript事件章节详细讲解\n\n附：\n\n绝对路径和相对路径\n\n绝对路径：是指文件在硬盘上的真正存在的路径，如：一张名为“头像.jpg”的图片或一个名为“index.html”的网页存放在我计算机中的“C:\\Users\\document\\WebstormProjects\\untitled15”目录中，则图片的绝对路径为“C:\\Users\\document\\WebstormProjects\\untitled15\\头像.jpg”，网页的绝对路径为“C:\\Users\\document\\WebstormProjects\\untitled15\\index.html”，但在开发时很少使用绝对路径，当指定了决定路径后在项目路径在本地计算机上是没问题的，但上传到服务器或在其它计算机上时很可能会出现找不到路径，路径错误等问题。\n\n相对路径：指由文件本身相对于目标文件的路径，使用相对路径的三种写法，下边以网页index.html引用网页Login.html为例说明：\n\n1.若Login.html相对index.html是在同一目录，那么网页在引用图片时则只需要通过Login.html名称+后缀引用即可\n\n2.若网页Login.html存在某个文件夹中，文件夹与网页index.html属于同一目录，那么网页index.html在引用网页Login.html时则需要通过找到文件夹使用分隔符“/”才能找到文件夹中相对的网页Login.html文件，这里需要注意：绝对路径使用分隔符“\\”，相对路径使用分隔符“/”\n\n3.若网页index.html和网页Login.html都存在不同的文件夹中，两个不同的文件夹属于同一目录，那么网页index.html在引用网页Login.html时则需要通过“../”返回上一级路径再去引用存放网页Login.html的文件夹再使用分隔符“/”引用网页Login.html，这里需要注意一个“../”，表示网上返回一级，如果要返回多个则需要使用多个“../”\n\n```\n\n锚链接示例代码：\n\t```html\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Title</title>\n\t</head>\n\t<body>\n\t<a id=\"top\">这是网页顶部</a>\n\t<a href=\"#middle\">跳转至网页中部</a>\n    <a href=\"#bottom\">跳转至网页底部</a>\n    <p>网页内容</p>\n    <p>....</p>\n    <p>这里省略若干行相同内容</p>\n    <a id=\"middle\">这是网页中部</a>\n    <a href=\"#top\">跳转至网页顶部</a>\n    <a href=\"#bottom\">跳转至网页底部</a>\n    <p>网页内容</p>\n    <p>....</p>\n    <p>这里省略若干行相同内容</p>\n    <a href=\"#middle\">跳转至网页中部</a>\n    <a href=\"#top\">跳转至网页顶部</a>\n    <a id=\"bottom\">这是网页底部</a>\n</body>\n</html>\n```\n附：\n1. 锚链接是在页面内的不同位置跳转，本质上就是元素间的跳转\n2. 使用锚链接首先要建立锚点目标，只需要给元素添加id或name属性即可 如：\\<a name=\"top\">,\\<div id=\"top\">\n3. 建立好锚点目标后再使用\\<a href=\"#id值或name值\">引用锚点\n4. 如果不同页面跳转，同时存在锚点，则先跳转到要跳转的页面，然后在寻找锚点元素进行跳转\n\n\n\n```html\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>首页</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<a href=\"demo.html#bottom\">走你</a>\n\t\t</body>\n\t\t</html>\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>测试页</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<p>这是内容</p>\n\t\t\t<p>.....</p>\n\t\t\t<p>此时省略若干行相同内容</p>\n\t\t\t<p>这是内容</p>\n\t\t\t<div id=\"bottom\"></div>\n\t\t</body>\n\t\t</html>\n```\n\n\n- 图片标签\n\n- - 图片标签使用\\<img/>表示，图片标签没有结束标签“/”表示结束\n  - 标签属性\n  \t![img](https://s2.loli.net/2022/07/08/YRABTNJk15doKQi.png)\n\n  代码：\n\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"UTF-8\">\n      <title>图片标签</title>\n  </head>\n  <body>\n      <img src=\"F.jpg\" alt=\"这是替换文本\" title=\"这是一张图片\" width=\"600\" height=\"406\">\n  </body>\n  </html>\n  ```\n```\n\n\n\n- 图片增强（map）\n\n- - \\<map>标签有助于定义图像映射。图像映射指的是图像中包含一个或多个可点击区域。\\<map>标签与\\<area>标签一起确定可点击区域。可点击区域可以是矩形、圆形或多边形区域这些形状之一。如果不指定形状，就会认为是整个图像\n\n    示例\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n    </head>\n    <body>\n        <div>\n            <img src=\"../images/mapImages/4.png\" width=\"592\" height=\"182\" alt=\"mapSelect\" usemap=\"#circusmap\">\n            <map name=\"circusmap\">\n                <area shape=\"rect\" coords=\"82,70,155,133\" href=\"map2.html\">\n                <area shape=\"rect\" coords=\"297,70,387, 133\" href=\"map1.html\">\n                <area shape=\"rect\" coords=\"480,70,572, 133\" href=\"map3.html\">\n            </map>\n        </div>\n    </body>\n    </html>\n```\n\n\n知识补充：\n\n- \\<area>标签定义图像映射中的区域\n\n  ​\tshape属性 \n\n  ​     \t\tshape属性用于定义图像映射中对鼠标敏感的区域的形状\n\n  ​\t\t\t\t\t圆形（circ或circle）\n\n  ​\t\t\t\t\t多边形（poly或polygon）\n\n  ​\t\t\t\t\t矩形（rect或rectangle）\n\n  ​\tcoords属性\n\n  ​\t\t\t\t\t圆形：shape=\"circle\"，coords=\"x,y,z\"\n\n  ​\t\t\t\t\t这里的 x 和 y 定义了圆心的位置（\"0,0\" 是图像左上角的坐标），z 是以像素为单位的圆形半径。\n\n  ​\t\t\t\t\t多边形：shape=\"polygon\"，coords=\"x1,y1,x2,y2,x3,y3,...\"\n\n  ​\t\t\t\t\t每一对 \"x,y\" 坐标都定义了多边形的一个顶点（\"0,0\" 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。\n\n  ​\t\t\t\t\t多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。\n\n  ​\t\t\t\t\t矩形：shape=\"rectangle\"，coords=\"x1,y1,x2,y2\"\n\n  ​\t\t\t\t\t第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，\"0,0\" 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。\n\n- 常用文本格式化标签\n  ![img](https://s2.loli.net/2022/07/08/obBW4smqSA1EpVL.png)\n\n  代码：\n  ```html\n  <!DOCTYPE HTML>\n  <head>\n  <meta charset=\"utf-8\">\n  </head>\n  <body>\n  <b>定义粗体文本</b>\n  <br/>\n  <em>定义着重文字</em>\n  <br/>\n  <i>定义斜体文字</i>\n    <br/>\n  <small>定义小号文字</small>\n  <br/>\n  <strong>定义加重语气</strong>\n  <br/>\n  定义下标字 <sub>aa</sub>\n  <br/>\n  定义上标字 <sup>aa</sup>\n  <br/>\n  <ins>定义插入字(加了下划线)</ins>\n  <br/>\n  <del>定义删除字(加了删除线)</del>\n  </body>\n  ```\n","source":"_posts/一-走进HTML.md","raw":"---\ntitle: (一)走进HTML\ndate: 2022-07-08 17:04:11\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.php.cn%2Fupload%2Farticle%2F000%2F000%2F029%2F5de09308e9912367.jpg&refer=http%3A%2F%2Fimg.php.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659868948&t=32927ec46d42bc175fbc4ba757b64c70\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\n 走进HTML\n<!--more-->\n## HTML的开发环境和运行环境\n\nHTML本质上就是一个文档，市面上常见的一些简单的文本编辑器都是可以用来开发HTML，编辑之后只需将后缀修改为\".html\"即可 如：记事本，EditPlus等\n\n前端开发也有众多专业的开发软件，如：Webstrom，Sublime Text，Dreamweaver，HBuilder等，本书主要以webstrom为主要开发软件\n\nHTML运行环境即各种浏览器，如:IE，edge，Chrome，Firefox，Safari等均可作为HTML的运行环境\n\n\n\n## HTML文档结构\n\nHTML文档有明确的文档结构，包含三个部分：\\<HTML>中包含\\<head>...\\</head>部分和\\<body>...\\</body>部分\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n\n\n## Hello World\n\n1. 创建html文件，并键入如下代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>我的第一个网页</title>\n</head>\n<body>\n    Hello World\n</body>\n</html>\n```\n\n\n\n## 元素\n\nHTML文档由HTML元素定义，一个基本元素由“开始标签”，“元素内容”，“结束标签”构成\n\n## 块级标签和行级标签\n\nHTML中，所有标签都是预定义的，也就是说所有的标签都有各自的特点属性，根据这些特点可将标签分为块级标签和行级标签两类\n\n#### 块级标签\n\n块级标签编译后在浏览器中默认没有高度，其高度由其添加的内容决定，其宽度默认为屏幕宽度，也就是说块级标签默认占一行\n\n#### 行级标签\n\n行级标签编译后在浏览器中默认没有宽度和高度，其宽高均有添加的内容决定，也就是说行级标签在其内容不满一行时不会换行\n\n\n\n## HTML常用标签\n\n#### 常用的块级标签\n\n- 标题标签\n\n- - 标题（Heading）通过\\<h1>....\\<h6>标签定义，表示一级标题至六级标题，其中\\<h1>最大，\\<h6>最小\n\n  - 标题标签只用于标题\n\n  - 标题标签不单单用于字体放大加粗，更多的是为搜索引擎使用标题帮助网页索引\n  ```html\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>标题标签</title>\n\t\t</head>\n\t\t<body>\n\t\t<h1>一级标题</h1>\n\t\t<h2>二级标题</h2>\n\t\t<h3>三级标题</h3>\n\t\t<h4>四级标题</h4>\n\t\t<h5>五级标题</h5>\n\t\t<h6>六级标题</h6>\n\t\t</body>\n  ```\n\n- 段落标签\n\n- - 段落通过\\<p>...\\</p>标签定义，表示文档中的一个自然段\n  - 注：段落标签不能嵌套使用，若想要段落标签中的内容换行显示可使用\\<br/>标签换行\n  ```html\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Title</title>\n\t</head>\n\t<body>\n\t<p>\n\t面朝大海，春暖花开<br/>\n\t作者: 海子\n\t</p>\n\t<p>从明天起，做一个幸福的人</p>\n\t<p>喂马，劈柴，周游世界</p>\n\t<p>从明天起，关心粮食和蔬菜</p>\n\t<p>我有一所房子，面朝大海，春暖花开</p>\n\t<p>从明天起，和每一个亲人通信</p>\n\t<p>告诉他们我的幸福</p>\n\t<p>那幸福的闪电告诉我的</p>\n\t<p>我将告诉每一个人</p>\n\t<p>给每一条河每一座山取一个温暖的名字</p>\n\t<p>陌生人，我也为你祝福</p>\n\t<p>愿你有一个灿烂的前程</p>\n\t<p>愿你有情人终成眷属</p>\n\t<p>愿你在尘世获得幸福</p>\n\t<p>我只愿面朝大海，春暖花开</p>\n</body>\n</html>\n  \n  ```\n\n- div标签\n\n- - div标签用于定义文档中的分区或节\n  - 可以把文档分割为独立的，不同的部分\n  - 在后期通过学习样式表，div可以与CSS配合对整个网页进行页面布局，模块划分，让网页制作不再有难度\n  - div若不带样式单独使用则与段落标签\\<p>相似，没有特定的含义\n\n- - div若不带样式单独使用则与段落标签\\<p>相似，没有特定的含义\n\n代码\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>无序列表</title>\n</head>\n<body>\n    <div>\n  \t\t这是div标签，用于页面划分页面布局\n  \t</div>\n</body>\n</html>\n```\n\n- 无序列表\n\n- - 列表可以结合链接标签用来定义新闻标题等一些较为常用的标题类链接\n\n  - 无序列表使用\\<ul>定义列表，\\<li>定义列表中的条目，默认此列项目使用黑色小圆点进行标记\n\n  - 通过在\\<ul>中添加type属性更改列表的展示标记，其中disc表示实心圆，square表示矩形显示，circle表示空心圆\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>无序列表</title>\n    </head>\n    <body>\n        <ul>\n            <li>热烈庆祝xxx同学高薪就业</li>\n            <li>热烈庆祝xxx同学高薪就业</li>\n        </ul>\n        <ul type=\"square\">\n            <li>热烈庆祝xxx同学高薪就业</li>\n            <li>热烈庆祝xxx同学高薪就业</li>\n        </ul>\n        <ul type=\"circle\">\n            <li>热烈庆祝xxx同学高薪就业</li>\n            <li>热烈庆祝xxx同学高薪就业</li>\n        </ul>\n    </body>\n    </html>\n    ```\n\n- 有序列表\n\n- - 有序列表使用\\<ol>定义列表，\\<li>定义列表中的条目，默认此列项目使用阿拉伯数字进行标记\n\n  - 通过在\\<ol>中添加type属性更改列表的展示标记，其中‘A’表示大写字母，‘a’表示小写字母，‘I’表示大写罗马数字，‘i’表示小写罗马数字，‘1’表示阿拉伯数字（默认）\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>有序列表</title>\n    </head>\n    <body>\n        <h3>工作流程</h3>\n        <ol>\n            <li>每日晨会，任务分配</li>\n            <li>工作任务</li>\n            <li>工作日报</li>\n            <li>下班回家</li>\n        </ol>\n        <ol type=\"A\">\n              <li>每日晨会，任务分配</li>\n              <li>工作任务</li>\n              <li>工作日报</li>\n              <li>下班回家</li>\n        </ol>\n        <ol type=\"a\">\n              <li>每日晨会，任务分配</li>\n              <li>工作任务</li>\n              <li>工作日报</li>\n              <li>下班回家</li>\n        </ol>\n        <ol type=\"I\">\n              <li>每日晨会，任务分配</li>\n              <li>工作任务</li>\n              <li>工作日报</li>\n              <li>下班回家</li>\n        </ol>\n        <ol type=\"i\">\n              <li>每日晨会，任务分配</li>\n              <li>工作任务</li>\n              <li>工作日报</li>\n              <li>下班回家</li>\n         </ol>\n    </body>\n    </html>\n    ```\n\n- 自定义列表\n\n- - 使用\\<dl>定义列表，\\<dt>定义列表中的项目，\\<dd>定义列表条目\n\n  - 自定义列表不单单只用了区分项目，后期通过样式，标签嵌套可以胜任诸多任务，如：商城，外卖类网站商品的模块划分\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>自定义列表</title>\n    </head>\n    <body>\n        <dl>\n            <dt>pc端游戏</dt>\n            <dd>穿越火线</dd>\n            <dd>英雄联盟</dd>\n            <dd>CSGO</dd>\n            <dt>手机游戏</dt>\n            <dd>和平精英</dd>\n            <dd>王者荣耀</dd>\n            <dd>阴阳师</dd>\n        </dl>\n    </body>\n    </html>\n    ```\n\n- 嵌套列表\n\n- - 列表可以通过多层嵌套实现多级列表\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>嵌套列表</title>\n    </head>\n    <body>\n        <ul>\n            <li>茶\n                <ul>\n                    <li>白茶</li>\n                    <li>绿茶</li>\n                    <li>红茶</li>\n                </ul>\n            </li>\n            <li>咖啡\n                <ul>\n                    <li>拿铁</li>\n                    <li>卡布奇洛</li>\n                </ul>\n            </li>\n        </ul>\n    </body>\n    </html>\n    ```\n\n\n\n\n\n#### 常用的行级标签\n\n- 内联元素\n\n- - 使用\\<span>...\\<span>表示\n\n  - 单独使用没有特定的含义\n\n  - 当与CSS一同使用，用来组合文档中的行内元素，如：在一行文字中给某一个字单独设置样式，再或者在某行字中添加小图标\n\n    代码：\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>span</title>\n    </head>\n    <body>\n        <p>\n            <span style=\"font-size: 33px\">我</span>\n            最\n            <span style=\"font-size: 33px\">帅</span>\n        </p>\n    </body>\n    </html>\n    ```\n\n- 链接标签\n\n- - 使用\\<a href=\"url\">...\\</a>表示\n  - 用于从一个页面跳转到另一个页面\n  - href表示跳转的链接目标\n  - 默认情况下链接将以以下形式出现在网页中\n\n- - - 在未点击访问时链接字体程蓝色并带同色下划线\n    - 在点击后链接字体会程红色显示并带同色下划线\n\n- - 标签常用属性\n\t![img](https://s2.loli.net/2022/07/08/q4JpNFAyeStIfE5.png)\n\n- - 在网页开发中常用的链接有以下四种：\n\t![img](https://s2.loli.net/2022/07/08/SUz5vErMnaX4HFx.png)\n\n附：\n\n空链接“#”与“javascript:void(0)”的区别：\n\n1. “#”包含一个位置信息，默认为网页顶端，当页面高度大于一屏时，点击后会跳转到网页顶部\n2. “javascript:void(0)”是一个伪协议，表示url内容通过javascript执行，而void(0)则表示不作任何操作，这样该标签既保留了链接样式还能防止页面跳转\n3. 空链接通常通过添加javascript事件去做一些其它操作，如：设置收藏，设置首页，弹窗等，这些会在本书javascript事件章节详细讲解\n\n附：\n\n绝对路径和相对路径\n\n绝对路径：是指文件在硬盘上的真正存在的路径，如：一张名为“头像.jpg”的图片或一个名为“index.html”的网页存放在我计算机中的“C:\\Users\\document\\WebstormProjects\\untitled15”目录中，则图片的绝对路径为“C:\\Users\\document\\WebstormProjects\\untitled15\\头像.jpg”，网页的绝对路径为“C:\\Users\\document\\WebstormProjects\\untitled15\\index.html”，但在开发时很少使用绝对路径，当指定了决定路径后在项目路径在本地计算机上是没问题的，但上传到服务器或在其它计算机上时很可能会出现找不到路径，路径错误等问题。\n\n相对路径：指由文件本身相对于目标文件的路径，使用相对路径的三种写法，下边以网页index.html引用网页Login.html为例说明：\n\n1.若Login.html相对index.html是在同一目录，那么网页在引用图片时则只需要通过Login.html名称+后缀引用即可\n\n2.若网页Login.html存在某个文件夹中，文件夹与网页index.html属于同一目录，那么网页index.html在引用网页Login.html时则需要通过找到文件夹使用分隔符“/”才能找到文件夹中相对的网页Login.html文件，这里需要注意：绝对路径使用分隔符“\\”，相对路径使用分隔符“/”\n\n3.若网页index.html和网页Login.html都存在不同的文件夹中，两个不同的文件夹属于同一目录，那么网页index.html在引用网页Login.html时则需要通过“../”返回上一级路径再去引用存放网页Login.html的文件夹再使用分隔符“/”引用网页Login.html，这里需要注意一个“../”，表示网上返回一级，如果要返回多个则需要使用多个“../”\n\n```\n\n锚链接示例代码：\n\t```html\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Title</title>\n\t</head>\n\t<body>\n\t<a id=\"top\">这是网页顶部</a>\n\t<a href=\"#middle\">跳转至网页中部</a>\n    <a href=\"#bottom\">跳转至网页底部</a>\n    <p>网页内容</p>\n    <p>....</p>\n    <p>这里省略若干行相同内容</p>\n    <a id=\"middle\">这是网页中部</a>\n    <a href=\"#top\">跳转至网页顶部</a>\n    <a href=\"#bottom\">跳转至网页底部</a>\n    <p>网页内容</p>\n    <p>....</p>\n    <p>这里省略若干行相同内容</p>\n    <a href=\"#middle\">跳转至网页中部</a>\n    <a href=\"#top\">跳转至网页顶部</a>\n    <a id=\"bottom\">这是网页底部</a>\n</body>\n</html>\n```\n附：\n1. 锚链接是在页面内的不同位置跳转，本质上就是元素间的跳转\n2. 使用锚链接首先要建立锚点目标，只需要给元素添加id或name属性即可 如：\\<a name=\"top\">,\\<div id=\"top\">\n3. 建立好锚点目标后再使用\\<a href=\"#id值或name值\">引用锚点\n4. 如果不同页面跳转，同时存在锚点，则先跳转到要跳转的页面，然后在寻找锚点元素进行跳转\n\n\n\n```html\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>首页</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<a href=\"demo.html#bottom\">走你</a>\n\t\t</body>\n\t\t</html>\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>测试页</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<p>这是内容</p>\n\t\t\t<p>.....</p>\n\t\t\t<p>此时省略若干行相同内容</p>\n\t\t\t<p>这是内容</p>\n\t\t\t<div id=\"bottom\"></div>\n\t\t</body>\n\t\t</html>\n```\n\n\n- 图片标签\n\n- - 图片标签使用\\<img/>表示，图片标签没有结束标签“/”表示结束\n  - 标签属性\n  \t![img](https://s2.loli.net/2022/07/08/YRABTNJk15doKQi.png)\n\n  代码：\n\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"UTF-8\">\n      <title>图片标签</title>\n  </head>\n  <body>\n      <img src=\"F.jpg\" alt=\"这是替换文本\" title=\"这是一张图片\" width=\"600\" height=\"406\">\n  </body>\n  </html>\n  ```\n```\n\n\n\n- 图片增强（map）\n\n- - \\<map>标签有助于定义图像映射。图像映射指的是图像中包含一个或多个可点击区域。\\<map>标签与\\<area>标签一起确定可点击区域。可点击区域可以是矩形、圆形或多边形区域这些形状之一。如果不指定形状，就会认为是整个图像\n\n    示例\n\n    ```html\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n    </head>\n    <body>\n        <div>\n            <img src=\"../images/mapImages/4.png\" width=\"592\" height=\"182\" alt=\"mapSelect\" usemap=\"#circusmap\">\n            <map name=\"circusmap\">\n                <area shape=\"rect\" coords=\"82,70,155,133\" href=\"map2.html\">\n                <area shape=\"rect\" coords=\"297,70,387, 133\" href=\"map1.html\">\n                <area shape=\"rect\" coords=\"480,70,572, 133\" href=\"map3.html\">\n            </map>\n        </div>\n    </body>\n    </html>\n```\n\n\n知识补充：\n\n- \\<area>标签定义图像映射中的区域\n\n  ​\tshape属性 \n\n  ​     \t\tshape属性用于定义图像映射中对鼠标敏感的区域的形状\n\n  ​\t\t\t\t\t圆形（circ或circle）\n\n  ​\t\t\t\t\t多边形（poly或polygon）\n\n  ​\t\t\t\t\t矩形（rect或rectangle）\n\n  ​\tcoords属性\n\n  ​\t\t\t\t\t圆形：shape=\"circle\"，coords=\"x,y,z\"\n\n  ​\t\t\t\t\t这里的 x 和 y 定义了圆心的位置（\"0,0\" 是图像左上角的坐标），z 是以像素为单位的圆形半径。\n\n  ​\t\t\t\t\t多边形：shape=\"polygon\"，coords=\"x1,y1,x2,y2,x3,y3,...\"\n\n  ​\t\t\t\t\t每一对 \"x,y\" 坐标都定义了多边形的一个顶点（\"0,0\" 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。\n\n  ​\t\t\t\t\t多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。\n\n  ​\t\t\t\t\t矩形：shape=\"rectangle\"，coords=\"x1,y1,x2,y2\"\n\n  ​\t\t\t\t\t第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，\"0,0\" 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。\n\n- 常用文本格式化标签\n  ![img](https://s2.loli.net/2022/07/08/obBW4smqSA1EpVL.png)\n\n  代码：\n  ```html\n  <!DOCTYPE HTML>\n  <head>\n  <meta charset=\"utf-8\">\n  </head>\n  <body>\n  <b>定义粗体文本</b>\n  <br/>\n  <em>定义着重文字</em>\n  <br/>\n  <i>定义斜体文字</i>\n    <br/>\n  <small>定义小号文字</small>\n  <br/>\n  <strong>定义加重语气</strong>\n  <br/>\n  定义下标字 <sub>aa</sub>\n  <br/>\n  定义上标字 <sup>aa</sup>\n  <br/>\n  <ins>定义插入字(加了下划线)</ins>\n  <br/>\n  <del>定义删除字(加了删除线)</del>\n  </body>\n  ```\n","slug":"一-走进HTML","published":1,"updated":"2022-07-09T00:00:33.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5hmbtlt000i2cuj8suieqnr","content":"<p> 走进HTML</p>\n<span id=\"more\"></span>\n<h2 id=\"HTML的开发环境和运行环境\"><a href=\"#HTML的开发环境和运行环境\" class=\"headerlink\" title=\"HTML的开发环境和运行环境\"></a>HTML的开发环境和运行环境</h2><p>HTML本质上就是一个文档，市面上常见的一些简单的文本编辑器都是可以用来开发HTML，编辑之后只需将后缀修改为”.html”即可 如：记事本，EditPlus等</p>\n<p>前端开发也有众多专业的开发软件，如：Webstrom，Sublime Text，Dreamweaver，HBuilder等，本书主要以webstrom为主要开发软件</p>\n<p>HTML运行环境即各种浏览器，如:IE，edge，Chrome，Firefox，Safari等均可作为HTML的运行环境</p>\n<h2 id=\"HTML文档结构\"><a href=\"#HTML文档结构\" class=\"headerlink\" title=\"HTML文档结构\"></a>HTML文档结构</h2><p>HTML文档有明确的文档结构，包含三个部分：&lt;HTML&gt;中包含&lt;head&gt;…&lt;/head&gt;部分和&lt;body&gt;…&lt;/body&gt;部分</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ol>\n<li>创建html文件，并键入如下代码：</li>\n</ol>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;我的第一个网页&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    Hello World\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"元素\"><a href=\"#元素\" class=\"headerlink\" title=\"元素\"></a>元素</h2><p>HTML文档由HTML元素定义，一个基本元素由“开始标签”，“元素内容”，“结束标签”构成</p>\n<h2 id=\"块级标签和行级标签\"><a href=\"#块级标签和行级标签\" class=\"headerlink\" title=\"块级标签和行级标签\"></a>块级标签和行级标签</h2><p>HTML中，所有标签都是预定义的，也就是说所有的标签都有各自的特点属性，根据这些特点可将标签分为块级标签和行级标签两类</p>\n<h4 id=\"块级标签\"><a href=\"#块级标签\" class=\"headerlink\" title=\"块级标签\"></a>块级标签</h4><p>块级标签编译后在浏览器中默认没有高度，其高度由其添加的内容决定，其宽度默认为屏幕宽度，也就是说块级标签默认占一行</p>\n<h4 id=\"行级标签\"><a href=\"#行级标签\" class=\"headerlink\" title=\"行级标签\"></a>行级标签</h4><p>行级标签编译后在浏览器中默认没有宽度和高度，其宽高均有添加的内容决定，也就是说行级标签在其内容不满一行时不会换行</p>\n<h2 id=\"HTML常用标签\"><a href=\"#HTML常用标签\" class=\"headerlink\" title=\"HTML常用标签\"></a>HTML常用标签</h2><h4 id=\"常用的块级标签\"><a href=\"#常用的块级标签\" class=\"headerlink\" title=\"常用的块级标签\"></a>常用的块级标签</h4><ul>\n<li><p>标题标签</p>\n</li>\n<li><ul>\n<li><p>标题（Heading）通过&lt;h1&gt;….&lt;h6&gt;标签定义，表示一级标题至六级标题，其中&lt;h1&gt;最大，&lt;h6&gt;最小</p>\n</li>\n<li><p>标题标签只用于标题</p>\n</li>\n<li><p>标题标签不单单用于字体放大加粗，更多的是为搜索引擎使用标题帮助网页索引</p>\n<pre><code class=\"html\">    &lt;!DOCTYPE html&gt;\n    &lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;标题标签&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;h1&gt;一级标题&lt;/h1&gt;\n    &lt;h2&gt;二级标题&lt;/h2&gt;\n    &lt;h3&gt;三级标题&lt;/h3&gt;\n    &lt;h4&gt;四级标题&lt;/h4&gt;\n    &lt;h5&gt;五级标题&lt;/h5&gt;\n    &lt;h6&gt;六级标题&lt;/h6&gt;\n    &lt;/body&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>段落标签</p>\n</li>\n<li><ul>\n<li>段落通过&lt;p&gt;…&lt;/p&gt;标签定义，表示文档中的一个自然段</li>\n<li>注：段落标签不能嵌套使用，若想要段落标签中的内容换行显示可使用&lt;br/&gt;标签换行<br>```html<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Title</title>\n</head>\n<body>\n<p>\n面朝大海，春暖花开<br/>\n作者: 海子\n</p>\n<p>从明天起，做一个幸福的人</p>\n<p>喂马，劈柴，周游世界</p>\n<p>从明天起，关心粮食和蔬菜</p>\n<p>我有一所房子，面朝大海，春暖花开</p>\n<p>从明天起，和每一个亲人通信</p>\n<p>告诉他们我的幸福</p>\n<p>那幸福的闪电告诉我的</p>\n<p>我将告诉每一个人</p>\n<p>给每一条河每一座山取一个温暖的名字</p>\n<p>陌生人，我也为你祝福</p>\n<p>愿你有一个灿烂的前程</p>\n<p>愿你有情人终成眷属</p>\n<p>愿你在尘世获得幸福</p>\n<p>我只愿面朝大海，春暖花开</p>\n</body>\n</html></li>\n</ul>\n<p>```</p>\n</li>\n<li><p>div标签</p>\n</li>\n<li><ul>\n<li>div标签用于定义文档中的分区或节</li>\n<li>可以把文档分割为独立的，不同的部分</li>\n<li>在后期通过学习样式表，div可以与CSS配合对整个网页进行页面布局，模块划分，让网页制作不再有难度</li>\n<li>div若不带样式单独使用则与段落标签&lt;p&gt;相似，没有特定的含义</li>\n</ul>\n</li>\n<li><ul>\n<li>div若不带样式单独使用则与段落标签&lt;p&gt;相似，没有特定的含义</li>\n</ul>\n</li>\n</ul>\n<p>代码</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;无序列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;\n          这是div标签，用于页面划分页面布局\n      &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>无序列表</p>\n</li>\n<li><ul>\n<li><p>列表可以结合链接标签用来定义新闻标题等一些较为常用的标题类链接</p>\n</li>\n<li><p>无序列表使用&lt;ul&gt;定义列表，&lt;li&gt;定义列表中的条目，默认此列项目使用黑色小圆点进行标记</p>\n</li>\n<li><p>通过在&lt;ul&gt;中添加type属性更改列表的展示标记，其中disc表示实心圆，square表示矩形显示，circle表示空心圆</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;无序列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ul type=&quot;square&quot;&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ul type=&quot;circle&quot;&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>有序列表</p>\n</li>\n<li><ul>\n<li><p>有序列表使用&lt;ol&gt;定义列表，&lt;li&gt;定义列表中的条目，默认此列项目使用阿拉伯数字进行标记</p>\n</li>\n<li><p>通过在&lt;ol&gt;中添加type属性更改列表的展示标记，其中‘A’表示大写字母，‘a’表示小写字母，‘I’表示大写罗马数字，‘i’表示小写罗马数字，‘1’表示阿拉伯数字（默认）</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;有序列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h3&gt;工作流程&lt;/h3&gt;\n    &lt;ol&gt;\n        &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n        &lt;li&gt;工作任务&lt;/li&gt;\n        &lt;li&gt;工作日报&lt;/li&gt;\n        &lt;li&gt;下班回家&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;ol type=&quot;A&quot;&gt;\n          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n          &lt;li&gt;工作任务&lt;/li&gt;\n          &lt;li&gt;工作日报&lt;/li&gt;\n          &lt;li&gt;下班回家&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;ol type=&quot;a&quot;&gt;\n          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n          &lt;li&gt;工作任务&lt;/li&gt;\n          &lt;li&gt;工作日报&lt;/li&gt;\n          &lt;li&gt;下班回家&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;ol type=&quot;I&quot;&gt;\n          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n          &lt;li&gt;工作任务&lt;/li&gt;\n          &lt;li&gt;工作日报&lt;/li&gt;\n          &lt;li&gt;下班回家&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;ol type=&quot;i&quot;&gt;\n          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n          &lt;li&gt;工作任务&lt;/li&gt;\n          &lt;li&gt;工作日报&lt;/li&gt;\n          &lt;li&gt;下班回家&lt;/li&gt;\n     &lt;/ol&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>自定义列表</p>\n</li>\n<li><ul>\n<li><p>使用&lt;dl&gt;定义列表，&lt;dt&gt;定义列表中的项目，&lt;dd&gt;定义列表条目</p>\n</li>\n<li><p>自定义列表不单单只用了区分项目，后期通过样式，标签嵌套可以胜任诸多任务，如：商城，外卖类网站商品的模块划分</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;自定义列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;dl&gt;\n        &lt;dt&gt;pc端游戏&lt;/dt&gt;\n        &lt;dd&gt;穿越火线&lt;/dd&gt;\n        &lt;dd&gt;英雄联盟&lt;/dd&gt;\n        &lt;dd&gt;CSGO&lt;/dd&gt;\n        &lt;dt&gt;手机游戏&lt;/dt&gt;\n        &lt;dd&gt;和平精英&lt;/dd&gt;\n        &lt;dd&gt;王者荣耀&lt;/dd&gt;\n        &lt;dd&gt;阴阳师&lt;/dd&gt;\n    &lt;/dl&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>嵌套列表</p>\n</li>\n<li><ul>\n<li><p>列表可以通过多层嵌套实现多级列表</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;嵌套列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n        &lt;li&gt;茶\n            &lt;ul&gt;\n                &lt;li&gt;白茶&lt;/li&gt;\n                &lt;li&gt;绿茶&lt;/li&gt;\n                &lt;li&gt;红茶&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;咖啡\n            &lt;ul&gt;\n                &lt;li&gt;拿铁&lt;/li&gt;\n                &lt;li&gt;卡布奇洛&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"常用的行级标签\"><a href=\"#常用的行级标签\" class=\"headerlink\" title=\"常用的行级标签\"></a>常用的行级标签</h4><ul>\n<li><p>内联元素</p>\n</li>\n<li><ul>\n<li><p>使用&lt;span&gt;…&lt;span&gt;表示</p>\n</li>\n<li><p>单独使用没有特定的含义</p>\n</li>\n<li><p>当与CSS一同使用，用来组合文档中的行内元素，如：在一行文字中给某一个字单独设置样式，再或者在某行字中添加小图标</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;span&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;\n        &lt;span style=&quot;font-size: 33px&quot;&gt;我&lt;/span&gt;\n        最\n        &lt;span style=&quot;font-size: 33px&quot;&gt;帅&lt;/span&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>链接标签</p>\n</li>\n<li><ul>\n<li>使用&lt;a href=”url”&gt;…&lt;/a&gt;表示</li>\n<li>用于从一个页面跳转到另一个页面</li>\n<li>href表示跳转的链接目标</li>\n<li>默认情况下链接将以以下形式出现在网页中</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在未点击访问时链接字体程蓝色并带同色下划线</li>\n<li>在点击后链接字体会程红色显示并带同色下划线</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>标签常用属性<br><img src=\"https://s2.loli.net/2022/07/08/q4JpNFAyeStIfE5.png\" alt=\"img\"></li>\n</ul>\n</li>\n<li><ul>\n<li>在网页开发中常用的链接有以下四种：<br><img src=\"https://s2.loli.net/2022/07/08/SUz5vErMnaX4HFx.png\" alt=\"img\"></li>\n</ul>\n</li>\n</ul>\n<p>附：</p>\n<p>空链接“#”与“javascript:void(0)”的区别：</p>\n<ol>\n<li>“#”包含一个位置信息，默认为网页顶端，当页面高度大于一屏时，点击后会跳转到网页顶部</li>\n<li>“javascript:void(0)”是一个伪协议，表示url内容通过javascript执行，而void(0)则表示不作任何操作，这样该标签既保留了链接样式还能防止页面跳转</li>\n<li>空链接通常通过添加javascript事件去做一些其它操作，如：设置收藏，设置首页，弹窗等，这些会在本书javascript事件章节详细讲解</li>\n</ol>\n<p>附：</p>\n<p>绝对路径和相对路径</p>\n<p>绝对路径：是指文件在硬盘上的真正存在的路径，如：一张名为“头像.jpg”的图片或一个名为“index.html”的网页存放在我计算机中的“C:\\Users\\document\\WebstormProjects\\untitled15”目录中，则图片的绝对路径为“C:\\Users\\document\\WebstormProjects\\untitled15\\头像.jpg”，网页的绝对路径为“C:\\Users\\document\\WebstormProjects\\untitled15\\index.html”，但在开发时很少使用绝对路径，当指定了决定路径后在项目路径在本地计算机上是没问题的，但上传到服务器或在其它计算机上时很可能会出现找不到路径，路径错误等问题。</p>\n<p>相对路径：指由文件本身相对于目标文件的路径，使用相对路径的三种写法，下边以网页index.html引用网页Login.html为例说明：</p>\n<p>1.若Login.html相对index.html是在同一目录，那么网页在引用图片时则只需要通过Login.html名称+后缀引用即可</p>\n<p>2.若网页Login.html存在某个文件夹中，文件夹与网页index.html属于同一目录，那么网页index.html在引用网页Login.html时则需要通过找到文件夹使用分隔符“/”才能找到文件夹中相对的网页Login.html文件，这里需要注意：绝对路径使用分隔符“\\”，相对路径使用分隔符“/”</p>\n<p>3.若网页index.html和网页Login.html都存在不同的文件夹中，两个不同的文件夹属于同一目录，那么网页index.html在引用网页Login.html时则需要通过“../”返回上一级路径再去引用存放网页Login.html的文件夹再使用分隔符“/”引用网页Login.html，这里需要注意一个“../”，表示网上返回一级，如果要返回多个则需要使用多个“../”</p>\n<pre><code>\n锚链接示例代码：\n    ```html\n    &lt;!DOCTYPE html&gt;\n    &lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;a id=&quot;top&quot;&gt;这是网页顶部&lt;/a&gt;\n    &lt;a href=&quot;#middle&quot;&gt;跳转至网页中部&lt;/a&gt;\n    &lt;a href=&quot;#bottom&quot;&gt;跳转至网页底部&lt;/a&gt;\n    &lt;p&gt;网页内容&lt;/p&gt;\n    &lt;p&gt;....&lt;/p&gt;\n    &lt;p&gt;这里省略若干行相同内容&lt;/p&gt;\n    &lt;a id=&quot;middle&quot;&gt;这是网页中部&lt;/a&gt;\n    &lt;a href=&quot;#top&quot;&gt;跳转至网页顶部&lt;/a&gt;\n    &lt;a href=&quot;#bottom&quot;&gt;跳转至网页底部&lt;/a&gt;\n    &lt;p&gt;网页内容&lt;/p&gt;\n    &lt;p&gt;....&lt;/p&gt;\n    &lt;p&gt;这里省略若干行相同内容&lt;/p&gt;\n    &lt;a href=&quot;#middle&quot;&gt;跳转至网页中部&lt;/a&gt;\n    &lt;a href=&quot;#top&quot;&gt;跳转至网页顶部&lt;/a&gt;\n    &lt;a id=&quot;bottom&quot;&gt;这是网页底部&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>附：</p>\n<ol>\n<li>锚链接是在页面内的不同位置跳转，本质上就是元素间的跳转</li>\n<li>使用锚链接首先要建立锚点目标，只需要给元素添加id或name属性即可 如：&lt;a name=”top”&gt;,&lt;div id=”top”&gt;</li>\n<li>建立好锚点目标后再使用&lt;a href=”#id值或name值”&gt;引用锚点</li>\n<li>如果不同页面跳转，同时存在锚点，则先跳转到要跳转的页面，然后在寻找锚点元素进行跳转</li>\n</ol>\n<pre><code class=\"html\">        &lt;!DOCTYPE html&gt;\n        &lt;html lang=&quot;en&quot;&gt;\n        &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;title&gt;首页&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;a href=&quot;demo.html#bottom&quot;&gt;走你&lt;/a&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n        &lt;!DOCTYPE html&gt;\n        &lt;html lang=&quot;en&quot;&gt;\n        &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;title&gt;测试页&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;p&gt;这是内容&lt;/p&gt;\n            &lt;p&gt;.....&lt;/p&gt;\n            &lt;p&gt;此时省略若干行相同内容&lt;/p&gt;\n            &lt;p&gt;这是内容&lt;/p&gt;\n            &lt;div id=&quot;bottom&quot;&gt;&lt;/div&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>图片标签</p>\n</li>\n<li><ul>\n<li>图片标签使用&lt;img/&gt;表示，图片标签没有结束标签“/”表示结束</li>\n<li>标签属性<br>  <img src=\"https://s2.loli.net/2022/07/08/YRABTNJk15doKQi.png\" alt=\"img\"></li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;图片标签&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=&quot;F.jpg&quot; alt=&quot;这是替换文本&quot; title=&quot;这是一张图片&quot; width=&quot;600&quot; height=&quot;406&quot;&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>```</p>\n</li>\n</ul>\n<ul>\n<li><p>图片增强（map）</p>\n</li>\n<li><ul>\n<li><p>&lt;map&gt;标签有助于定义图像映射。图像映射指的是图像中包含一个或多个可点击区域。&lt;map&gt;标签与&lt;area&gt;标签一起确定可点击区域。可点击区域可以是矩形、圆形或多边形区域这些形状之一。如果不指定形状，就会认为是整个图像</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;\n        &lt;img src=&quot;../images/mapImages/4.png&quot; width=&quot;592&quot; height=&quot;182&quot; alt=&quot;mapSelect&quot; usemap=&quot;#circusmap&quot;&gt;\n        &lt;map name=&quot;circusmap&quot;&gt;\n            &lt;area shape=&quot;rect&quot; coords=&quot;82,70,155,133&quot; href=&quot;map2.html&quot;&gt;\n            &lt;area shape=&quot;rect&quot; coords=&quot;297,70,387, 133&quot; href=&quot;map1.html&quot;&gt;\n            &lt;area shape=&quot;rect&quot; coords=&quot;480,70,572, 133&quot; href=&quot;map3.html&quot;&gt;\n        &lt;/map&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>知识补充：</p>\n<ul>\n<li><p>&lt;area&gt;标签定义图像映射中的区域</p>\n<p>​    shape属性 </p>\n<p>​             shape属性用于定义图像映射中对鼠标敏感的区域的形状</p>\n<p>​                    圆形（circ或circle）</p>\n<p>​                    多边形（poly或polygon）</p>\n<p>​                    矩形（rect或rectangle）</p>\n<p>​    coords属性</p>\n<p>​                    圆形：shape=”circle”，coords=”x,y,z”</p>\n<p>​                    这里的 x 和 y 定义了圆心的位置（”0,0” 是图像左上角的坐标），z 是以像素为单位的圆形半径。</p>\n<p>​                    多边形：shape=”polygon”，coords=”x1,y1,x2,y2,x3,y3,…”</p>\n<p>​                    每一对 “x,y” 坐标都定义了多边形的一个顶点（”0,0” 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。</p>\n<p>​                    多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。</p>\n<p>​                    矩形：shape=”rectangle”，coords=”x1,y1,x2,y2”</p>\n<p>​                    第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，”0,0” 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。</p>\n</li>\n<li><p>常用文本格式化标签<br><img src=\"https://s2.loli.net/2022/07/08/obBW4smqSA1EpVL.png\" alt=\"img\"></p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE HTML&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;b&gt;定义粗体文本&lt;/b&gt;\n&lt;br/&gt;\n&lt;em&gt;定义着重文字&lt;/em&gt;\n&lt;br/&gt;\n&lt;i&gt;定义斜体文字&lt;/i&gt;\n  &lt;br/&gt;\n&lt;small&gt;定义小号文字&lt;/small&gt;\n&lt;br/&gt;\n&lt;strong&gt;定义加重语气&lt;/strong&gt;\n&lt;br/&gt;\n定义下标字 &lt;sub&gt;aa&lt;/sub&gt;\n&lt;br/&gt;\n定义上标字 &lt;sup&gt;aa&lt;/sup&gt;\n&lt;br/&gt;\n&lt;ins&gt;定义插入字(加了下划线)&lt;/ins&gt;\n&lt;br/&gt;\n&lt;del&gt;定义删除字(加了删除线)&lt;/del&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p> 走进HTML</p>","more":"<h2 id=\"HTML的开发环境和运行环境\"><a href=\"#HTML的开发环境和运行环境\" class=\"headerlink\" title=\"HTML的开发环境和运行环境\"></a>HTML的开发环境和运行环境</h2><p>HTML本质上就是一个文档，市面上常见的一些简单的文本编辑器都是可以用来开发HTML，编辑之后只需将后缀修改为”.html”即可 如：记事本，EditPlus等</p>\n<p>前端开发也有众多专业的开发软件，如：Webstrom，Sublime Text，Dreamweaver，HBuilder等，本书主要以webstrom为主要开发软件</p>\n<p>HTML运行环境即各种浏览器，如:IE，edge，Chrome，Firefox，Safari等均可作为HTML的运行环境</p>\n<h2 id=\"HTML文档结构\"><a href=\"#HTML文档结构\" class=\"headerlink\" title=\"HTML文档结构\"></a>HTML文档结构</h2><p>HTML文档有明确的文档结构，包含三个部分：&lt;HTML&gt;中包含&lt;head&gt;…&lt;/head&gt;部分和&lt;body&gt;…&lt;/body&gt;部分</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ol>\n<li>创建html文件，并键入如下代码：</li>\n</ol>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;我的第一个网页&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    Hello World\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"元素\"><a href=\"#元素\" class=\"headerlink\" title=\"元素\"></a>元素</h2><p>HTML文档由HTML元素定义，一个基本元素由“开始标签”，“元素内容”，“结束标签”构成</p>\n<h2 id=\"块级标签和行级标签\"><a href=\"#块级标签和行级标签\" class=\"headerlink\" title=\"块级标签和行级标签\"></a>块级标签和行级标签</h2><p>HTML中，所有标签都是预定义的，也就是说所有的标签都有各自的特点属性，根据这些特点可将标签分为块级标签和行级标签两类</p>\n<h4 id=\"块级标签\"><a href=\"#块级标签\" class=\"headerlink\" title=\"块级标签\"></a>块级标签</h4><p>块级标签编译后在浏览器中默认没有高度，其高度由其添加的内容决定，其宽度默认为屏幕宽度，也就是说块级标签默认占一行</p>\n<h4 id=\"行级标签\"><a href=\"#行级标签\" class=\"headerlink\" title=\"行级标签\"></a>行级标签</h4><p>行级标签编译后在浏览器中默认没有宽度和高度，其宽高均有添加的内容决定，也就是说行级标签在其内容不满一行时不会换行</p>\n<h2 id=\"HTML常用标签\"><a href=\"#HTML常用标签\" class=\"headerlink\" title=\"HTML常用标签\"></a>HTML常用标签</h2><h4 id=\"常用的块级标签\"><a href=\"#常用的块级标签\" class=\"headerlink\" title=\"常用的块级标签\"></a>常用的块级标签</h4><ul>\n<li><p>标题标签</p>\n</li>\n<li><ul>\n<li><p>标题（Heading）通过&lt;h1&gt;….&lt;h6&gt;标签定义，表示一级标题至六级标题，其中&lt;h1&gt;最大，&lt;h6&gt;最小</p>\n</li>\n<li><p>标题标签只用于标题</p>\n</li>\n<li><p>标题标签不单单用于字体放大加粗，更多的是为搜索引擎使用标题帮助网页索引</p>\n<pre><code class=\"html\">    &lt;!DOCTYPE html&gt;\n    &lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;标题标签&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;h1&gt;一级标题&lt;/h1&gt;\n    &lt;h2&gt;二级标题&lt;/h2&gt;\n    &lt;h3&gt;三级标题&lt;/h3&gt;\n    &lt;h4&gt;四级标题&lt;/h4&gt;\n    &lt;h5&gt;五级标题&lt;/h5&gt;\n    &lt;h6&gt;六级标题&lt;/h6&gt;\n    &lt;/body&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>段落标签</p>\n</li>\n<li><ul>\n<li>段落通过&lt;p&gt;…&lt;/p&gt;标签定义，表示文档中的一个自然段</li>\n<li>注：段落标签不能嵌套使用，若想要段落标签中的内容换行显示可使用&lt;br/&gt;标签换行<br>```html<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Title</title>\n</head>\n<body>\n<p>\n面朝大海，春暖花开<br/>\n作者: 海子\n</p>\n<p>从明天起，做一个幸福的人</p>\n<p>喂马，劈柴，周游世界</p>\n<p>从明天起，关心粮食和蔬菜</p>\n<p>我有一所房子，面朝大海，春暖花开</p>\n<p>从明天起，和每一个亲人通信</p>\n<p>告诉他们我的幸福</p>\n<p>那幸福的闪电告诉我的</p>\n<p>我将告诉每一个人</p>\n<p>给每一条河每一座山取一个温暖的名字</p>\n<p>陌生人，我也为你祝福</p>\n<p>愿你有一个灿烂的前程</p>\n<p>愿你有情人终成眷属</p>\n<p>愿你在尘世获得幸福</p>\n<p>我只愿面朝大海，春暖花开</p>\n</body>\n</html></li>\n</ul>\n<p>```</p>\n</li>\n<li><p>div标签</p>\n</li>\n<li><ul>\n<li>div标签用于定义文档中的分区或节</li>\n<li>可以把文档分割为独立的，不同的部分</li>\n<li>在后期通过学习样式表，div可以与CSS配合对整个网页进行页面布局，模块划分，让网页制作不再有难度</li>\n<li>div若不带样式单独使用则与段落标签&lt;p&gt;相似，没有特定的含义</li>\n</ul>\n</li>\n<li><ul>\n<li>div若不带样式单独使用则与段落标签&lt;p&gt;相似，没有特定的含义</li>\n</ul>\n</li>\n</ul>\n<p>代码</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;无序列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;\n          这是div标签，用于页面划分页面布局\n      &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>无序列表</p>\n</li>\n<li><ul>\n<li><p>列表可以结合链接标签用来定义新闻标题等一些较为常用的标题类链接</p>\n</li>\n<li><p>无序列表使用&lt;ul&gt;定义列表，&lt;li&gt;定义列表中的条目，默认此列项目使用黑色小圆点进行标记</p>\n</li>\n<li><p>通过在&lt;ul&gt;中添加type属性更改列表的展示标记，其中disc表示实心圆，square表示矩形显示，circle表示空心圆</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;无序列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ul type=&quot;square&quot;&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ul type=&quot;circle&quot;&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>有序列表</p>\n</li>\n<li><ul>\n<li><p>有序列表使用&lt;ol&gt;定义列表，&lt;li&gt;定义列表中的条目，默认此列项目使用阿拉伯数字进行标记</p>\n</li>\n<li><p>通过在&lt;ol&gt;中添加type属性更改列表的展示标记，其中‘A’表示大写字母，‘a’表示小写字母，‘I’表示大写罗马数字，‘i’表示小写罗马数字，‘1’表示阿拉伯数字（默认）</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;有序列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h3&gt;工作流程&lt;/h3&gt;\n    &lt;ol&gt;\n        &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n        &lt;li&gt;工作任务&lt;/li&gt;\n        &lt;li&gt;工作日报&lt;/li&gt;\n        &lt;li&gt;下班回家&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;ol type=&quot;A&quot;&gt;\n          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n          &lt;li&gt;工作任务&lt;/li&gt;\n          &lt;li&gt;工作日报&lt;/li&gt;\n          &lt;li&gt;下班回家&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;ol type=&quot;a&quot;&gt;\n          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n          &lt;li&gt;工作任务&lt;/li&gt;\n          &lt;li&gt;工作日报&lt;/li&gt;\n          &lt;li&gt;下班回家&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;ol type=&quot;I&quot;&gt;\n          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n          &lt;li&gt;工作任务&lt;/li&gt;\n          &lt;li&gt;工作日报&lt;/li&gt;\n          &lt;li&gt;下班回家&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;ol type=&quot;i&quot;&gt;\n          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;\n          &lt;li&gt;工作任务&lt;/li&gt;\n          &lt;li&gt;工作日报&lt;/li&gt;\n          &lt;li&gt;下班回家&lt;/li&gt;\n     &lt;/ol&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>自定义列表</p>\n</li>\n<li><ul>\n<li><p>使用&lt;dl&gt;定义列表，&lt;dt&gt;定义列表中的项目，&lt;dd&gt;定义列表条目</p>\n</li>\n<li><p>自定义列表不单单只用了区分项目，后期通过样式，标签嵌套可以胜任诸多任务，如：商城，外卖类网站商品的模块划分</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;自定义列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;dl&gt;\n        &lt;dt&gt;pc端游戏&lt;/dt&gt;\n        &lt;dd&gt;穿越火线&lt;/dd&gt;\n        &lt;dd&gt;英雄联盟&lt;/dd&gt;\n        &lt;dd&gt;CSGO&lt;/dd&gt;\n        &lt;dt&gt;手机游戏&lt;/dt&gt;\n        &lt;dd&gt;和平精英&lt;/dd&gt;\n        &lt;dd&gt;王者荣耀&lt;/dd&gt;\n        &lt;dd&gt;阴阳师&lt;/dd&gt;\n    &lt;/dl&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>嵌套列表</p>\n</li>\n<li><ul>\n<li><p>列表可以通过多层嵌套实现多级列表</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;嵌套列表&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n        &lt;li&gt;茶\n            &lt;ul&gt;\n                &lt;li&gt;白茶&lt;/li&gt;\n                &lt;li&gt;绿茶&lt;/li&gt;\n                &lt;li&gt;红茶&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;咖啡\n            &lt;ul&gt;\n                &lt;li&gt;拿铁&lt;/li&gt;\n                &lt;li&gt;卡布奇洛&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"常用的行级标签\"><a href=\"#常用的行级标签\" class=\"headerlink\" title=\"常用的行级标签\"></a>常用的行级标签</h4><ul>\n<li><p>内联元素</p>\n</li>\n<li><ul>\n<li><p>使用&lt;span&gt;…&lt;span&gt;表示</p>\n</li>\n<li><p>单独使用没有特定的含义</p>\n</li>\n<li><p>当与CSS一同使用，用来组合文档中的行内元素，如：在一行文字中给某一个字单独设置样式，再或者在某行字中添加小图标</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;span&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;\n        &lt;span style=&quot;font-size: 33px&quot;&gt;我&lt;/span&gt;\n        最\n        &lt;span style=&quot;font-size: 33px&quot;&gt;帅&lt;/span&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>链接标签</p>\n</li>\n<li><ul>\n<li>使用&lt;a href=”url”&gt;…&lt;/a&gt;表示</li>\n<li>用于从一个页面跳转到另一个页面</li>\n<li>href表示跳转的链接目标</li>\n<li>默认情况下链接将以以下形式出现在网页中</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在未点击访问时链接字体程蓝色并带同色下划线</li>\n<li>在点击后链接字体会程红色显示并带同色下划线</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>标签常用属性<br><img src=\"https://s2.loli.net/2022/07/08/q4JpNFAyeStIfE5.png\" alt=\"img\"></li>\n</ul>\n</li>\n<li><ul>\n<li>在网页开发中常用的链接有以下四种：<br><img src=\"https://s2.loli.net/2022/07/08/SUz5vErMnaX4HFx.png\" alt=\"img\"></li>\n</ul>\n</li>\n</ul>\n<p>附：</p>\n<p>空链接“#”与“javascript:void(0)”的区别：</p>\n<ol>\n<li>“#”包含一个位置信息，默认为网页顶端，当页面高度大于一屏时，点击后会跳转到网页顶部</li>\n<li>“javascript:void(0)”是一个伪协议，表示url内容通过javascript执行，而void(0)则表示不作任何操作，这样该标签既保留了链接样式还能防止页面跳转</li>\n<li>空链接通常通过添加javascript事件去做一些其它操作，如：设置收藏，设置首页，弹窗等，这些会在本书javascript事件章节详细讲解</li>\n</ol>\n<p>附：</p>\n<p>绝对路径和相对路径</p>\n<p>绝对路径：是指文件在硬盘上的真正存在的路径，如：一张名为“头像.jpg”的图片或一个名为“index.html”的网页存放在我计算机中的“C:\\Users\\document\\WebstormProjects\\untitled15”目录中，则图片的绝对路径为“C:\\Users\\document\\WebstormProjects\\untitled15\\头像.jpg”，网页的绝对路径为“C:\\Users\\document\\WebstormProjects\\untitled15\\index.html”，但在开发时很少使用绝对路径，当指定了决定路径后在项目路径在本地计算机上是没问题的，但上传到服务器或在其它计算机上时很可能会出现找不到路径，路径错误等问题。</p>\n<p>相对路径：指由文件本身相对于目标文件的路径，使用相对路径的三种写法，下边以网页index.html引用网页Login.html为例说明：</p>\n<p>1.若Login.html相对index.html是在同一目录，那么网页在引用图片时则只需要通过Login.html名称+后缀引用即可</p>\n<p>2.若网页Login.html存在某个文件夹中，文件夹与网页index.html属于同一目录，那么网页index.html在引用网页Login.html时则需要通过找到文件夹使用分隔符“/”才能找到文件夹中相对的网页Login.html文件，这里需要注意：绝对路径使用分隔符“\\”，相对路径使用分隔符“/”</p>\n<p>3.若网页index.html和网页Login.html都存在不同的文件夹中，两个不同的文件夹属于同一目录，那么网页index.html在引用网页Login.html时则需要通过“../”返回上一级路径再去引用存放网页Login.html的文件夹再使用分隔符“/”引用网页Login.html，这里需要注意一个“../”，表示网上返回一级，如果要返回多个则需要使用多个“../”</p>\n<pre><code>\n锚链接示例代码：\n    ```html\n    &lt;!DOCTYPE html&gt;\n    &lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;a id=&quot;top&quot;&gt;这是网页顶部&lt;/a&gt;\n    &lt;a href=&quot;#middle&quot;&gt;跳转至网页中部&lt;/a&gt;\n    &lt;a href=&quot;#bottom&quot;&gt;跳转至网页底部&lt;/a&gt;\n    &lt;p&gt;网页内容&lt;/p&gt;\n    &lt;p&gt;....&lt;/p&gt;\n    &lt;p&gt;这里省略若干行相同内容&lt;/p&gt;\n    &lt;a id=&quot;middle&quot;&gt;这是网页中部&lt;/a&gt;\n    &lt;a href=&quot;#top&quot;&gt;跳转至网页顶部&lt;/a&gt;\n    &lt;a href=&quot;#bottom&quot;&gt;跳转至网页底部&lt;/a&gt;\n    &lt;p&gt;网页内容&lt;/p&gt;\n    &lt;p&gt;....&lt;/p&gt;\n    &lt;p&gt;这里省略若干行相同内容&lt;/p&gt;\n    &lt;a href=&quot;#middle&quot;&gt;跳转至网页中部&lt;/a&gt;\n    &lt;a href=&quot;#top&quot;&gt;跳转至网页顶部&lt;/a&gt;\n    &lt;a id=&quot;bottom&quot;&gt;这是网页底部&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>附：</p>\n<ol>\n<li>锚链接是在页面内的不同位置跳转，本质上就是元素间的跳转</li>\n<li>使用锚链接首先要建立锚点目标，只需要给元素添加id或name属性即可 如：&lt;a name=”top”&gt;,&lt;div id=”top”&gt;</li>\n<li>建立好锚点目标后再使用&lt;a href=”#id值或name值”&gt;引用锚点</li>\n<li>如果不同页面跳转，同时存在锚点，则先跳转到要跳转的页面，然后在寻找锚点元素进行跳转</li>\n</ol>\n<pre><code class=\"html\">        &lt;!DOCTYPE html&gt;\n        &lt;html lang=&quot;en&quot;&gt;\n        &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;title&gt;首页&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;a href=&quot;demo.html#bottom&quot;&gt;走你&lt;/a&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n        &lt;!DOCTYPE html&gt;\n        &lt;html lang=&quot;en&quot;&gt;\n        &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;title&gt;测试页&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;p&gt;这是内容&lt;/p&gt;\n            &lt;p&gt;.....&lt;/p&gt;\n            &lt;p&gt;此时省略若干行相同内容&lt;/p&gt;\n            &lt;p&gt;这是内容&lt;/p&gt;\n            &lt;div id=&quot;bottom&quot;&gt;&lt;/div&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>图片标签</p>\n</li>\n<li><ul>\n<li>图片标签使用&lt;img/&gt;表示，图片标签没有结束标签“/”表示结束</li>\n<li>标签属性<br>  <img src=\"https://s2.loli.net/2022/07/08/YRABTNJk15doKQi.png\" alt=\"img\"></li>\n</ul>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;图片标签&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=&quot;F.jpg&quot; alt=&quot;这是替换文本&quot; title=&quot;这是一张图片&quot; width=&quot;600&quot; height=&quot;406&quot;&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>```</p>\n</li>\n</ul>\n<ul>\n<li><p>图片增强（map）</p>\n</li>\n<li><ul>\n<li><p>&lt;map&gt;标签有助于定义图像映射。图像映射指的是图像中包含一个或多个可点击区域。&lt;map&gt;标签与&lt;area&gt;标签一起确定可点击区域。可点击区域可以是矩形、圆形或多边形区域这些形状之一。如果不指定形状，就会认为是整个图像</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;\n        &lt;img src=&quot;../images/mapImages/4.png&quot; width=&quot;592&quot; height=&quot;182&quot; alt=&quot;mapSelect&quot; usemap=&quot;#circusmap&quot;&gt;\n        &lt;map name=&quot;circusmap&quot;&gt;\n            &lt;area shape=&quot;rect&quot; coords=&quot;82,70,155,133&quot; href=&quot;map2.html&quot;&gt;\n            &lt;area shape=&quot;rect&quot; coords=&quot;297,70,387, 133&quot; href=&quot;map1.html&quot;&gt;\n            &lt;area shape=&quot;rect&quot; coords=&quot;480,70,572, 133&quot; href=&quot;map3.html&quot;&gt;\n        &lt;/map&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>知识补充：</p>\n<ul>\n<li><p>&lt;area&gt;标签定义图像映射中的区域</p>\n<p>​    shape属性 </p>\n<p>​             shape属性用于定义图像映射中对鼠标敏感的区域的形状</p>\n<p>​                    圆形（circ或circle）</p>\n<p>​                    多边形（poly或polygon）</p>\n<p>​                    矩形（rect或rectangle）</p>\n<p>​    coords属性</p>\n<p>​                    圆形：shape=”circle”，coords=”x,y,z”</p>\n<p>​                    这里的 x 和 y 定义了圆心的位置（”0,0” 是图像左上角的坐标），z 是以像素为单位的圆形半径。</p>\n<p>​                    多边形：shape=”polygon”，coords=”x1,y1,x2,y2,x3,y3,…”</p>\n<p>​                    每一对 “x,y” 坐标都定义了多边形的一个顶点（”0,0” 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。</p>\n<p>​                    多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。</p>\n<p>​                    矩形：shape=”rectangle”，coords=”x1,y1,x2,y2”</p>\n<p>​                    第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，”0,0” 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。</p>\n</li>\n<li><p>常用文本格式化标签<br><img src=\"https://s2.loli.net/2022/07/08/obBW4smqSA1EpVL.png\" alt=\"img\"></p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE HTML&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;b&gt;定义粗体文本&lt;/b&gt;\n&lt;br/&gt;\n&lt;em&gt;定义着重文字&lt;/em&gt;\n&lt;br/&gt;\n&lt;i&gt;定义斜体文字&lt;/i&gt;\n  &lt;br/&gt;\n&lt;small&gt;定义小号文字&lt;/small&gt;\n&lt;br/&gt;\n&lt;strong&gt;定义加重语气&lt;/strong&gt;\n&lt;br/&gt;\n定义下标字 &lt;sub&gt;aa&lt;/sub&gt;\n&lt;br/&gt;\n定义上标字 &lt;sup&gt;aa&lt;/sup&gt;\n&lt;br/&gt;\n&lt;ins&gt;定义插入字(加了下划线)&lt;/ins&gt;\n&lt;br/&gt;\n&lt;del&gt;定义删除字(加了删除线)&lt;/del&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n</ul>"},{"title":"(三)HTML5","date":"2022-07-08T11:36:10.000Z","cover":"https://ts1.cn.mm.bing.net/th/id/R-C.fa4b93dc580e788f183ae3a6793bfe56?rik=huVHqQFEczu30g&riu=http%3a%2f%2fnews.mydrivers.com%2fImg%2f20110119%2fS08534319.png&ehk=isp2A3sdx7Wt%2fOngckZQfXLnIXcAbie9gvxAVg%2fRt%2bA%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","coverWidth":550,"coverHeight":275,"author":"xiguayaaaaa","from":null,"_content":"\n (三)HTML5\n <!--more-->\n## 3.1新增元素\n\n#### 3.1.1 新增的结构元素\n\n- \\<section>元素\n\n\\<section>元素表示页面中的内容区块，如：页眉，页脚，章节等部分\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>section</title> \n</head>\n<body>\n  <section>\n    <h1>区域一</h1>\n    <p>这里是区域一的内容</p>\n  </section>\n\n  <section>\n   <h1>区域二</h1>\n    <p>这里是区域二的内容</p>\n  </section>\n</body>\n</html>\n```\n\n- \\<article>元素\n\n\\<article>元素表示页面中的一块与上下文不相关的独立内容，如：新闻页中诸多文章中的某篇文章\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>article</title> \n</head>\n<body>\n\n  <article>\n    <h1>两个“万岁”</h1>\n    <p>“伟大、光荣、正确的中国共产党万岁！”</p>\n\t\t<p>“伟大、光荣、英雄的中国人民万岁！”</p>\n  </article>\n</body>\n</html>\n```\n\n- \\<aside>元素\n\n\\<aside>表示\\<article>元素的内容之外的，它的内容应该与附近内容相关\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>aside</title> \n</head>\n<body>\n\n  <p>神州十二号飞船成功升空</p>\n\n  <aside>\n    <h4>飞船抵达中国空间站</h4>\n    <p>6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n      通过使用最先进的快速交会对接自动化技术\n      这一切都要归功于从一次次太空飞行中总结的的经验。</p>\n  </aside>\n\n</body>\n</html>\n```\n\n- \\<header>元素\n\n\\<header>元素表示页面中的一个内容块或整个页面的标题\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>header</title> \n</head>\n<body>\n  <article>\n    <header>\n      <h1>飞船抵达中国空间站</h1>\n    </header>\n    <p>\n      6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n      通过使用最先进的快速交会对接自动化技术\n      这一切都要归功于从一次次太空飞行中总结的的经验。\n    </p>\n  </article>\n</body>\n</html>\n```\n\n- \\<footer>元素\n\n\\<footer>元素表示整个页面或页面中一个区域内的脚注，一般包含作者的基本信息\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n    <meta charset=\"UTF-8\">\n    <title>header</title> \n</head>\n<body>\n    <article>\n        <header>\n            <h1>飞船抵达中国空间站</h1>\n        </header>\n        <p>\n            6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n            通过使用最先进的快速交会对接自动化技术\n            这一切都要归功于从一次次太空飞行中总结的的经验。\n        </p>\n    </article>\n    <footer>\n        <p>&copy;环球网</p>\n      \t<p>发表时间：7-12</p>\n    </footer>\n</body>\n</html>\n```\n\n- \\<nav>元素\n\n\\<nav>元素通常在内嵌套\\<a>标签表示页面的导航链接部分\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>nav</title> \n</head>\n<body>\n\n  <nav>\n    <a href=\"/html/\">HTML</a> |\n    <a href=\"/css/\">CSS</a> |\n    <a href=\"/js/\">JavaScript</a> |\n    <a href=\"/jquery/\">jQuery</a>\n  </nav>\n\n</body>\n</html>\n```\n\n- \\<video>元素\n\n- - \\<video>元素用来插入视频\n  - \\<video>元素仅支持MP4，WebM，Ogg视频格式\n  - 元素属性表：\n\n| 属性                                                         | 值               | 描述                                                         |\n| ------------------------------------------------------------ | ---------------- | ------------------------------------------------------------ |\n| [autoplay](https://www.runoob.com/tags/att-video-autoplay.html) | autoplay         | 如果出现该属性，则视频在就绪后马上播放。                     |\n| [controls](https://www.runoob.com/tags/att-video-controls.html) | controls         | 如果出现该属性，则向用户显示控件，比如播放按钮。             |\n| [height](https://www.runoob.com/tags/att-video-height.html)  | pixels           | 设置视频播放器的高度。                                       |\n| [loop](https://www.runoob.com/tags/att-video-loop.html)      | loop             | 如果出现该属性，则当媒介文件完成播放后再次开始播放。         |\n| [muted](https://www.runoob.com/tags/att-video-muted.html)    | muted            | 如果出现该属性，视频的音频输出为静音。                       |\n| [poster](https://www.runoob.com/tags/att-video-poster.html)  | URL              | 规定视频正在下载时显示的图像，直到用户点击播放按钮。         |\n| [preload](https://www.runoob.com/tags/att-video-preload.html) | autometadatanone | 如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 \"autoplay\"，则忽略该属性。 |\n| [src](https://www.runoob.com/tags/att-video-src.html)        | URL              | 要播放的视频的 URL。                                         |\n| [width](https://www.runoob.com/tags/att-video-width.html)    | pixels           | 设置视频播放器的宽度。                                       |\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>video</title> \n</head>\n<body>\n\n  <video width=\"320\" height=\"240\" controls>\n    <source src=\"movie.mp4\"  type=\"video/mp4\">\n    <source src=\"movie.ogg\"  type=\"video/ogg\">\n    您的浏览器不支持 HTML5 video 标签。\n  </video>\n\n</body>\n</html>\n```\n\n- \\<audio>元素\n\n- - \\<audio>元素用来插入音频\n  - \\<audio>元素仅支持Ogg和MP3格式\n  - 元素属性表\n\n| 属性                                                         | 值               | 描述                                                        |\n| ------------------------------------------------------------ | ---------------- | ----------------------------------------------------------- |\n| [autoplay](https://www.runoob.com/tags/att-audio-autoplay.html) | autoplay         | 如果出现该属性，则音频在就绪后马上播放。                    |\n| [controls](https://www.runoob.com/tags/att-audio-controls.html) | controls         | 如果出现该属性，则向用户显示音频控件（比如播放/暂停按钮）。 |\n| [loop](https://www.runoob.com/tags/att-audio-loop.html)      | loop             | 如果出现该属性，则每当音频结束时重新开始播放。              |\n| [muted](https://www.runoob.com/tags/att-audio-muted.html)    | muted            | 如果出现该属性，则音频输出为静音。                          |\n| [preload](https://www.runoob.com/tags/att-audio-preload.html) | autometadatanone | 规定当网页加载时，音频是否默认被加载以及如何被加载。        |\n| [src](https://www.runoob.com/tags/att-audio-src.html)        | *URL*            | 规定音频文件的 URL。                                        |\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>audio</title> \n</head>\n<body>\n  <audio controls>\n    <source src=\"music.ogg\" type=\"audio/ogg\">\n    <source src=\"music.mp3\" type=\"audio/mpeg\">\n  您的浏览器不支持 audio 元素。\n  </audio>\n</body>\n</html>\n```\n\n- \\<mark>元素\n\n\\<mark>元素主要用来在视觉上向用户呈现哪些需要突出显示或高亮显示的文字，一般用在搜索结果中向用户高亮显示搜索关键词\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>mark</title> \n</head>\n<body>\n  <p>神舟十二号航天员乘组圆满完成空间站阶段<mark>首次出舱</mark>活动全部既定任务</p>\n</body>\n</html>\n```\n\n- \\<ruby>元素\n\n\\<ruby>表示中文注音或字符\n\n- \\<rt>元素\n\n\\<rt>元素与\\<ruby>配合使用用来解释或发音\n\n- \\<rp>元素\n\n\\<rp>元素与\\<ruby>一起使用，以定义不支持\\<ruby>元素的浏览器显示内容，以括号的形式出现如：汉字(Han Zi)\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>ruby,rt,rp\n  </title> \n</head>\n<body>\n\n<ruby>\n  汉 <rp>(</rp><rt>Han</rt><rp>)</rp>\n  字 <rp>(</rp><rt>zi</rt><rp>)</rp>\n</ruby>\n\n</body>\n</html>\n```\n\n- \\<details>元素\n\n<details>元素表示用户要求得到的细节信息，与<summary>配合使用，<summary>提供标题或图例，用户点击标题时，会显示户细节信息，<summary>元素应该是<details>元素的第一个元素\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>details</title>\n</head>\n<body>\n    <details>\n        <summary>空间站</summary>\n        空间站（space station）又称太空站、航天站。\n      \t是一种在近地轨道长时间运行、可供多名航天员巡访、长期工作和生活的载人航天器。\n      \t空间站分为单模块空间站和多模块空间站两种。\n      \t单模块空间站可由航天运载器一次发射入轨，多模块空间站则由航天运载器分批将各模块送入轨道，在太空中将各模块组装而成。\n      \t在空间站中要有人能够生活的一切设施，空间站不具备返回地球的能力。\n    </details>\n</body>\n</html>\n```\n\n## 3.2 全局属性\n\n#### 3.2.1 contentEditable属性\n\ncontentEditable属性由微软开发并被其它浏览器反编译投入引用的一个全局属性，该属性允许用户编辑元素内容，该属性是一个布尔值的属性，可以被指定false或true\n\n该属性默认inherit（继承）状态，属性为true时，元素被指定为允许编辑；属性为false时，元素被指定为不允许编辑状态；未指定值时，则由inherit状态决定，如果父元素是可编辑元素，则该元素也可编辑\n\n在编辑完成后，如果想要保存其中的内容，只能把该元素的innerHTML发送到服务器端进行保存，目前还没有特别的API来保存编辑后的元素内容\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>contenteditable</title>\n</head>\n<body>\n    <ul contenteditable=\"true\">\n        <li>这是预编译内容</li>\n        <li>这是预编译内容</li>\n        <li>这是预编译内容</li>\n    </ul>\n</body>\n</html>\n```\n\n运行结果：\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1626161477737-77ec780f-ee67-4db7-aeff-ab2ff54b335d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_19%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n#### 3.2.2 designMode属性\n\ndesignModel属性用来指定整个页面是否可编辑，当页面可编辑时，页面中任何支持contenteditable属性的元素都变成可编辑状态。该属性只能在JavaScript脚本里被编辑修改，该属性有两个值 “on”或“off”，当属性被指定为“on”时，页面为可编辑状态，为“off”时，页面不可编辑\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>designMode</title>\n    <script>\n        document.designMode=\"on\";\n    </script>\n</head>\n<body>\n    <ul>\n        <li>这是原有内容</li>\n        <li>这是原有内容</li>\n        <li>这是原有内容</li>\n    </ul>\n    <a href=\"javascript:void(0)\">链接</a>\n</body>\n</html>\n```\n\n运行结果：\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1626162780404-4163f601-90ab-4986-abdd-5843a5cf39b4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n#### 3.2.3 hidden属性\n\n在HTML 5中，所有的元素都允许使用一个hidden属性。该属性类似于input元素中的 hidden元素，功能是通知浏览器不渲染该元素。使该元素处干不可见状态。但是元素中的内容还是浏览器创建的，也就是说页面装载后允许使用JavaScript脚本将该属性取消，取消后该元素变为可见状态，同时元素中的内容也即时显示出来。Hidden属性是一个布尔值的属性。当设为true时，元素处于不可见状态;当设为false时，元素处于可见状态","source":"_posts/三-HTML5.md","raw":"---\ntitle: (三)HTML5\ndate: 2022-07-08 19:36:10\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://ts1.cn.mm.bing.net/th/id/R-C.fa4b93dc580e788f183ae3a6793bfe56?rik=huVHqQFEczu30g&riu=http%3a%2f%2fnews.mydrivers.com%2fImg%2f20110119%2fS08534319.png&ehk=isp2A3sdx7Wt%2fOngckZQfXLnIXcAbie9gvxAVg%2fRt%2bA%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1\ncoverWidth: 550\ncoverHeight: 275\nauthor: xiguayaaaaa\nfrom:\n---\n\n (三)HTML5\n <!--more-->\n## 3.1新增元素\n\n#### 3.1.1 新增的结构元素\n\n- \\<section>元素\n\n\\<section>元素表示页面中的内容区块，如：页眉，页脚，章节等部分\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>section</title> \n</head>\n<body>\n  <section>\n    <h1>区域一</h1>\n    <p>这里是区域一的内容</p>\n  </section>\n\n  <section>\n   <h1>区域二</h1>\n    <p>这里是区域二的内容</p>\n  </section>\n</body>\n</html>\n```\n\n- \\<article>元素\n\n\\<article>元素表示页面中的一块与上下文不相关的独立内容，如：新闻页中诸多文章中的某篇文章\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>article</title> \n</head>\n<body>\n\n  <article>\n    <h1>两个“万岁”</h1>\n    <p>“伟大、光荣、正确的中国共产党万岁！”</p>\n\t\t<p>“伟大、光荣、英雄的中国人民万岁！”</p>\n  </article>\n</body>\n</html>\n```\n\n- \\<aside>元素\n\n\\<aside>表示\\<article>元素的内容之外的，它的内容应该与附近内容相关\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>aside</title> \n</head>\n<body>\n\n  <p>神州十二号飞船成功升空</p>\n\n  <aside>\n    <h4>飞船抵达中国空间站</h4>\n    <p>6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n      通过使用最先进的快速交会对接自动化技术\n      这一切都要归功于从一次次太空飞行中总结的的经验。</p>\n  </aside>\n\n</body>\n</html>\n```\n\n- \\<header>元素\n\n\\<header>元素表示页面中的一个内容块或整个页面的标题\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>header</title> \n</head>\n<body>\n  <article>\n    <header>\n      <h1>飞船抵达中国空间站</h1>\n    </header>\n    <p>\n      6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n      通过使用最先进的快速交会对接自动化技术\n      这一切都要归功于从一次次太空飞行中总结的的经验。\n    </p>\n  </article>\n</body>\n</html>\n```\n\n- \\<footer>元素\n\n\\<footer>元素表示整个页面或页面中一个区域内的脚注，一般包含作者的基本信息\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n    <meta charset=\"UTF-8\">\n    <title>header</title> \n</head>\n<body>\n    <article>\n        <header>\n            <h1>飞船抵达中国空间站</h1>\n        </header>\n        <p>\n            6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n            通过使用最先进的快速交会对接自动化技术\n            这一切都要归功于从一次次太空飞行中总结的的经验。\n        </p>\n    </article>\n    <footer>\n        <p>&copy;环球网</p>\n      \t<p>发表时间：7-12</p>\n    </footer>\n</body>\n</html>\n```\n\n- \\<nav>元素\n\n\\<nav>元素通常在内嵌套\\<a>标签表示页面的导航链接部分\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>nav</title> \n</head>\n<body>\n\n  <nav>\n    <a href=\"/html/\">HTML</a> |\n    <a href=\"/css/\">CSS</a> |\n    <a href=\"/js/\">JavaScript</a> |\n    <a href=\"/jquery/\">jQuery</a>\n  </nav>\n\n</body>\n</html>\n```\n\n- \\<video>元素\n\n- - \\<video>元素用来插入视频\n  - \\<video>元素仅支持MP4，WebM，Ogg视频格式\n  - 元素属性表：\n\n| 属性                                                         | 值               | 描述                                                         |\n| ------------------------------------------------------------ | ---------------- | ------------------------------------------------------------ |\n| [autoplay](https://www.runoob.com/tags/att-video-autoplay.html) | autoplay         | 如果出现该属性，则视频在就绪后马上播放。                     |\n| [controls](https://www.runoob.com/tags/att-video-controls.html) | controls         | 如果出现该属性，则向用户显示控件，比如播放按钮。             |\n| [height](https://www.runoob.com/tags/att-video-height.html)  | pixels           | 设置视频播放器的高度。                                       |\n| [loop](https://www.runoob.com/tags/att-video-loop.html)      | loop             | 如果出现该属性，则当媒介文件完成播放后再次开始播放。         |\n| [muted](https://www.runoob.com/tags/att-video-muted.html)    | muted            | 如果出现该属性，视频的音频输出为静音。                       |\n| [poster](https://www.runoob.com/tags/att-video-poster.html)  | URL              | 规定视频正在下载时显示的图像，直到用户点击播放按钮。         |\n| [preload](https://www.runoob.com/tags/att-video-preload.html) | autometadatanone | 如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 \"autoplay\"，则忽略该属性。 |\n| [src](https://www.runoob.com/tags/att-video-src.html)        | URL              | 要播放的视频的 URL。                                         |\n| [width](https://www.runoob.com/tags/att-video-width.html)    | pixels           | 设置视频播放器的宽度。                                       |\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>video</title> \n</head>\n<body>\n\n  <video width=\"320\" height=\"240\" controls>\n    <source src=\"movie.mp4\"  type=\"video/mp4\">\n    <source src=\"movie.ogg\"  type=\"video/ogg\">\n    您的浏览器不支持 HTML5 video 标签。\n  </video>\n\n</body>\n</html>\n```\n\n- \\<audio>元素\n\n- - \\<audio>元素用来插入音频\n  - \\<audio>元素仅支持Ogg和MP3格式\n  - 元素属性表\n\n| 属性                                                         | 值               | 描述                                                        |\n| ------------------------------------------------------------ | ---------------- | ----------------------------------------------------------- |\n| [autoplay](https://www.runoob.com/tags/att-audio-autoplay.html) | autoplay         | 如果出现该属性，则音频在就绪后马上播放。                    |\n| [controls](https://www.runoob.com/tags/att-audio-controls.html) | controls         | 如果出现该属性，则向用户显示音频控件（比如播放/暂停按钮）。 |\n| [loop](https://www.runoob.com/tags/att-audio-loop.html)      | loop             | 如果出现该属性，则每当音频结束时重新开始播放。              |\n| [muted](https://www.runoob.com/tags/att-audio-muted.html)    | muted            | 如果出现该属性，则音频输出为静音。                          |\n| [preload](https://www.runoob.com/tags/att-audio-preload.html) | autometadatanone | 规定当网页加载时，音频是否默认被加载以及如何被加载。        |\n| [src](https://www.runoob.com/tags/att-audio-src.html)        | *URL*            | 规定音频文件的 URL。                                        |\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>audio</title> \n</head>\n<body>\n  <audio controls>\n    <source src=\"music.ogg\" type=\"audio/ogg\">\n    <source src=\"music.mp3\" type=\"audio/mpeg\">\n  您的浏览器不支持 audio 元素。\n  </audio>\n</body>\n</html>\n```\n\n- \\<mark>元素\n\n\\<mark>元素主要用来在视觉上向用户呈现哪些需要突出显示或高亮显示的文字，一般用在搜索结果中向用户高亮显示搜索关键词\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>mark</title> \n</head>\n<body>\n  <p>神舟十二号航天员乘组圆满完成空间站阶段<mark>首次出舱</mark>活动全部既定任务</p>\n</body>\n</html>\n```\n\n- \\<ruby>元素\n\n\\<ruby>表示中文注音或字符\n\n- \\<rt>元素\n\n\\<rt>元素与\\<ruby>配合使用用来解释或发音\n\n- \\<rp>元素\n\n\\<rp>元素与\\<ruby>一起使用，以定义不支持\\<ruby>元素的浏览器显示内容，以括号的形式出现如：汉字(Han Zi)\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>ruby,rt,rp\n  </title> \n</head>\n<body>\n\n<ruby>\n  汉 <rp>(</rp><rt>Han</rt><rp>)</rp>\n  字 <rp>(</rp><rt>zi</rt><rp>)</rp>\n</ruby>\n\n</body>\n</html>\n```\n\n- \\<details>元素\n\n<details>元素表示用户要求得到的细节信息，与<summary>配合使用，<summary>提供标题或图例，用户点击标题时，会显示户细节信息，<summary>元素应该是<details>元素的第一个元素\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>details</title>\n</head>\n<body>\n    <details>\n        <summary>空间站</summary>\n        空间站（space station）又称太空站、航天站。\n      \t是一种在近地轨道长时间运行、可供多名航天员巡访、长期工作和生活的载人航天器。\n      \t空间站分为单模块空间站和多模块空间站两种。\n      \t单模块空间站可由航天运载器一次发射入轨，多模块空间站则由航天运载器分批将各模块送入轨道，在太空中将各模块组装而成。\n      \t在空间站中要有人能够生活的一切设施，空间站不具备返回地球的能力。\n    </details>\n</body>\n</html>\n```\n\n## 3.2 全局属性\n\n#### 3.2.1 contentEditable属性\n\ncontentEditable属性由微软开发并被其它浏览器反编译投入引用的一个全局属性，该属性允许用户编辑元素内容，该属性是一个布尔值的属性，可以被指定false或true\n\n该属性默认inherit（继承）状态，属性为true时，元素被指定为允许编辑；属性为false时，元素被指定为不允许编辑状态；未指定值时，则由inherit状态决定，如果父元素是可编辑元素，则该元素也可编辑\n\n在编辑完成后，如果想要保存其中的内容，只能把该元素的innerHTML发送到服务器端进行保存，目前还没有特别的API来保存编辑后的元素内容\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>contenteditable</title>\n</head>\n<body>\n    <ul contenteditable=\"true\">\n        <li>这是预编译内容</li>\n        <li>这是预编译内容</li>\n        <li>这是预编译内容</li>\n    </ul>\n</body>\n</html>\n```\n\n运行结果：\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1626161477737-77ec780f-ee67-4db7-aeff-ab2ff54b335d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_19%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n#### 3.2.2 designMode属性\n\ndesignModel属性用来指定整个页面是否可编辑，当页面可编辑时，页面中任何支持contenteditable属性的元素都变成可编辑状态。该属性只能在JavaScript脚本里被编辑修改，该属性有两个值 “on”或“off”，当属性被指定为“on”时，页面为可编辑状态，为“off”时，页面不可编辑\n\n代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>designMode</title>\n    <script>\n        document.designMode=\"on\";\n    </script>\n</head>\n<body>\n    <ul>\n        <li>这是原有内容</li>\n        <li>这是原有内容</li>\n        <li>这是原有内容</li>\n    </ul>\n    <a href=\"javascript:void(0)\">链接</a>\n</body>\n</html>\n```\n\n运行结果：\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1626162780404-4163f601-90ab-4986-abdd-5843a5cf39b4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n#### 3.2.3 hidden属性\n\n在HTML 5中，所有的元素都允许使用一个hidden属性。该属性类似于input元素中的 hidden元素，功能是通知浏览器不渲染该元素。使该元素处干不可见状态。但是元素中的内容还是浏览器创建的，也就是说页面装载后允许使用JavaScript脚本将该属性取消，取消后该元素变为可见状态，同时元素中的内容也即时显示出来。Hidden属性是一个布尔值的属性。当设为true时，元素处于不可见状态;当设为false时，元素处于可见状态","slug":"三-HTML5","published":1,"updated":"2022-07-19T02:36:41.011Z","_id":"cl5hmbtlu000m2cuj6mcih9qy","comments":1,"layout":"post","photos":[],"link":"","content":"<p> (三)HTML5<br> <span id=\"more\"></span></p>\n<h2 id=\"3-1新增元素\"><a href=\"#3-1新增元素\" class=\"headerlink\" title=\"3.1新增元素\"></a>3.1新增元素</h2><h4 id=\"3-1-1-新增的结构元素\"><a href=\"#3-1-1-新增的结构元素\" class=\"headerlink\" title=\"3.1.1 新增的结构元素\"></a>3.1.1 新增的结构元素</h4><ul>\n<li>&lt;section&gt;元素</li>\n</ul>\n<p>&lt;section&gt;元素表示页面中的内容区块，如：页眉，页脚，章节等部分</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;section&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;section&gt;\n    &lt;h1&gt;区域一&lt;/h1&gt;\n    &lt;p&gt;这里是区域一的内容&lt;/p&gt;\n  &lt;/section&gt;\n\n  &lt;section&gt;\n   &lt;h1&gt;区域二&lt;/h1&gt;\n    &lt;p&gt;这里是区域二的内容&lt;/p&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;article&gt;元素</li>\n</ul>\n<p>&lt;article&gt;元素表示页面中的一块与上下文不相关的独立内容，如：新闻页中诸多文章中的某篇文章</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;article&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;article&gt;\n    &lt;h1&gt;两个“万岁”&lt;/h1&gt;\n    &lt;p&gt;“伟大、光荣、正确的中国共产党万岁！”&lt;/p&gt;\n        &lt;p&gt;“伟大、光荣、英雄的中国人民万岁！”&lt;/p&gt;\n  &lt;/article&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;aside&gt;元素</li>\n</ul>\n<p>&lt;aside&gt;表示&lt;article&gt;元素的内容之外的，它的内容应该与附近内容相关</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;aside&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;p&gt;神州十二号飞船成功升空&lt;/p&gt;\n\n  &lt;aside&gt;\n    &lt;h4&gt;飞船抵达中国空间站&lt;/h4&gt;\n    &lt;p&gt;6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n      通过使用最先进的快速交会对接自动化技术\n      这一切都要归功于从一次次太空飞行中总结的的经验。&lt;/p&gt;\n  &lt;/aside&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;header&gt;元素</li>\n</ul>\n<p>&lt;header&gt;元素表示页面中的一个内容块或整个页面的标题</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;header&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;article&gt;\n    &lt;header&gt;\n      &lt;h1&gt;飞船抵达中国空间站&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;p&gt;\n      6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n      通过使用最先进的快速交会对接自动化技术\n      这一切都要归功于从一次次太空飞行中总结的的经验。\n    &lt;/p&gt;\n  &lt;/article&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;footer&gt;元素</li>\n</ul>\n<p>&lt;footer&gt;元素表示整个页面或页面中一个区域内的脚注，一般包含作者的基本信息</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;header&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n    &lt;article&gt;\n        &lt;header&gt;\n            &lt;h1&gt;飞船抵达中国空间站&lt;/h1&gt;\n        &lt;/header&gt;\n        &lt;p&gt;\n            6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n            通过使用最先进的快速交会对接自动化技术\n            这一切都要归功于从一次次太空飞行中总结的的经验。\n        &lt;/p&gt;\n    &lt;/article&gt;\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy;环球网&lt;/p&gt;\n          &lt;p&gt;发表时间：7-12&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;nav&gt;元素</li>\n</ul>\n<p>&lt;nav&gt;元素通常在内嵌套&lt;a&gt;标签表示页面的导航链接部分</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;nav&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;nav&gt;\n    &lt;a href=&quot;/html/&quot;&gt;HTML&lt;/a&gt; |\n    &lt;a href=&quot;/css/&quot;&gt;CSS&lt;/a&gt; |\n    &lt;a href=&quot;/js/&quot;&gt;JavaScript&lt;/a&gt; |\n    &lt;a href=&quot;/jquery/&quot;&gt;jQuery&lt;/a&gt;\n  &lt;/nav&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>&lt;video&gt;元素</p>\n</li>\n<li><ul>\n<li>&lt;video&gt;元素用来插入视频</li>\n<li>&lt;video&gt;元素仅支持MP4，WebM，Ogg视频格式</li>\n<li>元素属性表：</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-autoplay.html\">autoplay</a></td>\n<td>autoplay</td>\n<td>如果出现该属性，则视频在就绪后马上播放。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-controls.html\">controls</a></td>\n<td>controls</td>\n<td>如果出现该属性，则向用户显示控件，比如播放按钮。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-height.html\">height</a></td>\n<td>pixels</td>\n<td>设置视频播放器的高度。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-loop.html\">loop</a></td>\n<td>loop</td>\n<td>如果出现该属性，则当媒介文件完成播放后再次开始播放。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-muted.html\">muted</a></td>\n<td>muted</td>\n<td>如果出现该属性，视频的音频输出为静音。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-poster.html\">poster</a></td>\n<td>URL</td>\n<td>规定视频正在下载时显示的图像，直到用户点击播放按钮。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-preload.html\">preload</a></td>\n<td>autometadatanone</td>\n<td>如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-src.html\">src</a></td>\n<td>URL</td>\n<td>要播放的视频的 URL。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-width.html\">width</a></td>\n<td>pixels</td>\n<td>设置视频播放器的宽度。</td>\n</tr>\n</tbody></table>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;video&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt;\n    &lt;source src=&quot;movie.mp4&quot;  type=&quot;video/mp4&quot;&gt;\n    &lt;source src=&quot;movie.ogg&quot;  type=&quot;video/ogg&quot;&gt;\n    您的浏览器不支持 HTML5 video 标签。\n  &lt;/video&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>&lt;audio&gt;元素</p>\n</li>\n<li><ul>\n<li>&lt;audio&gt;元素用来插入音频</li>\n<li>&lt;audio&gt;元素仅支持Ogg和MP3格式</li>\n<li>元素属性表</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-autoplay.html\">autoplay</a></td>\n<td>autoplay</td>\n<td>如果出现该属性，则音频在就绪后马上播放。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-controls.html\">controls</a></td>\n<td>controls</td>\n<td>如果出现该属性，则向用户显示音频控件（比如播放/暂停按钮）。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-loop.html\">loop</a></td>\n<td>loop</td>\n<td>如果出现该属性，则每当音频结束时重新开始播放。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-muted.html\">muted</a></td>\n<td>muted</td>\n<td>如果出现该属性，则音频输出为静音。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-preload.html\">preload</a></td>\n<td>autometadatanone</td>\n<td>规定当网页加载时，音频是否默认被加载以及如何被加载。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-src.html\">src</a></td>\n<td><em>URL</em></td>\n<td>规定音频文件的 URL。</td>\n</tr>\n</tbody></table>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;audio&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;audio controls&gt;\n    &lt;source src=&quot;music.ogg&quot; type=&quot;audio/ogg&quot;&gt;\n    &lt;source src=&quot;music.mp3&quot; type=&quot;audio/mpeg&quot;&gt;\n  您的浏览器不支持 audio 元素。\n  &lt;/audio&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;mark&gt;元素</li>\n</ul>\n<p>&lt;mark&gt;元素主要用来在视觉上向用户呈现哪些需要突出显示或高亮显示的文字，一般用在搜索结果中向用户高亮显示搜索关键词</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;mark&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;神舟十二号航天员乘组圆满完成空间站阶段&lt;mark&gt;首次出舱&lt;/mark&gt;活动全部既定任务&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;ruby&gt;元素</li>\n</ul>\n<p>&lt;ruby&gt;表示中文注音或字符</p>\n<ul>\n<li>&lt;rt&gt;元素</li>\n</ul>\n<p>&lt;rt&gt;元素与&lt;ruby&gt;配合使用用来解释或发音</p>\n<ul>\n<li>&lt;rp&gt;元素</li>\n</ul>\n<p>&lt;rp&gt;元素与&lt;ruby&gt;一起使用，以定义不支持&lt;ruby&gt;元素的浏览器显示内容，以括号的形式出现如：汉字(Han Zi)</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;ruby,rt,rp\n  &lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;ruby&gt;\n  汉 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Han&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;\n  字 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;zi&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;\n&lt;/ruby&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;details&gt;元素</li>\n</ul>\n<details>元素表示用户要求得到的细节信息，与<summary>配合使用，<summary>提供标题或图例，用户点击标题时，会显示户细节信息，<summary>元素应该是<details>元素的第一个元素\n\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;details&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;details&gt;\n        &lt;summary&gt;空间站&lt;/summary&gt;\n        空间站（space station）又称太空站、航天站。\n          是一种在近地轨道长时间运行、可供多名航天员巡访、长期工作和生活的载人航天器。\n          空间站分为单模块空间站和多模块空间站两种。\n          单模块空间站可由航天运载器一次发射入轨，多模块空间站则由航天运载器分批将各模块送入轨道，在太空中将各模块组装而成。\n          在空间站中要有人能够生活的一切设施，空间站不具备返回地球的能力。\n    &lt;/details&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"3-2-全局属性\"><a href=\"#3-2-全局属性\" class=\"headerlink\" title=\"3.2 全局属性\"></a>3.2 全局属性</h2><h4 id=\"3-2-1-contentEditable属性\"><a href=\"#3-2-1-contentEditable属性\" class=\"headerlink\" title=\"3.2.1 contentEditable属性\"></a>3.2.1 contentEditable属性</h4><p>contentEditable属性由微软开发并被其它浏览器反编译投入引用的一个全局属性，该属性允许用户编辑元素内容，该属性是一个布尔值的属性，可以被指定false或true</p>\n<p>该属性默认inherit（继承）状态，属性为true时，元素被指定为允许编辑；属性为false时，元素被指定为不允许编辑状态；未指定值时，则由inherit状态决定，如果父元素是可编辑元素，则该元素也可编辑</p>\n<p>在编辑完成后，如果想要保存其中的内容，只能把该元素的innerHTML发送到服务器端进行保存，目前还没有特别的API来保存编辑后的元素内容</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;contenteditable&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul contenteditable=&quot;true&quot;&gt;\n        &lt;li&gt;这是预编译内容&lt;/li&gt;\n        &lt;li&gt;这是预编译内容&lt;/li&gt;\n        &lt;li&gt;这是预编译内容&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1626161477737-77ec780f-ee67-4db7-aeff-ab2ff54b335d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h4 id=\"3-2-2-designMode属性\"><a href=\"#3-2-2-designMode属性\" class=\"headerlink\" title=\"3.2.2 designMode属性\"></a>3.2.2 designMode属性</h4><p>designModel属性用来指定整个页面是否可编辑，当页面可编辑时，页面中任何支持contenteditable属性的元素都变成可编辑状态。该属性只能在JavaScript脚本里被编辑修改，该属性有两个值 “on”或“off”，当属性被指定为“on”时，页面为可编辑状态，为“off”时，页面不可编辑</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;designMode&lt;/title&gt;\n    &lt;script&gt;\n        document.designMode=&quot;on&quot;;\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n        &lt;li&gt;这是原有内容&lt;/li&gt;\n        &lt;li&gt;这是原有内容&lt;/li&gt;\n        &lt;li&gt;这是原有内容&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;a href=&quot;javascript:void(0)&quot;&gt;链接&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1626162780404-4163f601-90ab-4986-abdd-5843a5cf39b4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h4 id=\"3-2-3-hidden属性\"><a href=\"#3-2-3-hidden属性\" class=\"headerlink\" title=\"3.2.3 hidden属性\"></a>3.2.3 hidden属性</h4><p>在HTML 5中，所有的元素都允许使用一个hidden属性。该属性类似于input元素中的 hidden元素，功能是通知浏览器不渲染该元素。使该元素处干不可见状态。但是元素中的内容还是浏览器创建的，也就是说页面装载后允许使用JavaScript脚本将该属性取消，取消后该元素变为可见状态，同时元素中的内容也即时显示出来。Hidden属性是一个布尔值的属性。当设为true时，元素处于不可见状态;当设为false时，元素处于可见状态</p>\n","site":{"data":{}},"excerpt":"<p> (三)HTML5<br>","more":"</p>\n<h2 id=\"3-1新增元素\"><a href=\"#3-1新增元素\" class=\"headerlink\" title=\"3.1新增元素\"></a>3.1新增元素</h2><h4 id=\"3-1-1-新增的结构元素\"><a href=\"#3-1-1-新增的结构元素\" class=\"headerlink\" title=\"3.1.1 新增的结构元素\"></a>3.1.1 新增的结构元素</h4><ul>\n<li>&lt;section&gt;元素</li>\n</ul>\n<p>&lt;section&gt;元素表示页面中的内容区块，如：页眉，页脚，章节等部分</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;section&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;section&gt;\n    &lt;h1&gt;区域一&lt;/h1&gt;\n    &lt;p&gt;这里是区域一的内容&lt;/p&gt;\n  &lt;/section&gt;\n\n  &lt;section&gt;\n   &lt;h1&gt;区域二&lt;/h1&gt;\n    &lt;p&gt;这里是区域二的内容&lt;/p&gt;\n  &lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;article&gt;元素</li>\n</ul>\n<p>&lt;article&gt;元素表示页面中的一块与上下文不相关的独立内容，如：新闻页中诸多文章中的某篇文章</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;article&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;article&gt;\n    &lt;h1&gt;两个“万岁”&lt;/h1&gt;\n    &lt;p&gt;“伟大、光荣、正确的中国共产党万岁！”&lt;/p&gt;\n        &lt;p&gt;“伟大、光荣、英雄的中国人民万岁！”&lt;/p&gt;\n  &lt;/article&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;aside&gt;元素</li>\n</ul>\n<p>&lt;aside&gt;表示&lt;article&gt;元素的内容之外的，它的内容应该与附近内容相关</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;aside&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;p&gt;神州十二号飞船成功升空&lt;/p&gt;\n\n  &lt;aside&gt;\n    &lt;h4&gt;飞船抵达中国空间站&lt;/h4&gt;\n    &lt;p&gt;6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n      通过使用最先进的快速交会对接自动化技术\n      这一切都要归功于从一次次太空飞行中总结的的经验。&lt;/p&gt;\n  &lt;/aside&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;header&gt;元素</li>\n</ul>\n<p>&lt;header&gt;元素表示页面中的一个内容块或整个页面的标题</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;header&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;article&gt;\n    &lt;header&gt;\n      &lt;h1&gt;飞船抵达中国空间站&lt;/h1&gt;\n    &lt;/header&gt;\n    &lt;p&gt;\n      6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n      通过使用最先进的快速交会对接自动化技术\n      这一切都要归功于从一次次太空飞行中总结的的经验。\n    &lt;/p&gt;\n  &lt;/article&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;footer&gt;元素</li>\n</ul>\n<p>&lt;footer&gt;元素表示整个页面或页面中一个区域内的脚注，一般包含作者的基本信息</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;header&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n    &lt;article&gt;\n        &lt;header&gt;\n            &lt;h1&gt;飞船抵达中国空间站&lt;/h1&gt;\n        &lt;/header&gt;\n        &lt;p&gt;\n            6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。\n            通过使用最先进的快速交会对接自动化技术\n            这一切都要归功于从一次次太空飞行中总结的的经验。\n        &lt;/p&gt;\n    &lt;/article&gt;\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy;环球网&lt;/p&gt;\n          &lt;p&gt;发表时间：7-12&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;nav&gt;元素</li>\n</ul>\n<p>&lt;nav&gt;元素通常在内嵌套&lt;a&gt;标签表示页面的导航链接部分</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;nav&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;nav&gt;\n    &lt;a href=&quot;/html/&quot;&gt;HTML&lt;/a&gt; |\n    &lt;a href=&quot;/css/&quot;&gt;CSS&lt;/a&gt; |\n    &lt;a href=&quot;/js/&quot;&gt;JavaScript&lt;/a&gt; |\n    &lt;a href=&quot;/jquery/&quot;&gt;jQuery&lt;/a&gt;\n  &lt;/nav&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>&lt;video&gt;元素</p>\n</li>\n<li><ul>\n<li>&lt;video&gt;元素用来插入视频</li>\n<li>&lt;video&gt;元素仅支持MP4，WebM，Ogg视频格式</li>\n<li>元素属性表：</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-autoplay.html\">autoplay</a></td>\n<td>autoplay</td>\n<td>如果出现该属性，则视频在就绪后马上播放。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-controls.html\">controls</a></td>\n<td>controls</td>\n<td>如果出现该属性，则向用户显示控件，比如播放按钮。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-height.html\">height</a></td>\n<td>pixels</td>\n<td>设置视频播放器的高度。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-loop.html\">loop</a></td>\n<td>loop</td>\n<td>如果出现该属性，则当媒介文件完成播放后再次开始播放。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-muted.html\">muted</a></td>\n<td>muted</td>\n<td>如果出现该属性，视频的音频输出为静音。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-poster.html\">poster</a></td>\n<td>URL</td>\n<td>规定视频正在下载时显示的图像，直到用户点击播放按钮。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-preload.html\">preload</a></td>\n<td>autometadatanone</td>\n<td>如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-src.html\">src</a></td>\n<td>URL</td>\n<td>要播放的视频的 URL。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-video-width.html\">width</a></td>\n<td>pixels</td>\n<td>设置视频播放器的宽度。</td>\n</tr>\n</tbody></table>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;video&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt;\n    &lt;source src=&quot;movie.mp4&quot;  type=&quot;video/mp4&quot;&gt;\n    &lt;source src=&quot;movie.ogg&quot;  type=&quot;video/ogg&quot;&gt;\n    您的浏览器不支持 HTML5 video 标签。\n  &lt;/video&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>&lt;audio&gt;元素</p>\n</li>\n<li><ul>\n<li>&lt;audio&gt;元素用来插入音频</li>\n<li>&lt;audio&gt;元素仅支持Ogg和MP3格式</li>\n<li>元素属性表</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-autoplay.html\">autoplay</a></td>\n<td>autoplay</td>\n<td>如果出现该属性，则音频在就绪后马上播放。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-controls.html\">controls</a></td>\n<td>controls</td>\n<td>如果出现该属性，则向用户显示音频控件（比如播放/暂停按钮）。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-loop.html\">loop</a></td>\n<td>loop</td>\n<td>如果出现该属性，则每当音频结束时重新开始播放。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-muted.html\">muted</a></td>\n<td>muted</td>\n<td>如果出现该属性，则音频输出为静音。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-preload.html\">preload</a></td>\n<td>autometadatanone</td>\n<td>规定当网页加载时，音频是否默认被加载以及如何被加载。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-audio-src.html\">src</a></td>\n<td><em>URL</em></td>\n<td>规定音频文件的 URL。</td>\n</tr>\n</tbody></table>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;audio&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;audio controls&gt;\n    &lt;source src=&quot;music.ogg&quot; type=&quot;audio/ogg&quot;&gt;\n    &lt;source src=&quot;music.mp3&quot; type=&quot;audio/mpeg&quot;&gt;\n  您的浏览器不支持 audio 元素。\n  &lt;/audio&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;mark&gt;元素</li>\n</ul>\n<p>&lt;mark&gt;元素主要用来在视觉上向用户呈现哪些需要突出显示或高亮显示的文字，一般用在搜索结果中向用户高亮显示搜索关键词</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;mark&lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;神舟十二号航天员乘组圆满完成空间站阶段&lt;mark&gt;首次出舱&lt;/mark&gt;活动全部既定任务&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;ruby&gt;元素</li>\n</ul>\n<p>&lt;ruby&gt;表示中文注音或字符</p>\n<ul>\n<li>&lt;rt&gt;元素</li>\n</ul>\n<p>&lt;rt&gt;元素与&lt;ruby&gt;配合使用用来解释或发音</p>\n<ul>\n<li>&lt;rp&gt;元素</li>\n</ul>\n<p>&lt;rp&gt;元素与&lt;ruby&gt;一起使用，以定义不支持&lt;ruby&gt;元素的浏览器显示内容，以括号的形式出现如：汉字(Han Zi)</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt; \n&lt;meta charset=&quot;utf-8&quot;&gt; \n&lt;title&gt;ruby,rt,rp\n  &lt;/title&gt; \n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;ruby&gt;\n  汉 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Han&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;\n  字 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;zi&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;\n&lt;/ruby&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>&lt;details&gt;元素</li>\n</ul>\n<details>元素表示用户要求得到的细节信息，与<summary>配合使用，<summary>提供标题或图例，用户点击标题时，会显示户细节信息，<summary>元素应该是<details>元素的第一个元素\n\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;details&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;details&gt;\n        &lt;summary&gt;空间站&lt;/summary&gt;\n        空间站（space station）又称太空站、航天站。\n          是一种在近地轨道长时间运行、可供多名航天员巡访、长期工作和生活的载人航天器。\n          空间站分为单模块空间站和多模块空间站两种。\n          单模块空间站可由航天运载器一次发射入轨，多模块空间站则由航天运载器分批将各模块送入轨道，在太空中将各模块组装而成。\n          在空间站中要有人能够生活的一切设施，空间站不具备返回地球的能力。\n    &lt;/details&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"3-2-全局属性\"><a href=\"#3-2-全局属性\" class=\"headerlink\" title=\"3.2 全局属性\"></a>3.2 全局属性</h2><h4 id=\"3-2-1-contentEditable属性\"><a href=\"#3-2-1-contentEditable属性\" class=\"headerlink\" title=\"3.2.1 contentEditable属性\"></a>3.2.1 contentEditable属性</h4><p>contentEditable属性由微软开发并被其它浏览器反编译投入引用的一个全局属性，该属性允许用户编辑元素内容，该属性是一个布尔值的属性，可以被指定false或true</p>\n<p>该属性默认inherit（继承）状态，属性为true时，元素被指定为允许编辑；属性为false时，元素被指定为不允许编辑状态；未指定值时，则由inherit状态决定，如果父元素是可编辑元素，则该元素也可编辑</p>\n<p>在编辑完成后，如果想要保存其中的内容，只能把该元素的innerHTML发送到服务器端进行保存，目前还没有特别的API来保存编辑后的元素内容</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;contenteditable&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul contenteditable=&quot;true&quot;&gt;\n        &lt;li&gt;这是预编译内容&lt;/li&gt;\n        &lt;li&gt;这是预编译内容&lt;/li&gt;\n        &lt;li&gt;这是预编译内容&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1626161477737-77ec780f-ee67-4db7-aeff-ab2ff54b335d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h4 id=\"3-2-2-designMode属性\"><a href=\"#3-2-2-designMode属性\" class=\"headerlink\" title=\"3.2.2 designMode属性\"></a>3.2.2 designMode属性</h4><p>designModel属性用来指定整个页面是否可编辑，当页面可编辑时，页面中任何支持contenteditable属性的元素都变成可编辑状态。该属性只能在JavaScript脚本里被编辑修改，该属性有两个值 “on”或“off”，当属性被指定为“on”时，页面为可编辑状态，为“off”时，页面不可编辑</p>\n<p>代码：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;designMode&lt;/title&gt;\n    &lt;script&gt;\n        document.designMode=&quot;on&quot;;\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n        &lt;li&gt;这是原有内容&lt;/li&gt;\n        &lt;li&gt;这是原有内容&lt;/li&gt;\n        &lt;li&gt;这是原有内容&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;a href=&quot;javascript:void(0)&quot;&gt;链接&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1626162780404-4163f601-90ab-4986-abdd-5843a5cf39b4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h4 id=\"3-2-3-hidden属性\"><a href=\"#3-2-3-hidden属性\" class=\"headerlink\" title=\"3.2.3 hidden属性\"></a>3.2.3 hidden属性</h4><p>在HTML 5中，所有的元素都允许使用一个hidden属性。该属性类似于input元素中的 hidden元素，功能是通知浏览器不渲染该元素。使该元素处干不可见状态。但是元素中的内容还是浏览器创建的，也就是说页面装载后允许使用JavaScript脚本将该属性取消，取消后该元素变为可见状态，同时元素中的内容也即时显示出来。Hidden属性是一个布尔值的属性。当设为true时，元素处于不可见状态;当设为false时，元素处于可见状态</p>"},{"title":"(七)盒子模型","date":"2022-07-08T11:43:27.000Z","cover":"https://pic2.zhimg.com/v2-2537725d5fa341801f2da60e27320455_r.jpg","coverWidth":536,"coverHeight":289,"author":"xiguayaaaaa","from":null,"_content":"(七)盒子模型\n<!--more-->\n## .1 盒子模型概述\n\n盒子模型，顾名思义就是用来装东西的，它装的东西就是HTML元素的内容。\n\n我们可以把一个HTML元素看成是一个盒子\n\n## 7.2盒子构成\n\n一个盒子由内容，内边距，边框，外边距构成\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630546545732-4ea8d916-d374-4662-bc4b-79f5b2280ce2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 内容（content）：表示元素的宽高，若元素设置了宽度和高度，则内容空间就位宽高范围，若没有宽高，则内容空间为盒子中实际内容的所占空间\n- 内边距（padding）：表示盒子内容与边框之间的距离\n- 边框（border）：表示盒子的边框，位于内边距和外边距指甲剪\n- 外边距（margin）：表示盒子边框以外的距离\n- 注：\n\n- - 盒子的内外边距是透明的\n  - 盒子的大小不是我们通过CSS设置的width和height，而是内容宽高+内边距+边框+外边距\n\n## 7.3 盒子属性解析\n\n#### 7.3.1 内边距（padding）\n\n就是盒子里的内容距离盒子边框的距离\n\n- 作用：\n\n- - 可以让内容和盒子的边框有一定的距离\n\n- 属性值\n\n- - padding:Xpx;给盒子的内容四周都加上内边距\n  - padding:Xpx Xpx;两个值分别上下 ，左右\n  - padding:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左\n  - padding-left/right/top/bottom:Xpx;给内容的某一边加内边距\n\n示例一\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .PDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"PDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547882713-1cb0c1f2-f858-4c1b-acb7-f31f9703100d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_9%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例二\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .PDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px 30px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"PDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547995631-fba7ef81-ca54-467f-b417-33bf883906d6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例三\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .PDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px 30px 40px 50px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"PDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630548056044-bb2e3d25-f797-4698-9e4a-f2ac1de07f3b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例四\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .PDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            /*padding-left: 20px;*/\n            /*padding-right: 20px;*/\n            /*padding-top: 20px;*/\n            padding-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"PDemo\">这是内容</div>\n</body>\n</html>\n```\n\n#### 7.3.2 边框（border）\n\n表示盒子的边界\n\n- 作用\n\n- - 为盒子四周或某一边添加带有颜色的边框\n\n- 属性\n\n- - border:边框宽度  实线/虚线 颜色\n  - border-left/right/top/bottom:边框宽度  实线/虚线 颜色\n\n示例一\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .BDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            border: 3px solid black;\n        }\n    </style>\n</head>\n<body>\n<div class=\"BDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549338273-f61b86c7-aa74-4672-b852-8eeb4de811ab.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_9%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例二\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .BDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            /*border: 3px solid black;*/\n            border-top:3px solid black; ;\n        }\n    </style>\n</head>\n<body>\n<div class=\"BDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549747573-1400452d-3701-4e50-a180-21e85f9a8d07.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_9%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n#### 7.3.3 外边距（margin）\n\n表示盒子距离它周围的距离\n\n- 作用：可以用来调整元素与元素之间的间距，也可以用来移动元素（注：微调）\n- 属性：\n\n- - margin:Xpx;给盒子的内容四周都加上外边距\n  - margin:Xpx Xpx;两个值分别上下 ，左右\n  - margin:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左（外边距它渲染显示的时候也是从左上开始）\n  - margin-left/right/top/bottom:Xpx;使盒子对四周的某一边有距离\n\n- 注：\n\n- - 元素在渲染显示的时候左上属性优先\n\n示例一\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100px;\n            height: 100px;\n            background-color: #339fff;\n            /*margin: 20px;*/\n            /*margin-top: 20px;*/\n            /*margin-right: 20px;*/\n            /*margin-left: 20px;*/\n            /*margin-bottom: 20px;*/\n            /*margin: 20px 40px;*/\n            margin: 20px 30px 40px 50px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>\n```\n\n实例二\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100px;\n            height: 100px;\n            background-color: #339fff;\n            margin: 20px 30px 40px 50px;\n            float: left;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n    <div class=\"box\"></div>\n</body>\n</html>\n```","source":"_posts/七-盒子模型.md","raw":"---\ntitle: (七)盒子模型\ndate: 2022-07-08 19:43:27\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://pic2.zhimg.com/v2-2537725d5fa341801f2da60e27320455_r.jpg\ncoverWidth: 536\ncoverHeight: 289\nauthor: xiguayaaaaa\nfrom:\n---\n(七)盒子模型\n<!--more-->\n## .1 盒子模型概述\n\n盒子模型，顾名思义就是用来装东西的，它装的东西就是HTML元素的内容。\n\n我们可以把一个HTML元素看成是一个盒子\n\n## 7.2盒子构成\n\n一个盒子由内容，内边距，边框，外边距构成\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630546545732-4ea8d916-d374-4662-bc4b-79f5b2280ce2.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 内容（content）：表示元素的宽高，若元素设置了宽度和高度，则内容空间就位宽高范围，若没有宽高，则内容空间为盒子中实际内容的所占空间\n- 内边距（padding）：表示盒子内容与边框之间的距离\n- 边框（border）：表示盒子的边框，位于内边距和外边距指甲剪\n- 外边距（margin）：表示盒子边框以外的距离\n- 注：\n\n- - 盒子的内外边距是透明的\n  - 盒子的大小不是我们通过CSS设置的width和height，而是内容宽高+内边距+边框+外边距\n\n## 7.3 盒子属性解析\n\n#### 7.3.1 内边距（padding）\n\n就是盒子里的内容距离盒子边框的距离\n\n- 作用：\n\n- - 可以让内容和盒子的边框有一定的距离\n\n- 属性值\n\n- - padding:Xpx;给盒子的内容四周都加上内边距\n  - padding:Xpx Xpx;两个值分别上下 ，左右\n  - padding:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左\n  - padding-left/right/top/bottom:Xpx;给内容的某一边加内边距\n\n示例一\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .PDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"PDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547882713-1cb0c1f2-f858-4c1b-acb7-f31f9703100d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_9%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例二\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .PDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px 30px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"PDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547995631-fba7ef81-ca54-467f-b417-33bf883906d6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例三\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .PDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px 30px 40px 50px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"PDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630548056044-bb2e3d25-f797-4698-9e4a-f2ac1de07f3b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例四\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .PDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            /*padding-left: 20px;*/\n            /*padding-right: 20px;*/\n            /*padding-top: 20px;*/\n            padding-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"PDemo\">这是内容</div>\n</body>\n</html>\n```\n\n#### 7.3.2 边框（border）\n\n表示盒子的边界\n\n- 作用\n\n- - 为盒子四周或某一边添加带有颜色的边框\n\n- 属性\n\n- - border:边框宽度  实线/虚线 颜色\n  - border-left/right/top/bottom:边框宽度  实线/虚线 颜色\n\n示例一\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .BDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            border: 3px solid black;\n        }\n    </style>\n</head>\n<body>\n<div class=\"BDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549338273-f61b86c7-aa74-4672-b852-8eeb4de811ab.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_9%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例二\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .BDemo{\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            /*border: 3px solid black;*/\n            border-top:3px solid black; ;\n        }\n    </style>\n</head>\n<body>\n<div class=\"BDemo\">这是内容</div>\n</body>\n</html>\n```\n\n运行结果\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549747573-1400452d-3701-4e50-a180-21e85f9a8d07.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_9%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n#### 7.3.3 外边距（margin）\n\n表示盒子距离它周围的距离\n\n- 作用：可以用来调整元素与元素之间的间距，也可以用来移动元素（注：微调）\n- 属性：\n\n- - margin:Xpx;给盒子的内容四周都加上外边距\n  - margin:Xpx Xpx;两个值分别上下 ，左右\n  - margin:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左（外边距它渲染显示的时候也是从左上开始）\n  - margin-left/right/top/bottom:Xpx;使盒子对四周的某一边有距离\n\n- 注：\n\n- - 元素在渲染显示的时候左上属性优先\n\n示例一\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100px;\n            height: 100px;\n            background-color: #339fff;\n            /*margin: 20px;*/\n            /*margin-top: 20px;*/\n            /*margin-right: 20px;*/\n            /*margin-left: 20px;*/\n            /*margin-bottom: 20px;*/\n            /*margin: 20px 40px;*/\n            margin: 20px 30px 40px 50px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>\n```\n\n实例二\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100px;\n            height: 100px;\n            background-color: #339fff;\n            margin: 20px 30px 40px 50px;\n            float: left;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n    <div class=\"box\"></div>\n</body>\n</html>\n```","slug":"七-盒子模型","published":1,"updated":"2022-07-19T02:30:21.248Z","_id":"cl5hmbtlw000p2cujarhm1g62","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(七)盒子模型</p>\n<span id=\"more\"></span>\n<h2 id=\"1-盒子模型概述\"><a href=\"#1-盒子模型概述\" class=\"headerlink\" title=\".1 盒子模型概述\"></a>.1 盒子模型概述</h2><p>盒子模型，顾名思义就是用来装东西的，它装的东西就是HTML元素的内容。</p>\n<p>我们可以把一个HTML元素看成是一个盒子</p>\n<h2 id=\"7-2盒子构成\"><a href=\"#7-2盒子构成\" class=\"headerlink\" title=\"7.2盒子构成\"></a>7.2盒子构成</h2><p>一个盒子由内容，内边距，边框，外边距构成</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630546545732-4ea8d916-d374-4662-bc4b-79f5b2280ce2.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>内容（content）：表示元素的宽高，若元素设置了宽度和高度，则内容空间就位宽高范围，若没有宽高，则内容空间为盒子中实际内容的所占空间</p>\n</li>\n<li><p>内边距（padding）：表示盒子内容与边框之间的距离</p>\n</li>\n<li><p>边框（border）：表示盒子的边框，位于内边距和外边距指甲剪</p>\n</li>\n<li><p>外边距（margin）：表示盒子边框以外的距离</p>\n</li>\n<li><p>注：</p>\n</li>\n<li><ul>\n<li>盒子的内外边距是透明的</li>\n<li>盒子的大小不是我们通过CSS设置的width和height，而是内容宽高+内边距+边框+外边距</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-3-盒子属性解析\"><a href=\"#7-3-盒子属性解析\" class=\"headerlink\" title=\"7.3 盒子属性解析\"></a>7.3 盒子属性解析</h2><h4 id=\"7-3-1-内边距（padding）\"><a href=\"#7-3-1-内边距（padding）\" class=\"headerlink\" title=\"7.3.1 内边距（padding）\"></a>7.3.1 内边距（padding）</h4><p>就是盒子里的内容距离盒子边框的距离</p>\n<ul>\n<li><p>作用：</p>\n</li>\n<li><ul>\n<li>可以让内容和盒子的边框有一定的距离</li>\n</ul>\n</li>\n<li><p>属性值</p>\n</li>\n<li><ul>\n<li>padding:Xpx;给盒子的内容四周都加上内边距</li>\n<li>padding:Xpx Xpx;两个值分别上下 ，左右</li>\n<li>padding:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左</li>\n<li>padding-left/right/top/bottom:Xpx;给内容的某一边加内边距</li>\n</ul>\n</li>\n</ul>\n<p>示例一</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .PDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547882713-1cb0c1f2-f858-4c1b-acb7-f31f9703100d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_9,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .PDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px 30px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547995631-fba7ef81-ca54-467f-b417-33bf883906d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_10,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例三</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .PDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px 30px 40px 50px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630548056044-bb2e3d25-f797-4698-9e4a-f2ac1de07f3b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例四</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .PDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            /*padding-left: 20px;*/\n            /*padding-right: 20px;*/\n            /*padding-top: 20px;*/\n            padding-bottom: 20px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"7-3-2-边框（border）\"><a href=\"#7-3-2-边框（border）\" class=\"headerlink\" title=\"7.3.2 边框（border）\"></a>7.3.2 边框（border）</h4><p>表示盒子的边界</p>\n<ul>\n<li><p>作用</p>\n</li>\n<li><ul>\n<li>为盒子四周或某一边添加带有颜色的边框</li>\n</ul>\n</li>\n<li><p>属性</p>\n</li>\n<li><ul>\n<li>border:边框宽度  实线/虚线 颜色</li>\n<li>border-left/right/top/bottom:边框宽度  实线/虚线 颜色</li>\n</ul>\n</li>\n</ul>\n<p>示例一</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .BDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            border: 3px solid black;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=&quot;BDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549338273-f61b86c7-aa74-4672-b852-8eeb4de811ab.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_9,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .BDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            /*border: 3px solid black;*/\n            border-top:3px solid black; ;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=&quot;BDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549747573-1400452d-3701-4e50-a180-21e85f9a8d07.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_9,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h4 id=\"7-3-3-外边距（margin）\"><a href=\"#7-3-3-外边距（margin）\" class=\"headerlink\" title=\"7.3.3 外边距（margin）\"></a>7.3.3 外边距（margin）</h4><p>表示盒子距离它周围的距离</p>\n<ul>\n<li><p>作用：可以用来调整元素与元素之间的间距，也可以用来移动元素（注：微调）</p>\n</li>\n<li><p>属性：</p>\n</li>\n<li><ul>\n<li>margin:Xpx;给盒子的内容四周都加上外边距</li>\n<li>margin:Xpx Xpx;两个值分别上下 ，左右</li>\n<li>margin:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左（外边距它渲染显示的时候也是从左上开始）</li>\n<li>margin-left/right/top/bottom:Xpx;使盒子对四周的某一边有距离</li>\n</ul>\n</li>\n<li><p>注：</p>\n</li>\n<li><ul>\n<li>元素在渲染显示的时候左上属性优先</li>\n</ul>\n</li>\n</ul>\n<p>示例一</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100px;\n            height: 100px;\n            background-color: #339fff;\n            /*margin: 20px;*/\n            /*margin-top: 20px;*/\n            /*margin-right: 20px;*/\n            /*margin-left: 20px;*/\n            /*margin-bottom: 20px;*/\n            /*margin: 20px 40px;*/\n            margin: 20px 30px 40px 50px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>实例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100px;\n            height: 100px;\n            background-color: #339fff;\n            margin: 20px 30px 40px 50px;\n            float: left;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>(七)盒子模型</p>","more":"<h2 id=\"1-盒子模型概述\"><a href=\"#1-盒子模型概述\" class=\"headerlink\" title=\".1 盒子模型概述\"></a>.1 盒子模型概述</h2><p>盒子模型，顾名思义就是用来装东西的，它装的东西就是HTML元素的内容。</p>\n<p>我们可以把一个HTML元素看成是一个盒子</p>\n<h2 id=\"7-2盒子构成\"><a href=\"#7-2盒子构成\" class=\"headerlink\" title=\"7.2盒子构成\"></a>7.2盒子构成</h2><p>一个盒子由内容，内边距，边框，外边距构成</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630546545732-4ea8d916-d374-4662-bc4b-79f5b2280ce2.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>内容（content）：表示元素的宽高，若元素设置了宽度和高度，则内容空间就位宽高范围，若没有宽高，则内容空间为盒子中实际内容的所占空间</p>\n</li>\n<li><p>内边距（padding）：表示盒子内容与边框之间的距离</p>\n</li>\n<li><p>边框（border）：表示盒子的边框，位于内边距和外边距指甲剪</p>\n</li>\n<li><p>外边距（margin）：表示盒子边框以外的距离</p>\n</li>\n<li><p>注：</p>\n</li>\n<li><ul>\n<li>盒子的内外边距是透明的</li>\n<li>盒子的大小不是我们通过CSS设置的width和height，而是内容宽高+内边距+边框+外边距</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-3-盒子属性解析\"><a href=\"#7-3-盒子属性解析\" class=\"headerlink\" title=\"7.3 盒子属性解析\"></a>7.3 盒子属性解析</h2><h4 id=\"7-3-1-内边距（padding）\"><a href=\"#7-3-1-内边距（padding）\" class=\"headerlink\" title=\"7.3.1 内边距（padding）\"></a>7.3.1 内边距（padding）</h4><p>就是盒子里的内容距离盒子边框的距离</p>\n<ul>\n<li><p>作用：</p>\n</li>\n<li><ul>\n<li>可以让内容和盒子的边框有一定的距离</li>\n</ul>\n</li>\n<li><p>属性值</p>\n</li>\n<li><ul>\n<li>padding:Xpx;给盒子的内容四周都加上内边距</li>\n<li>padding:Xpx Xpx;两个值分别上下 ，左右</li>\n<li>padding:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左</li>\n<li>padding-left/right/top/bottom:Xpx;给内容的某一边加内边距</li>\n</ul>\n</li>\n</ul>\n<p>示例一</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .PDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547882713-1cb0c1f2-f858-4c1b-acb7-f31f9703100d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_9,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .PDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px 30px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547995631-fba7ef81-ca54-467f-b417-33bf883906d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_10,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例三</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .PDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            padding: 20px 30px 40px 50px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630548056044-bb2e3d25-f797-4698-9e4a-f2ac1de07f3b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例四</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .PDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            /*padding-left: 20px;*/\n            /*padding-right: 20px;*/\n            /*padding-top: 20px;*/\n            padding-bottom: 20px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"7-3-2-边框（border）\"><a href=\"#7-3-2-边框（border）\" class=\"headerlink\" title=\"7.3.2 边框（border）\"></a>7.3.2 边框（border）</h4><p>表示盒子的边界</p>\n<ul>\n<li><p>作用</p>\n</li>\n<li><ul>\n<li>为盒子四周或某一边添加带有颜色的边框</li>\n</ul>\n</li>\n<li><p>属性</p>\n</li>\n<li><ul>\n<li>border:边框宽度  实线/虚线 颜色</li>\n<li>border-left/right/top/bottom:边框宽度  实线/虚线 颜色</li>\n</ul>\n</li>\n</ul>\n<p>示例一</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .BDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            border: 3px solid black;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=&quot;BDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549338273-f61b86c7-aa74-4672-b852-8eeb4de811ab.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_9,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .BDemo&#123;\n            width: 150px;\n            height: 100px;\n            background-color: red;\n            /*border: 3px solid black;*/\n            border-top:3px solid black; ;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=&quot;BDemo&quot;&gt;这是内容&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>运行结果</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549747573-1400452d-3701-4e50-a180-21e85f9a8d07.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_9,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h4 id=\"7-3-3-外边距（margin）\"><a href=\"#7-3-3-外边距（margin）\" class=\"headerlink\" title=\"7.3.3 外边距（margin）\"></a>7.3.3 外边距（margin）</h4><p>表示盒子距离它周围的距离</p>\n<ul>\n<li><p>作用：可以用来调整元素与元素之间的间距，也可以用来移动元素（注：微调）</p>\n</li>\n<li><p>属性：</p>\n</li>\n<li><ul>\n<li>margin:Xpx;给盒子的内容四周都加上外边距</li>\n<li>margin:Xpx Xpx;两个值分别上下 ，左右</li>\n<li>margin:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左（外边距它渲染显示的时候也是从左上开始）</li>\n<li>margin-left/right/top/bottom:Xpx;使盒子对四周的某一边有距离</li>\n</ul>\n</li>\n<li><p>注：</p>\n</li>\n<li><ul>\n<li>元素在渲染显示的时候左上属性优先</li>\n</ul>\n</li>\n</ul>\n<p>示例一</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100px;\n            height: 100px;\n            background-color: #339fff;\n            /*margin: 20px;*/\n            /*margin-top: 20px;*/\n            /*margin-right: 20px;*/\n            /*margin-left: 20px;*/\n            /*margin-bottom: 20px;*/\n            /*margin: 20px 40px;*/\n            margin: 20px 30px 40px 50px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>实例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100px;\n            height: 100px;\n            background-color: #339fff;\n            margin: 20px 30px 40px 50px;\n            float: left;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"title":"(九)动画","date":"2022-07-08T12:39:07.000Z","cover":"https://www.jsdaima.com/kindeditor/attached/image/20191230/20191230232727_70239.png","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"(九)动画\n\n<!--more-->\n\nCSS动画是W3C于2009年发布3D变形动画（标准草案），在年底发布了2D变形动画\n\n浏览器支持使用代码形成网页动画，并且有些浏览器在添加时为了更好的兼容性，需要添加浏览器引擎的私有属性\n\n1. 谷歌：-webkit-\n2. 火狐：-moz-\n3. IE9：-ms-\n4. 其它一些浏览器不需要添加这些私有属性\n\n## 9.1 CSS 2D动画\n\n- 2D动画可以用于元素的旋转，缩放，位移等\n- 基本语法\n\n| transform:none\\|transform-function                           |\n| ------------------------------------------------------------ |\n| none为默认值                                                 |\n| transform-function：变形函数（变形函数可以是一个，也可以是多个函数列表）  函数是以()结尾 |\n\n- 常见的变形函数\n\n- - translate():移动元素\n  - scale():元素缩放，可以是任意尺寸发生变形\n  - rotate():旋转元素，取一个度数值，度数的后缀为deg，当度数为正时为顺时针旋转，为负时为逆时针旋转\n  - skew()：元素斜切，取度数值让元素发生形状变化\n\n- 旋转rotate()\n\n- - 让元素逆时针或顺时针旋转\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        /*伪类样式：当鼠标悬停在元素上时触发里面的样式属性*/\n        .box:hover{\n            transform: rotate(90deg);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">1</div>\n</body>\n</html>\n```\n\n- 位置移动translate(左值，上值)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n        }\n        .two{\n            transform: translate(100px,100px);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n    <div class=\"box two\">这是2</div>\n</body>\n</html>\n```\n\n- 放大缩小（scale(宽度放大倍数,高度放大倍数)    当放大时两个值大于1，如果值位于0,1之间时为缩小）\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        .box:hover{\n            transform: scale(0.5,2);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n\n</body>\n</html>\n```\n\n- 斜切（skew(Y轴角度，X轴角度)），当度数为正值时从左边斜切，为负值时从右边斜切\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        .box:hover{\n            transform: skew(45deg,10deg);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n\n</body>\n</html>\n```\n\n#### 9.1.1 简易照片墙\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin: 0 auto;\n        }\n        .PBox{\n            width: 100%;\n            height: 400px;\n            background-color: #efefef;\n            display: flex;\n            flex-wrap: nowrap;\n            justify-content: space-around;\n        }\n        .PBox dl{\n            width: 10%;\n            height: 70%;\n            background-color: white;\n            /*为了让照片看起来有那么点感觉，这里添加一个阴影*/\n            box-shadow: 0px 10px 30px #8c8c8c;\n            padding: 10px 20px;\n            margin-top: 40px;\n        }\n        .PBox dt{\n            width: 100%;\n            height: 80%;\n        }\n        .PBox dt img{\n            width: 100%;\n            height: 100%;\n        }\n        .PBox dd{\n            width: 100%;\n            text-align: center;\n            /*因为标签有一些默认的属性值，它在标签执行时就自动加载了，\n            我们可以通过来提升自定义属性优先级来覆盖它*/\n            margin: 8px 0px!important;\n        }\n        /*定义动画样式，让照片墙看起来不要那么规整*/\n        .trans1{\n            transform: skew(5deg,2deg);\n        }\n        .trans2{\n            transform: scale(0.9,0.8);\n        }\n        .trans3{\n            transform: rotate(25deg);\n        }\n        .trans4{\n            transform: rotate(20deg) scale(1.1,1.1);\n        }\n        .trans5{\n            transform: skew(5deg,2deg) scale(0.9,0.9);\n        }\n    </style>\n</head>\n<body>\n    <!--网页版的照片墙，一共两行-->\n    <div class=\"PBox\">\n        <!--单个照片-->\n        <dl class=\"trans1\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans2\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans4\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans5\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans3\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl>\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n    </div>\n    <div class=\"PBox\">\n        <!--单个照片-->\n        <dl>\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans5\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans2\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans1\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans3\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans4\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n    </div>\n</body>\n</html>\n```\n\n## 9.2 过渡\n\n- 过渡是元素从一种样式逐渐改变成另一种样式\n- 语法\n\ntransition:过渡属性名称 [时间] [效果]\n\n| 过渡属性            | 描述                             |\n| ------------------- | -------------------------------- |\n| transition          | 简写，该属性中包含了所有过渡属性 |\n| transition-property | 规定应用过渡的CSS属性名称        |\n| transition-duration | 过渡时间，默认为0                |\n| transition-delay    | 过渡从什么时候开始               |\n| .......             | ........                         |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        .box:hover{\n            /*transform: skew(45deg,10deg);*/\n            transform: scale(2,2);\n            transition: transform 1s;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n\n</body>\n</html>\n```\n\n#### 9.2.1 通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）\n\n```html\n//长按案例\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        .box:active{\n            /*transform: skew(45deg,10deg);*/\n            transform: scale(2,2);\n            transition: transform 1s;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n\n</body>\n</html>\n```\n\n## 9.3 自定义动画\n\n- 使用Animation功能可以实现更加复杂的动画\n\n| 属性                      | 说明           | 初始值                |\n| ------------------------- | -------------- | --------------------- |\n| animation                 | 包含所有属性   |                       |\n| animation-name            | 动画名称       | none                  |\n| animation-duration        | 动画时间       | 0                     |\n| animation-timing-function | 动画播放方式   | ease                  |\n| animation-iteration-count | 动画播放的次数 | 1，infinite为重复播放 |\n\n- 制作动画需要以下两步\n\n- - 第一步：需要在样式表中添加动画过程属性\n\n```html\n@-webkit-keyframes name {\n    /*动画开始时属性样式*/\n    0%{\n    /*样式属性：属性值*/\n    }\n    /*动画结束时属性样式*/\n    100%{\n    /*样式属性：属性值*/\n    }\n  }\n\n  @keyframes name {\n    /*动画开始时属性样式*/\n    0%{\n    /*样式属性：属性值*/\n    }\n    /*动画结束时属性样式*/\n    100%{\n    /*样式属性：属性值*/\n    }\n\t}\n```\n\n- - 第二步：将制作好的动画通过animation引入给标签使用\n\n```html\n//图片翻转\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin: 0 auto;\n            padding: 0px;\n        }\n        .box{\n            width: 500px;\n            height: 300px;\n            background-image: url(\"img/IMG_E1640.JPG\");\n            background-size: 100%;\n            /*引用动画*/\n            animation:rotateImg 10s infinite;\n        }\n\n        /*制作动画执行过程*/\n        @-webkit-keyframes rotateImg {\n            0%{\n                /*图片起始不动*/\n                -webkit-transform: rotateY(0deg);\n            }\n            50%{\n                -webkit-transform: rotateY(360deg);\n            }\n            100%{\n                -webkit-transform: rotateY(720deg);\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>\n```\n\n光盘旋转效果\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin: 0 auto;\n            padding: 0px;\n        }\n        .box{\n            width: 500px;\n            height: 500px;\n            background-image: url(\"img/IMG_E1640.JPG\");\n            background-size: 100% 100%;\n            border-radius: 50%;\n            display: flex;\n            /*引用大圆旋转动画*/\n            animation: box 30s linear infinite;\n        }\n        .lb{\n            width: 400px;\n            height: 400px;\n            background-image: url(\"img/IMG_1443.JPG\");\n            background-size: 100% 100%;\n            border-radius: 50%;\n            align-self: center;\n            animation: lb 15s linear infinite;\n        }\n        /*制作动画：大圆要顺时针旋转，稍慢*/\n        @-webkit-keyframes box {\n            0%{\n                -webkit-transform: rotate(0deg);\n            }\n            100%{\n                -webkit-transform: rotate(360deg);\n            }\n        }\n        /*制作动画：小圆要逆时针旋转，稍快*/\n        @-webkit-keyframes lb {\n            0%{\n                -webkit-transform: rotate(0deg);\n            }\n            100%{\n                -webkit-transform: rotate(-360deg) rotateY(360deg);\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"lb\"></div>\n    </div>\n</body>\n</html>\n```\n\n3D旋转相册\n\n```html\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title></title>\n<style>\nbody {\n\tbackground:#06081B;\n\tperspective:5000px;\n}\n.show {\n\tperspective:5000px;\n\t-webkit-transform:rotateX(-45deg);\n\t-moz-transform:rotateX(-45deg);\n\ttransform:rotateX(-45deg);\n\ttransform-style:preserve-3d;\n\n}\n.box {\n\tposition:relative;\n\twidth:150px;\n\theight:250px;\n\n\tmargin:300px auto;\n\ttransform-style:preserve-3d;\n\t-webkit-animation:rotate1 10s linear infinite;\n\t-moz-animation:rotate1 10s linear infinite;\n\tanimation:rotate1 10s linear infinite;\n    background-image: url(\"img/IMG_E1640.JPG\");\n    background-size: 100%;\n}\n.box img {\n\twidth:150px;\n\theight:250px;\n\tborder:1px solid #ccc;\n\tposition:absolute;\n\tleft:0;\n\ttop:0;\n\t-webkit-box-reflect:below 20px -webkit-linear-gradient(top,rgba(250,250,250,0),rgba(250,250,250,0) 30%,rgba(250,250,250,0.5));\n}\n.img1 {\n\t-webkit-transform:translateZ(300px);\n\t-moz-transform:translateZ(300px);\n\ttransform:translateZ(300px);\n}\n.img2 {\n\t-webkit-transform:rotateY(36deg) translateZ(300px);\n\t-moz-transform:rotateY(36deg) translateZ(300px);\n\ttransform:rotateY(36deg) translateZ(300px);\n}\n.img3 {\n\t-webkit-transform:rotateY(72deg) translateZ(300px);\n\t-moz-transform:rotateY(72deg) translateZ(300px);\n}\n.img4 {\n\t-webkit-transform:rotateY(108deg) translateZ(300px);\n\t-moz-transform:rotateY(108deg) translateZ(300px);\n\ttransform:rotateY(108deg) translateZ(300px);\n}\n.img5 {\n\t-webkit-transform:rotateY(144deg) translateZ(300px);\n\t-moz-transform:rotateY(144deg) translateZ(300px);\n\ttransform:rotateY(144deg) translateZ(300px);\n}\n.img6 {\n\t-webkit-transform:rotateY(180deg) translateZ(300px);\n\t-moz-transform:rotateY(180deg) translateZ(300px);\n\ttransform:rotateY(180deg) translateZ(300px);\n}\n.img7 {\n\t-webkit-transform:rotateY(216deg) translateZ(300px);\n\t-moz-transform:rotateY(216deg) translateZ(300px);\n\ttransform:rotateY(216deg) translateZ(300px);\n}\n.img8 {\n\t-webkit-transform:rotateY(252deg) translateZ(300px);\n\t-moz-transform:rotateY(252deg) translateZ(300px);\n\ttransform:rotateY(252deg) translateZ(300px);\n}\n.img9 {\n\t-webkit-transform:rotateY(288deg) translateZ(300px);\n\t-moz-transform:rotateY(288deg) translateZ(300px);\n\ttransform:rotateY(288deg) translateZ(300px);\n}\n.img10 {\n\t-webkit-transform:rotateY(324deg) translateZ(300px);\n\t-moz-transform:rotateY(324deg) translateZ(300px);\n\ttransform:rotateY(324deg) translateZ(300px);\n}\n@-moz-keyframes rotate1 {\n\t0% {\n\t-webkit-transform:rotateY(0deg);\n\t-moz-transform:rotateY(0deg);\n\ttransform:rotateY(0deg);\n}\n100% {\n\t-webkit-transform:rotateY(360deg);\n\t-moz-transform:rotateY(360deg);\n\ttransform:rotateY(360deg);\n}\n}@-webkit-keyframes rotate1 {\n\t0% {\n\t-webkit-transform:rotateY(0deg);\n\t-moz-transform:rotateY(0deg);\n\ttransform:rotateY(0deg);\n}\n100% {\n\t-webkit-transform:rotateY(360deg);\n\t-moz-transform:rotateY(360deg);\n\ttransform:rotateY(360deg);\n}\n}</style>\n</head>\n<body>\n<div class=\"show\">\n    <div class=\"box\">\n        <img src=\"img/IMG_E1642.JPG\" class=\"img1\">\n        <img src=\"img/IMG_E1644.JPG\" class=\"img2\">\n        <img src=\"img/IMG_E1640.JPG\" class=\"img3\">\n        <img src=\"img/IMG_1444.JPG\" class=\"img4\">\n        <img src=\"img/IMG_1440.JPG\" class=\"img5\">\n        <img src=\"img/IMG_1439.JPG\" class=\"img6\">\n        <img src=\"img/IMG_1430.JPG\" class=\"img7\">\n        <img src=\"img/IMG_1427.JPG\" class=\"img8\">\n        <img src=\"img/IMG_1429.JPG\" class=\"img9\">\n        <img src=\"img/IMG_1443.JPG\" class=\"img10\">\n    </div>\n</div>\n\n\n</body>\n</html>\n```\n\n- 定位(position)\n\n- - 属性\n\n- - - absolute：绝对定位   会让元素脱离文档流，会参照第一个父元素进行定位\n    - fiexd：规定位置，将元素固定在某个位置不动，不管网页怎么拖动，该元素始终不动\n    - relative：相对定位，相对于正常位置进行定位\n    - inherit：继承，规定添加了该属性的元素继承它父元素的定位属性\n\n- - 注：添加了定位后，对于标签位置移动时不使用margin，而使用left,right,top,bottom\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            margin: 100px;\n            position: relative;\n        }\n        .rows{\n            width: 400px;\n            height: 200px;\n        }\n        .cols{\n            width: 50%;\n            height: 100%;\n            float: left;\n        }\n        .c1{\n            background-color: #ee3fb3;\n        }\n        .c2{\n            background-color: #50eecd;\n        }\n        .lb{\n            width: 200px;\n            height: 200px;\n            background-color: #17ff0a;\n            position: absolute;\n            top: 100px;\n            left: 100px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"rows\">\n            <div class=\"cols c1\"></div>\n            <div class=\"cols c2\"></div>\n        </div>\n        <div class=\"rows\">\n            <div class=\"cols c2\"></div>\n            <div class=\"cols c1\"></div>\n        </div>\n        <div class=\"lb\"></div>\n    </div>\n</body>\n</html>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .b1{\n            height: 1000px;\n            background-color: #50eecd;\n        }\n        .b2{\n            height: 1000px;\n            background-color: #41ee4e;\n        }\n        .b3{\n            height: 1000px;\n            background-color: #edee4f;\n        }\n        .b4{\n            height: 1000px;\n            background-color: #ee3b13;\n        }\n        .b5{\n            height: 1000px;\n            background-color: #c25eee;\n        }\n        .fixedDemo{\n            position: fixed;\n            right: 0px;\n            top: 30%;\n            background-color: #17ff0a;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"b1\"></div>\n    <div class=\"b2\"></div>\n    <div class=\"b3\"></div>\n    <div class=\"b4\"></div>\n    <div class=\"b5\"></div>\n    <div class=\"fixedDemo\">若干国粹</div>\n</body>\n</html>\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .b1{\n            height: 1000px;\n            background-color: #50eecd;\n        }\n        .b2{\n            height: 1000px;\n            background-color: #41ee4e;\n        }\n        .b3{\n            height: 1000px;\n            background-color: #edee4f;\n        }\n        .b4{\n            height: 1000px;\n            background-color: #ee3b13;\n        }\n        .b5{\n            height: 1000px;\n            background-color: #c25eee;\n        }\n        .fixedDemo{\n            position: fixed;\n            right: 0px;\n            top: 30%;\n            background-color: #17ff0a;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"b1\"></div>\n    <div class=\"b2\"></div>\n    <div class=\"b3\"></div>\n    <div class=\"b4\"></div>\n    <div class=\"b5\"></div>\n    <div class=\"fixedDemo\">若干国粹</div>\n</body>\n</html>\n```","source":"_posts/九-动画.md","raw":"---\ntitle: (九)动画\ndate: 2022-07-08 20:39:07\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://www.jsdaima.com/kindeditor/attached/image/20191230/20191230232727_70239.png\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n\n---\n(九)动画\n\n<!--more-->\n\nCSS动画是W3C于2009年发布3D变形动画（标准草案），在年底发布了2D变形动画\n\n浏览器支持使用代码形成网页动画，并且有些浏览器在添加时为了更好的兼容性，需要添加浏览器引擎的私有属性\n\n1. 谷歌：-webkit-\n2. 火狐：-moz-\n3. IE9：-ms-\n4. 其它一些浏览器不需要添加这些私有属性\n\n## 9.1 CSS 2D动画\n\n- 2D动画可以用于元素的旋转，缩放，位移等\n- 基本语法\n\n| transform:none\\|transform-function                           |\n| ------------------------------------------------------------ |\n| none为默认值                                                 |\n| transform-function：变形函数（变形函数可以是一个，也可以是多个函数列表）  函数是以()结尾 |\n\n- 常见的变形函数\n\n- - translate():移动元素\n  - scale():元素缩放，可以是任意尺寸发生变形\n  - rotate():旋转元素，取一个度数值，度数的后缀为deg，当度数为正时为顺时针旋转，为负时为逆时针旋转\n  - skew()：元素斜切，取度数值让元素发生形状变化\n\n- 旋转rotate()\n\n- - 让元素逆时针或顺时针旋转\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        /*伪类样式：当鼠标悬停在元素上时触发里面的样式属性*/\n        .box:hover{\n            transform: rotate(90deg);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">1</div>\n</body>\n</html>\n```\n\n- 位置移动translate(左值，上值)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n        }\n        .two{\n            transform: translate(100px,100px);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n    <div class=\"box two\">这是2</div>\n</body>\n</html>\n```\n\n- 放大缩小（scale(宽度放大倍数,高度放大倍数)    当放大时两个值大于1，如果值位于0,1之间时为缩小）\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        .box:hover{\n            transform: scale(0.5,2);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n\n</body>\n</html>\n```\n\n- 斜切（skew(Y轴角度，X轴角度)），当度数为正值时从左边斜切，为负值时从右边斜切\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        .box:hover{\n            transform: skew(45deg,10deg);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n\n</body>\n</html>\n```\n\n#### 9.1.1 简易照片墙\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin: 0 auto;\n        }\n        .PBox{\n            width: 100%;\n            height: 400px;\n            background-color: #efefef;\n            display: flex;\n            flex-wrap: nowrap;\n            justify-content: space-around;\n        }\n        .PBox dl{\n            width: 10%;\n            height: 70%;\n            background-color: white;\n            /*为了让照片看起来有那么点感觉，这里添加一个阴影*/\n            box-shadow: 0px 10px 30px #8c8c8c;\n            padding: 10px 20px;\n            margin-top: 40px;\n        }\n        .PBox dt{\n            width: 100%;\n            height: 80%;\n        }\n        .PBox dt img{\n            width: 100%;\n            height: 100%;\n        }\n        .PBox dd{\n            width: 100%;\n            text-align: center;\n            /*因为标签有一些默认的属性值，它在标签执行时就自动加载了，\n            我们可以通过来提升自定义属性优先级来覆盖它*/\n            margin: 8px 0px!important;\n        }\n        /*定义动画样式，让照片墙看起来不要那么规整*/\n        .trans1{\n            transform: skew(5deg,2deg);\n        }\n        .trans2{\n            transform: scale(0.9,0.8);\n        }\n        .trans3{\n            transform: rotate(25deg);\n        }\n        .trans4{\n            transform: rotate(20deg) scale(1.1,1.1);\n        }\n        .trans5{\n            transform: skew(5deg,2deg) scale(0.9,0.9);\n        }\n    </style>\n</head>\n<body>\n    <!--网页版的照片墙，一共两行-->\n    <div class=\"PBox\">\n        <!--单个照片-->\n        <dl class=\"trans1\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans2\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans4\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans5\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans3\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl>\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n    </div>\n    <div class=\"PBox\">\n        <!--单个照片-->\n        <dl>\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans5\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans2\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans1\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans3\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n        <dl class=\"trans4\">\n            <dt>\n                <img src=\"img/IMG_E1640.JPG\" alt=\"\">\n            </dt>\n            <dd>这是照片名称</dd>\n        </dl>\n    </div>\n</body>\n</html>\n```\n\n## 9.2 过渡\n\n- 过渡是元素从一种样式逐渐改变成另一种样式\n- 语法\n\ntransition:过渡属性名称 [时间] [效果]\n\n| 过渡属性            | 描述                             |\n| ------------------- | -------------------------------- |\n| transition          | 简写，该属性中包含了所有过渡属性 |\n| transition-property | 规定应用过渡的CSS属性名称        |\n| transition-duration | 过渡时间，默认为0                |\n| transition-delay    | 过渡从什么时候开始               |\n| .......             | ........                         |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        .box:hover{\n            /*transform: skew(45deg,10deg);*/\n            transform: scale(2,2);\n            transition: transform 1s;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n\n</body>\n</html>\n```\n\n#### 9.2.1 通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）\n\n```html\n//长按案例\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        }\n        .box:active{\n            /*transform: skew(45deg,10deg);*/\n            transform: scale(2,2);\n            transition: transform 1s;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是1</div>\n\n</body>\n</html>\n```\n\n## 9.3 自定义动画\n\n- 使用Animation功能可以实现更加复杂的动画\n\n| 属性                      | 说明           | 初始值                |\n| ------------------------- | -------------- | --------------------- |\n| animation                 | 包含所有属性   |                       |\n| animation-name            | 动画名称       | none                  |\n| animation-duration        | 动画时间       | 0                     |\n| animation-timing-function | 动画播放方式   | ease                  |\n| animation-iteration-count | 动画播放的次数 | 1，infinite为重复播放 |\n\n- 制作动画需要以下两步\n\n- - 第一步：需要在样式表中添加动画过程属性\n\n```html\n@-webkit-keyframes name {\n    /*动画开始时属性样式*/\n    0%{\n    /*样式属性：属性值*/\n    }\n    /*动画结束时属性样式*/\n    100%{\n    /*样式属性：属性值*/\n    }\n  }\n\n  @keyframes name {\n    /*动画开始时属性样式*/\n    0%{\n    /*样式属性：属性值*/\n    }\n    /*动画结束时属性样式*/\n    100%{\n    /*样式属性：属性值*/\n    }\n\t}\n```\n\n- - 第二步：将制作好的动画通过animation引入给标签使用\n\n```html\n//图片翻转\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin: 0 auto;\n            padding: 0px;\n        }\n        .box{\n            width: 500px;\n            height: 300px;\n            background-image: url(\"img/IMG_E1640.JPG\");\n            background-size: 100%;\n            /*引用动画*/\n            animation:rotateImg 10s infinite;\n        }\n\n        /*制作动画执行过程*/\n        @-webkit-keyframes rotateImg {\n            0%{\n                /*图片起始不动*/\n                -webkit-transform: rotateY(0deg);\n            }\n            50%{\n                -webkit-transform: rotateY(360deg);\n            }\n            100%{\n                -webkit-transform: rotateY(720deg);\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>\n```\n\n光盘旋转效果\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin: 0 auto;\n            padding: 0px;\n        }\n        .box{\n            width: 500px;\n            height: 500px;\n            background-image: url(\"img/IMG_E1640.JPG\");\n            background-size: 100% 100%;\n            border-radius: 50%;\n            display: flex;\n            /*引用大圆旋转动画*/\n            animation: box 30s linear infinite;\n        }\n        .lb{\n            width: 400px;\n            height: 400px;\n            background-image: url(\"img/IMG_1443.JPG\");\n            background-size: 100% 100%;\n            border-radius: 50%;\n            align-self: center;\n            animation: lb 15s linear infinite;\n        }\n        /*制作动画：大圆要顺时针旋转，稍慢*/\n        @-webkit-keyframes box {\n            0%{\n                -webkit-transform: rotate(0deg);\n            }\n            100%{\n                -webkit-transform: rotate(360deg);\n            }\n        }\n        /*制作动画：小圆要逆时针旋转，稍快*/\n        @-webkit-keyframes lb {\n            0%{\n                -webkit-transform: rotate(0deg);\n            }\n            100%{\n                -webkit-transform: rotate(-360deg) rotateY(360deg);\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"lb\"></div>\n    </div>\n</body>\n</html>\n```\n\n3D旋转相册\n\n```html\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title></title>\n<style>\nbody {\n\tbackground:#06081B;\n\tperspective:5000px;\n}\n.show {\n\tperspective:5000px;\n\t-webkit-transform:rotateX(-45deg);\n\t-moz-transform:rotateX(-45deg);\n\ttransform:rotateX(-45deg);\n\ttransform-style:preserve-3d;\n\n}\n.box {\n\tposition:relative;\n\twidth:150px;\n\theight:250px;\n\n\tmargin:300px auto;\n\ttransform-style:preserve-3d;\n\t-webkit-animation:rotate1 10s linear infinite;\n\t-moz-animation:rotate1 10s linear infinite;\n\tanimation:rotate1 10s linear infinite;\n    background-image: url(\"img/IMG_E1640.JPG\");\n    background-size: 100%;\n}\n.box img {\n\twidth:150px;\n\theight:250px;\n\tborder:1px solid #ccc;\n\tposition:absolute;\n\tleft:0;\n\ttop:0;\n\t-webkit-box-reflect:below 20px -webkit-linear-gradient(top,rgba(250,250,250,0),rgba(250,250,250,0) 30%,rgba(250,250,250,0.5));\n}\n.img1 {\n\t-webkit-transform:translateZ(300px);\n\t-moz-transform:translateZ(300px);\n\ttransform:translateZ(300px);\n}\n.img2 {\n\t-webkit-transform:rotateY(36deg) translateZ(300px);\n\t-moz-transform:rotateY(36deg) translateZ(300px);\n\ttransform:rotateY(36deg) translateZ(300px);\n}\n.img3 {\n\t-webkit-transform:rotateY(72deg) translateZ(300px);\n\t-moz-transform:rotateY(72deg) translateZ(300px);\n}\n.img4 {\n\t-webkit-transform:rotateY(108deg) translateZ(300px);\n\t-moz-transform:rotateY(108deg) translateZ(300px);\n\ttransform:rotateY(108deg) translateZ(300px);\n}\n.img5 {\n\t-webkit-transform:rotateY(144deg) translateZ(300px);\n\t-moz-transform:rotateY(144deg) translateZ(300px);\n\ttransform:rotateY(144deg) translateZ(300px);\n}\n.img6 {\n\t-webkit-transform:rotateY(180deg) translateZ(300px);\n\t-moz-transform:rotateY(180deg) translateZ(300px);\n\ttransform:rotateY(180deg) translateZ(300px);\n}\n.img7 {\n\t-webkit-transform:rotateY(216deg) translateZ(300px);\n\t-moz-transform:rotateY(216deg) translateZ(300px);\n\ttransform:rotateY(216deg) translateZ(300px);\n}\n.img8 {\n\t-webkit-transform:rotateY(252deg) translateZ(300px);\n\t-moz-transform:rotateY(252deg) translateZ(300px);\n\ttransform:rotateY(252deg) translateZ(300px);\n}\n.img9 {\n\t-webkit-transform:rotateY(288deg) translateZ(300px);\n\t-moz-transform:rotateY(288deg) translateZ(300px);\n\ttransform:rotateY(288deg) translateZ(300px);\n}\n.img10 {\n\t-webkit-transform:rotateY(324deg) translateZ(300px);\n\t-moz-transform:rotateY(324deg) translateZ(300px);\n\ttransform:rotateY(324deg) translateZ(300px);\n}\n@-moz-keyframes rotate1 {\n\t0% {\n\t-webkit-transform:rotateY(0deg);\n\t-moz-transform:rotateY(0deg);\n\ttransform:rotateY(0deg);\n}\n100% {\n\t-webkit-transform:rotateY(360deg);\n\t-moz-transform:rotateY(360deg);\n\ttransform:rotateY(360deg);\n}\n}@-webkit-keyframes rotate1 {\n\t0% {\n\t-webkit-transform:rotateY(0deg);\n\t-moz-transform:rotateY(0deg);\n\ttransform:rotateY(0deg);\n}\n100% {\n\t-webkit-transform:rotateY(360deg);\n\t-moz-transform:rotateY(360deg);\n\ttransform:rotateY(360deg);\n}\n}</style>\n</head>\n<body>\n<div class=\"show\">\n    <div class=\"box\">\n        <img src=\"img/IMG_E1642.JPG\" class=\"img1\">\n        <img src=\"img/IMG_E1644.JPG\" class=\"img2\">\n        <img src=\"img/IMG_E1640.JPG\" class=\"img3\">\n        <img src=\"img/IMG_1444.JPG\" class=\"img4\">\n        <img src=\"img/IMG_1440.JPG\" class=\"img5\">\n        <img src=\"img/IMG_1439.JPG\" class=\"img6\">\n        <img src=\"img/IMG_1430.JPG\" class=\"img7\">\n        <img src=\"img/IMG_1427.JPG\" class=\"img8\">\n        <img src=\"img/IMG_1429.JPG\" class=\"img9\">\n        <img src=\"img/IMG_1443.JPG\" class=\"img10\">\n    </div>\n</div>\n\n\n</body>\n</html>\n```\n\n- 定位(position)\n\n- - 属性\n\n- - - absolute：绝对定位   会让元素脱离文档流，会参照第一个父元素进行定位\n    - fiexd：规定位置，将元素固定在某个位置不动，不管网页怎么拖动，该元素始终不动\n    - relative：相对定位，相对于正常位置进行定位\n    - inherit：继承，规定添加了该属性的元素继承它父元素的定位属性\n\n- - 注：添加了定位后，对于标签位置移动时不使用margin，而使用left,right,top,bottom\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            margin: 100px;\n            position: relative;\n        }\n        .rows{\n            width: 400px;\n            height: 200px;\n        }\n        .cols{\n            width: 50%;\n            height: 100%;\n            float: left;\n        }\n        .c1{\n            background-color: #ee3fb3;\n        }\n        .c2{\n            background-color: #50eecd;\n        }\n        .lb{\n            width: 200px;\n            height: 200px;\n            background-color: #17ff0a;\n            position: absolute;\n            top: 100px;\n            left: 100px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"rows\">\n            <div class=\"cols c1\"></div>\n            <div class=\"cols c2\"></div>\n        </div>\n        <div class=\"rows\">\n            <div class=\"cols c2\"></div>\n            <div class=\"cols c1\"></div>\n        </div>\n        <div class=\"lb\"></div>\n    </div>\n</body>\n</html>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .b1{\n            height: 1000px;\n            background-color: #50eecd;\n        }\n        .b2{\n            height: 1000px;\n            background-color: #41ee4e;\n        }\n        .b3{\n            height: 1000px;\n            background-color: #edee4f;\n        }\n        .b4{\n            height: 1000px;\n            background-color: #ee3b13;\n        }\n        .b5{\n            height: 1000px;\n            background-color: #c25eee;\n        }\n        .fixedDemo{\n            position: fixed;\n            right: 0px;\n            top: 30%;\n            background-color: #17ff0a;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"b1\"></div>\n    <div class=\"b2\"></div>\n    <div class=\"b3\"></div>\n    <div class=\"b4\"></div>\n    <div class=\"b5\"></div>\n    <div class=\"fixedDemo\">若干国粹</div>\n</body>\n</html>\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .b1{\n            height: 1000px;\n            background-color: #50eecd;\n        }\n        .b2{\n            height: 1000px;\n            background-color: #41ee4e;\n        }\n        .b3{\n            height: 1000px;\n            background-color: #edee4f;\n        }\n        .b4{\n            height: 1000px;\n            background-color: #ee3b13;\n        }\n        .b5{\n            height: 1000px;\n            background-color: #c25eee;\n        }\n        .fixedDemo{\n            position: fixed;\n            right: 0px;\n            top: 30%;\n            background-color: #17ff0a;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"b1\"></div>\n    <div class=\"b2\"></div>\n    <div class=\"b3\"></div>\n    <div class=\"b4\"></div>\n    <div class=\"b5\"></div>\n    <div class=\"fixedDemo\">若干国粹</div>\n</body>\n</html>\n```","slug":"九-动画","published":1,"updated":"2022-07-19T02:26:14.143Z","_id":"cl5hmbtlx000t2cuj2sbzef46","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(九)动画</p>\n<span id=\"more\"></span>\n\n<p>CSS动画是W3C于2009年发布3D变形动画（标准草案），在年底发布了2D变形动画</p>\n<p>浏览器支持使用代码形成网页动画，并且有些浏览器在添加时为了更好的兼容性，需要添加浏览器引擎的私有属性</p>\n<ol>\n<li>谷歌：-webkit-</li>\n<li>火狐：-moz-</li>\n<li>IE9：-ms-</li>\n<li>其它一些浏览器不需要添加这些私有属性</li>\n</ol>\n<h2 id=\"9-1-CSS-2D动画\"><a href=\"#9-1-CSS-2D动画\" class=\"headerlink\" title=\"9.1 CSS 2D动画\"></a>9.1 CSS 2D动画</h2><ul>\n<li>2D动画可以用于元素的旋转，缩放，位移等</li>\n<li>基本语法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>transform:none|transform-function</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none为默认值</td>\n</tr>\n<tr>\n<td>transform-function：变形函数（变形函数可以是一个，也可以是多个函数列表）  函数是以()结尾</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>常见的变形函数</p>\n</li>\n<li><ul>\n<li>translate():移动元素</li>\n<li>scale():元素缩放，可以是任意尺寸发生变形</li>\n<li>rotate():旋转元素，取一个度数值，度数的后缀为deg，当度数为正时为顺时针旋转，为负时为逆时针旋转</li>\n<li>skew()：元素斜切，取度数值让元素发生形状变化</li>\n</ul>\n</li>\n<li><p>旋转rotate()</p>\n</li>\n<li><ul>\n<li>让元素逆时针或顺时针旋转</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        /*伪类样式：当鼠标悬停在元素上时触发里面的样式属性*/\n        .box:hover&#123;\n            transform: rotate(90deg);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;1&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>位置移动translate(左值，上值)</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n        &#125;\n        .two&#123;\n            transform: translate(100px,100px);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n    &lt;div class=&quot;box two&quot;&gt;这是2&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>放大缩小（scale(宽度放大倍数,高度放大倍数)    当放大时两个值大于1，如果值位于0,1之间时为缩小）</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        .box:hover&#123;\n            transform: scale(0.5,2);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>斜切（skew(Y轴角度，X轴角度)），当度数为正值时从左边斜切，为负值时从右边斜切</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        .box:hover&#123;\n            transform: skew(45deg,10deg);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"9-1-1-简易照片墙\"><a href=\"#9-1-1-简易照片墙\" class=\"headerlink\" title=\"9.1.1 简易照片墙\"></a>9.1.1 简易照片墙</h4><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0 auto;\n        &#125;\n        .PBox&#123;\n            width: 100%;\n            height: 400px;\n            background-color: #efefef;\n            display: flex;\n            flex-wrap: nowrap;\n            justify-content: space-around;\n        &#125;\n        .PBox dl&#123;\n            width: 10%;\n            height: 70%;\n            background-color: white;\n            /*为了让照片看起来有那么点感觉，这里添加一个阴影*/\n            box-shadow: 0px 10px 30px #8c8c8c;\n            padding: 10px 20px;\n            margin-top: 40px;\n        &#125;\n        .PBox dt&#123;\n            width: 100%;\n            height: 80%;\n        &#125;\n        .PBox dt img&#123;\n            width: 100%;\n            height: 100%;\n        &#125;\n        .PBox dd&#123;\n            width: 100%;\n            text-align: center;\n            /*因为标签有一些默认的属性值，它在标签执行时就自动加载了，\n            我们可以通过来提升自定义属性优先级来覆盖它*/\n            margin: 8px 0px!important;\n        &#125;\n        /*定义动画样式，让照片墙看起来不要那么规整*/\n        .trans1&#123;\n            transform: skew(5deg,2deg);\n        &#125;\n        .trans2&#123;\n            transform: scale(0.9,0.8);\n        &#125;\n        .trans3&#123;\n            transform: rotate(25deg);\n        &#125;\n        .trans4&#123;\n            transform: rotate(20deg) scale(1.1,1.1);\n        &#125;\n        .trans5&#123;\n            transform: skew(5deg,2deg) scale(0.9,0.9);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!--网页版的照片墙，一共两行--&gt;\n    &lt;div class=&quot;PBox&quot;&gt;\n        &lt;!--单个照片--&gt;\n        &lt;dl class=&quot;trans1&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans2&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans4&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans5&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans3&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;PBox&quot;&gt;\n        &lt;!--单个照片--&gt;\n        &lt;dl&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans5&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans2&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans1&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans3&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans4&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"9-2-过渡\"><a href=\"#9-2-过渡\" class=\"headerlink\" title=\"9.2 过渡\"></a>9.2 过渡</h2><ul>\n<li>过渡是元素从一种样式逐渐改变成另一种样式</li>\n<li>语法</li>\n</ul>\n<p>transition:过渡属性名称 [时间] [效果]</p>\n<table>\n<thead>\n<tr>\n<th>过渡属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>transition</td>\n<td>简写，该属性中包含了所有过渡属性</td>\n</tr>\n<tr>\n<td>transition-property</td>\n<td>规定应用过渡的CSS属性名称</td>\n</tr>\n<tr>\n<td>transition-duration</td>\n<td>过渡时间，默认为0</td>\n</tr>\n<tr>\n<td>transition-delay</td>\n<td>过渡从什么时候开始</td>\n</tr>\n<tr>\n<td>…….</td>\n<td>……..</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        .box:hover&#123;\n            /*transform: skew(45deg,10deg);*/\n            transform: scale(2,2);\n            transition: transform 1s;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"9-2-1-通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）-长按（-active）\"><a href=\"#9-2-1-通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）-长按（-active）\" class=\"headerlink\" title=\"9.2.1 通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）\"></a>9.2.1 通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）</h4><pre><code class=\"html\">//长按案例\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        .box:active&#123;\n            /*transform: skew(45deg,10deg);*/\n            transform: scale(2,2);\n            transition: transform 1s;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"9-3-自定义动画\"><a href=\"#9-3-自定义动画\" class=\"headerlink\" title=\"9.3 自定义动画\"></a>9.3 自定义动画</h2><ul>\n<li>使用Animation功能可以实现更加复杂的动画</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>初始值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>animation</td>\n<td>包含所有属性</td>\n<td></td>\n</tr>\n<tr>\n<td>animation-name</td>\n<td>动画名称</td>\n<td>none</td>\n</tr>\n<tr>\n<td>animation-duration</td>\n<td>动画时间</td>\n<td>0</td>\n</tr>\n<tr>\n<td>animation-timing-function</td>\n<td>动画播放方式</td>\n<td>ease</td>\n</tr>\n<tr>\n<td>animation-iteration-count</td>\n<td>动画播放的次数</td>\n<td>1，infinite为重复播放</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>制作动画需要以下两步</p>\n</li>\n<li><ul>\n<li>第一步：需要在样式表中添加动画过程属性</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">@-webkit-keyframes name &#123;\n    /*动画开始时属性样式*/\n    0%&#123;\n    /*样式属性：属性值*/\n    &#125;\n    /*动画结束时属性样式*/\n    100%&#123;\n    /*样式属性：属性值*/\n    &#125;\n  &#125;\n\n  @keyframes name &#123;\n    /*动画开始时属性样式*/\n    0%&#123;\n    /*样式属性：属性值*/\n    &#125;\n    /*动画结束时属性样式*/\n    100%&#123;\n    /*样式属性：属性值*/\n    &#125;\n    &#125;\n</code></pre>\n<ul>\n<li><ul>\n<li>第二步：将制作好的动画通过animation引入给标签使用</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">//图片翻转\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0 auto;\n            padding: 0px;\n        &#125;\n        .box&#123;\n            width: 500px;\n            height: 300px;\n            background-image: url(&quot;img/IMG_E1640.JPG&quot;);\n            background-size: 100%;\n            /*引用动画*/\n            animation:rotateImg 10s infinite;\n        &#125;\n\n        /*制作动画执行过程*/\n        @-webkit-keyframes rotateImg &#123;\n            0%&#123;\n                /*图片起始不动*/\n                -webkit-transform: rotateY(0deg);\n            &#125;\n            50%&#123;\n                -webkit-transform: rotateY(360deg);\n            &#125;\n            100%&#123;\n                -webkit-transform: rotateY(720deg);\n            &#125;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>光盘旋转效果</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0 auto;\n            padding: 0px;\n        &#125;\n        .box&#123;\n            width: 500px;\n            height: 500px;\n            background-image: url(&quot;img/IMG_E1640.JPG&quot;);\n            background-size: 100% 100%;\n            border-radius: 50%;\n            display: flex;\n            /*引用大圆旋转动画*/\n            animation: box 30s linear infinite;\n        &#125;\n        .lb&#123;\n            width: 400px;\n            height: 400px;\n            background-image: url(&quot;img/IMG_1443.JPG&quot;);\n            background-size: 100% 100%;\n            border-radius: 50%;\n            align-self: center;\n            animation: lb 15s linear infinite;\n        &#125;\n        /*制作动画：大圆要顺时针旋转，稍慢*/\n        @-webkit-keyframes box &#123;\n            0%&#123;\n                -webkit-transform: rotate(0deg);\n            &#125;\n            100%&#123;\n                -webkit-transform: rotate(360deg);\n            &#125;\n        &#125;\n        /*制作动画：小圆要逆时针旋转，稍快*/\n        @-webkit-keyframes lb &#123;\n            0%&#123;\n                -webkit-transform: rotate(0deg);\n            &#125;\n            100%&#123;\n                -webkit-transform: rotate(-360deg) rotateY(360deg);\n            &#125;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;lb&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>3D旋转相册</p>\n<pre><code class=\"html\">&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;style&gt;\nbody &#123;\n    background:#06081B;\n    perspective:5000px;\n&#125;\n.show &#123;\n    perspective:5000px;\n    -webkit-transform:rotateX(-45deg);\n    -moz-transform:rotateX(-45deg);\n    transform:rotateX(-45deg);\n    transform-style:preserve-3d;\n\n&#125;\n.box &#123;\n    position:relative;\n    width:150px;\n    height:250px;\n\n    margin:300px auto;\n    transform-style:preserve-3d;\n    -webkit-animation:rotate1 10s linear infinite;\n    -moz-animation:rotate1 10s linear infinite;\n    animation:rotate1 10s linear infinite;\n    background-image: url(&quot;img/IMG_E1640.JPG&quot;);\n    background-size: 100%;\n&#125;\n.box img &#123;\n    width:150px;\n    height:250px;\n    border:1px solid #ccc;\n    position:absolute;\n    left:0;\n    top:0;\n    -webkit-box-reflect:below 20px -webkit-linear-gradient(top,rgba(250,250,250,0),rgba(250,250,250,0) 30%,rgba(250,250,250,0.5));\n&#125;\n.img1 &#123;\n    -webkit-transform:translateZ(300px);\n    -moz-transform:translateZ(300px);\n    transform:translateZ(300px);\n&#125;\n.img2 &#123;\n    -webkit-transform:rotateY(36deg) translateZ(300px);\n    -moz-transform:rotateY(36deg) translateZ(300px);\n    transform:rotateY(36deg) translateZ(300px);\n&#125;\n.img3 &#123;\n    -webkit-transform:rotateY(72deg) translateZ(300px);\n    -moz-transform:rotateY(72deg) translateZ(300px);\n&#125;\n.img4 &#123;\n    -webkit-transform:rotateY(108deg) translateZ(300px);\n    -moz-transform:rotateY(108deg) translateZ(300px);\n    transform:rotateY(108deg) translateZ(300px);\n&#125;\n.img5 &#123;\n    -webkit-transform:rotateY(144deg) translateZ(300px);\n    -moz-transform:rotateY(144deg) translateZ(300px);\n    transform:rotateY(144deg) translateZ(300px);\n&#125;\n.img6 &#123;\n    -webkit-transform:rotateY(180deg) translateZ(300px);\n    -moz-transform:rotateY(180deg) translateZ(300px);\n    transform:rotateY(180deg) translateZ(300px);\n&#125;\n.img7 &#123;\n    -webkit-transform:rotateY(216deg) translateZ(300px);\n    -moz-transform:rotateY(216deg) translateZ(300px);\n    transform:rotateY(216deg) translateZ(300px);\n&#125;\n.img8 &#123;\n    -webkit-transform:rotateY(252deg) translateZ(300px);\n    -moz-transform:rotateY(252deg) translateZ(300px);\n    transform:rotateY(252deg) translateZ(300px);\n&#125;\n.img9 &#123;\n    -webkit-transform:rotateY(288deg) translateZ(300px);\n    -moz-transform:rotateY(288deg) translateZ(300px);\n    transform:rotateY(288deg) translateZ(300px);\n&#125;\n.img10 &#123;\n    -webkit-transform:rotateY(324deg) translateZ(300px);\n    -moz-transform:rotateY(324deg) translateZ(300px);\n    transform:rotateY(324deg) translateZ(300px);\n&#125;\n@-moz-keyframes rotate1 &#123;\n    0% &#123;\n    -webkit-transform:rotateY(0deg);\n    -moz-transform:rotateY(0deg);\n    transform:rotateY(0deg);\n&#125;\n100% &#123;\n    -webkit-transform:rotateY(360deg);\n    -moz-transform:rotateY(360deg);\n    transform:rotateY(360deg);\n&#125;\n&#125;@-webkit-keyframes rotate1 &#123;\n    0% &#123;\n    -webkit-transform:rotateY(0deg);\n    -moz-transform:rotateY(0deg);\n    transform:rotateY(0deg);\n&#125;\n100% &#123;\n    -webkit-transform:rotateY(360deg);\n    -moz-transform:rotateY(360deg);\n    transform:rotateY(360deg);\n&#125;\n&#125;&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=&quot;show&quot;&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;img src=&quot;img/IMG_E1642.JPG&quot; class=&quot;img1&quot;&gt;\n        &lt;img src=&quot;img/IMG_E1644.JPG&quot; class=&quot;img2&quot;&gt;\n        &lt;img src=&quot;img/IMG_E1640.JPG&quot; class=&quot;img3&quot;&gt;\n        &lt;img src=&quot;img/IMG_1444.JPG&quot; class=&quot;img4&quot;&gt;\n        &lt;img src=&quot;img/IMG_1440.JPG&quot; class=&quot;img5&quot;&gt;\n        &lt;img src=&quot;img/IMG_1439.JPG&quot; class=&quot;img6&quot;&gt;\n        &lt;img src=&quot;img/IMG_1430.JPG&quot; class=&quot;img7&quot;&gt;\n        &lt;img src=&quot;img/IMG_1427.JPG&quot; class=&quot;img8&quot;&gt;\n        &lt;img src=&quot;img/IMG_1429.JPG&quot; class=&quot;img9&quot;&gt;\n        &lt;img src=&quot;img/IMG_1443.JPG&quot; class=&quot;img10&quot;&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>定位(position)</p>\n</li>\n<li><ul>\n<li>属性</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>absolute：绝对定位   会让元素脱离文档流，会参照第一个父元素进行定位</li>\n<li>fiexd：规定位置，将元素固定在某个位置不动，不管网页怎么拖动，该元素始终不动</li>\n<li>relative：相对定位，相对于正常位置进行定位</li>\n<li>inherit：继承，规定添加了该属性的元素继承它父元素的定位属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>注：添加了定位后，对于标签位置移动时不使用margin，而使用left,right,top,bottom</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            margin: 100px;\n            position: relative;\n        &#125;\n        .rows&#123;\n            width: 400px;\n            height: 200px;\n        &#125;\n        .cols&#123;\n            width: 50%;\n            height: 100%;\n            float: left;\n        &#125;\n        .c1&#123;\n            background-color: #ee3fb3;\n        &#125;\n        .c2&#123;\n            background-color: #50eecd;\n        &#125;\n        .lb&#123;\n            width: 200px;\n            height: 200px;\n            background-color: #17ff0a;\n            position: absolute;\n            top: 100px;\n            left: 100px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;rows&quot;&gt;\n            &lt;div class=&quot;cols c1&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;cols c2&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;rows&quot;&gt;\n            &lt;div class=&quot;cols c2&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;cols c1&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;lb&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .b1&#123;\n            height: 1000px;\n            background-color: #50eecd;\n        &#125;\n        .b2&#123;\n            height: 1000px;\n            background-color: #41ee4e;\n        &#125;\n        .b3&#123;\n            height: 1000px;\n            background-color: #edee4f;\n        &#125;\n        .b4&#123;\n            height: 1000px;\n            background-color: #ee3b13;\n        &#125;\n        .b5&#123;\n            height: 1000px;\n            background-color: #c25eee;\n        &#125;\n        .fixedDemo&#123;\n            position: fixed;\n            right: 0px;\n            top: 30%;\n            background-color: #17ff0a;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;b1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b2&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b3&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b4&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b5&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;fixedDemo&quot;&gt;若干国粹&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .b1&#123;\n            height: 1000px;\n            background-color: #50eecd;\n        &#125;\n        .b2&#123;\n            height: 1000px;\n            background-color: #41ee4e;\n        &#125;\n        .b3&#123;\n            height: 1000px;\n            background-color: #edee4f;\n        &#125;\n        .b4&#123;\n            height: 1000px;\n            background-color: #ee3b13;\n        &#125;\n        .b5&#123;\n            height: 1000px;\n            background-color: #c25eee;\n        &#125;\n        .fixedDemo&#123;\n            position: fixed;\n            right: 0px;\n            top: 30%;\n            background-color: #17ff0a;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;b1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b2&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b3&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b4&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b5&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;fixedDemo&quot;&gt;若干国粹&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>(九)动画</p>","more":"<p>CSS动画是W3C于2009年发布3D变形动画（标准草案），在年底发布了2D变形动画</p>\n<p>浏览器支持使用代码形成网页动画，并且有些浏览器在添加时为了更好的兼容性，需要添加浏览器引擎的私有属性</p>\n<ol>\n<li>谷歌：-webkit-</li>\n<li>火狐：-moz-</li>\n<li>IE9：-ms-</li>\n<li>其它一些浏览器不需要添加这些私有属性</li>\n</ol>\n<h2 id=\"9-1-CSS-2D动画\"><a href=\"#9-1-CSS-2D动画\" class=\"headerlink\" title=\"9.1 CSS 2D动画\"></a>9.1 CSS 2D动画</h2><ul>\n<li>2D动画可以用于元素的旋转，缩放，位移等</li>\n<li>基本语法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>transform:none|transform-function</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none为默认值</td>\n</tr>\n<tr>\n<td>transform-function：变形函数（变形函数可以是一个，也可以是多个函数列表）  函数是以()结尾</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>常见的变形函数</p>\n</li>\n<li><ul>\n<li>translate():移动元素</li>\n<li>scale():元素缩放，可以是任意尺寸发生变形</li>\n<li>rotate():旋转元素，取一个度数值，度数的后缀为deg，当度数为正时为顺时针旋转，为负时为逆时针旋转</li>\n<li>skew()：元素斜切，取度数值让元素发生形状变化</li>\n</ul>\n</li>\n<li><p>旋转rotate()</p>\n</li>\n<li><ul>\n<li>让元素逆时针或顺时针旋转</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        /*伪类样式：当鼠标悬停在元素上时触发里面的样式属性*/\n        .box:hover&#123;\n            transform: rotate(90deg);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;1&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>位置移动translate(左值，上值)</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n        &#125;\n        .two&#123;\n            transform: translate(100px,100px);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n    &lt;div class=&quot;box two&quot;&gt;这是2&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>放大缩小（scale(宽度放大倍数,高度放大倍数)    当放大时两个值大于1，如果值位于0,1之间时为缩小）</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        .box:hover&#123;\n            transform: scale(0.5,2);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li>斜切（skew(Y轴角度，X轴角度)），当度数为正值时从左边斜切，为负值时从右边斜切</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        .box:hover&#123;\n            transform: skew(45deg,10deg);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"9-1-1-简易照片墙\"><a href=\"#9-1-1-简易照片墙\" class=\"headerlink\" title=\"9.1.1 简易照片墙\"></a>9.1.1 简易照片墙</h4><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0 auto;\n        &#125;\n        .PBox&#123;\n            width: 100%;\n            height: 400px;\n            background-color: #efefef;\n            display: flex;\n            flex-wrap: nowrap;\n            justify-content: space-around;\n        &#125;\n        .PBox dl&#123;\n            width: 10%;\n            height: 70%;\n            background-color: white;\n            /*为了让照片看起来有那么点感觉，这里添加一个阴影*/\n            box-shadow: 0px 10px 30px #8c8c8c;\n            padding: 10px 20px;\n            margin-top: 40px;\n        &#125;\n        .PBox dt&#123;\n            width: 100%;\n            height: 80%;\n        &#125;\n        .PBox dt img&#123;\n            width: 100%;\n            height: 100%;\n        &#125;\n        .PBox dd&#123;\n            width: 100%;\n            text-align: center;\n            /*因为标签有一些默认的属性值，它在标签执行时就自动加载了，\n            我们可以通过来提升自定义属性优先级来覆盖它*/\n            margin: 8px 0px!important;\n        &#125;\n        /*定义动画样式，让照片墙看起来不要那么规整*/\n        .trans1&#123;\n            transform: skew(5deg,2deg);\n        &#125;\n        .trans2&#123;\n            transform: scale(0.9,0.8);\n        &#125;\n        .trans3&#123;\n            transform: rotate(25deg);\n        &#125;\n        .trans4&#123;\n            transform: rotate(20deg) scale(1.1,1.1);\n        &#125;\n        .trans5&#123;\n            transform: skew(5deg,2deg) scale(0.9,0.9);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!--网页版的照片墙，一共两行--&gt;\n    &lt;div class=&quot;PBox&quot;&gt;\n        &lt;!--单个照片--&gt;\n        &lt;dl class=&quot;trans1&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans2&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans4&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans5&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans3&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;PBox&quot;&gt;\n        &lt;!--单个照片--&gt;\n        &lt;dl&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans5&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans2&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans1&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans3&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n        &lt;dl class=&quot;trans4&quot;&gt;\n            &lt;dt&gt;\n                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;\n            &lt;/dt&gt;\n            &lt;dd&gt;这是照片名称&lt;/dd&gt;\n        &lt;/dl&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"9-2-过渡\"><a href=\"#9-2-过渡\" class=\"headerlink\" title=\"9.2 过渡\"></a>9.2 过渡</h2><ul>\n<li>过渡是元素从一种样式逐渐改变成另一种样式</li>\n<li>语法</li>\n</ul>\n<p>transition:过渡属性名称 [时间] [效果]</p>\n<table>\n<thead>\n<tr>\n<th>过渡属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>transition</td>\n<td>简写，该属性中包含了所有过渡属性</td>\n</tr>\n<tr>\n<td>transition-property</td>\n<td>规定应用过渡的CSS属性名称</td>\n</tr>\n<tr>\n<td>transition-duration</td>\n<td>过渡时间，默认为0</td>\n</tr>\n<tr>\n<td>transition-delay</td>\n<td>过渡从什么时候开始</td>\n</tr>\n<tr>\n<td>…….</td>\n<td>……..</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        .box:hover&#123;\n            /*transform: skew(45deg,10deg);*/\n            transform: scale(2,2);\n            transition: transform 1s;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"9-2-1-通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）-长按（-active）\"><a href=\"#9-2-1-通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）-长按（-active）\" class=\"headerlink\" title=\"9.2.1 通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）\"></a>9.2.1 通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）</h4><pre><code class=\"html\">//长按案例\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: hotpink;\n            border: 2px solid green;\n            margin: 200px auto;\n        &#125;\n        .box:active&#123;\n            /*transform: skew(45deg,10deg);*/\n            transform: scale(2,2);\n            transition: transform 1s;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"9-3-自定义动画\"><a href=\"#9-3-自定义动画\" class=\"headerlink\" title=\"9.3 自定义动画\"></a>9.3 自定义动画</h2><ul>\n<li>使用Animation功能可以实现更加复杂的动画</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>初始值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>animation</td>\n<td>包含所有属性</td>\n<td></td>\n</tr>\n<tr>\n<td>animation-name</td>\n<td>动画名称</td>\n<td>none</td>\n</tr>\n<tr>\n<td>animation-duration</td>\n<td>动画时间</td>\n<td>0</td>\n</tr>\n<tr>\n<td>animation-timing-function</td>\n<td>动画播放方式</td>\n<td>ease</td>\n</tr>\n<tr>\n<td>animation-iteration-count</td>\n<td>动画播放的次数</td>\n<td>1，infinite为重复播放</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>制作动画需要以下两步</p>\n</li>\n<li><ul>\n<li>第一步：需要在样式表中添加动画过程属性</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">@-webkit-keyframes name &#123;\n    /*动画开始时属性样式*/\n    0%&#123;\n    /*样式属性：属性值*/\n    &#125;\n    /*动画结束时属性样式*/\n    100%&#123;\n    /*样式属性：属性值*/\n    &#125;\n  &#125;\n\n  @keyframes name &#123;\n    /*动画开始时属性样式*/\n    0%&#123;\n    /*样式属性：属性值*/\n    &#125;\n    /*动画结束时属性样式*/\n    100%&#123;\n    /*样式属性：属性值*/\n    &#125;\n    &#125;\n</code></pre>\n<ul>\n<li><ul>\n<li>第二步：将制作好的动画通过animation引入给标签使用</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">//图片翻转\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0 auto;\n            padding: 0px;\n        &#125;\n        .box&#123;\n            width: 500px;\n            height: 300px;\n            background-image: url(&quot;img/IMG_E1640.JPG&quot;);\n            background-size: 100%;\n            /*引用动画*/\n            animation:rotateImg 10s infinite;\n        &#125;\n\n        /*制作动画执行过程*/\n        @-webkit-keyframes rotateImg &#123;\n            0%&#123;\n                /*图片起始不动*/\n                -webkit-transform: rotateY(0deg);\n            &#125;\n            50%&#123;\n                -webkit-transform: rotateY(360deg);\n            &#125;\n            100%&#123;\n                -webkit-transform: rotateY(720deg);\n            &#125;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>光盘旋转效果</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0 auto;\n            padding: 0px;\n        &#125;\n        .box&#123;\n            width: 500px;\n            height: 500px;\n            background-image: url(&quot;img/IMG_E1640.JPG&quot;);\n            background-size: 100% 100%;\n            border-radius: 50%;\n            display: flex;\n            /*引用大圆旋转动画*/\n            animation: box 30s linear infinite;\n        &#125;\n        .lb&#123;\n            width: 400px;\n            height: 400px;\n            background-image: url(&quot;img/IMG_1443.JPG&quot;);\n            background-size: 100% 100%;\n            border-radius: 50%;\n            align-self: center;\n            animation: lb 15s linear infinite;\n        &#125;\n        /*制作动画：大圆要顺时针旋转，稍慢*/\n        @-webkit-keyframes box &#123;\n            0%&#123;\n                -webkit-transform: rotate(0deg);\n            &#125;\n            100%&#123;\n                -webkit-transform: rotate(360deg);\n            &#125;\n        &#125;\n        /*制作动画：小圆要逆时针旋转，稍快*/\n        @-webkit-keyframes lb &#123;\n            0%&#123;\n                -webkit-transform: rotate(0deg);\n            &#125;\n            100%&#123;\n                -webkit-transform: rotate(-360deg) rotateY(360deg);\n            &#125;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;lb&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>3D旋转相册</p>\n<pre><code class=\"html\">&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;style&gt;\nbody &#123;\n    background:#06081B;\n    perspective:5000px;\n&#125;\n.show &#123;\n    perspective:5000px;\n    -webkit-transform:rotateX(-45deg);\n    -moz-transform:rotateX(-45deg);\n    transform:rotateX(-45deg);\n    transform-style:preserve-3d;\n\n&#125;\n.box &#123;\n    position:relative;\n    width:150px;\n    height:250px;\n\n    margin:300px auto;\n    transform-style:preserve-3d;\n    -webkit-animation:rotate1 10s linear infinite;\n    -moz-animation:rotate1 10s linear infinite;\n    animation:rotate1 10s linear infinite;\n    background-image: url(&quot;img/IMG_E1640.JPG&quot;);\n    background-size: 100%;\n&#125;\n.box img &#123;\n    width:150px;\n    height:250px;\n    border:1px solid #ccc;\n    position:absolute;\n    left:0;\n    top:0;\n    -webkit-box-reflect:below 20px -webkit-linear-gradient(top,rgba(250,250,250,0),rgba(250,250,250,0) 30%,rgba(250,250,250,0.5));\n&#125;\n.img1 &#123;\n    -webkit-transform:translateZ(300px);\n    -moz-transform:translateZ(300px);\n    transform:translateZ(300px);\n&#125;\n.img2 &#123;\n    -webkit-transform:rotateY(36deg) translateZ(300px);\n    -moz-transform:rotateY(36deg) translateZ(300px);\n    transform:rotateY(36deg) translateZ(300px);\n&#125;\n.img3 &#123;\n    -webkit-transform:rotateY(72deg) translateZ(300px);\n    -moz-transform:rotateY(72deg) translateZ(300px);\n&#125;\n.img4 &#123;\n    -webkit-transform:rotateY(108deg) translateZ(300px);\n    -moz-transform:rotateY(108deg) translateZ(300px);\n    transform:rotateY(108deg) translateZ(300px);\n&#125;\n.img5 &#123;\n    -webkit-transform:rotateY(144deg) translateZ(300px);\n    -moz-transform:rotateY(144deg) translateZ(300px);\n    transform:rotateY(144deg) translateZ(300px);\n&#125;\n.img6 &#123;\n    -webkit-transform:rotateY(180deg) translateZ(300px);\n    -moz-transform:rotateY(180deg) translateZ(300px);\n    transform:rotateY(180deg) translateZ(300px);\n&#125;\n.img7 &#123;\n    -webkit-transform:rotateY(216deg) translateZ(300px);\n    -moz-transform:rotateY(216deg) translateZ(300px);\n    transform:rotateY(216deg) translateZ(300px);\n&#125;\n.img8 &#123;\n    -webkit-transform:rotateY(252deg) translateZ(300px);\n    -moz-transform:rotateY(252deg) translateZ(300px);\n    transform:rotateY(252deg) translateZ(300px);\n&#125;\n.img9 &#123;\n    -webkit-transform:rotateY(288deg) translateZ(300px);\n    -moz-transform:rotateY(288deg) translateZ(300px);\n    transform:rotateY(288deg) translateZ(300px);\n&#125;\n.img10 &#123;\n    -webkit-transform:rotateY(324deg) translateZ(300px);\n    -moz-transform:rotateY(324deg) translateZ(300px);\n    transform:rotateY(324deg) translateZ(300px);\n&#125;\n@-moz-keyframes rotate1 &#123;\n    0% &#123;\n    -webkit-transform:rotateY(0deg);\n    -moz-transform:rotateY(0deg);\n    transform:rotateY(0deg);\n&#125;\n100% &#123;\n    -webkit-transform:rotateY(360deg);\n    -moz-transform:rotateY(360deg);\n    transform:rotateY(360deg);\n&#125;\n&#125;@-webkit-keyframes rotate1 &#123;\n    0% &#123;\n    -webkit-transform:rotateY(0deg);\n    -moz-transform:rotateY(0deg);\n    transform:rotateY(0deg);\n&#125;\n100% &#123;\n    -webkit-transform:rotateY(360deg);\n    -moz-transform:rotateY(360deg);\n    transform:rotateY(360deg);\n&#125;\n&#125;&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=&quot;show&quot;&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;img src=&quot;img/IMG_E1642.JPG&quot; class=&quot;img1&quot;&gt;\n        &lt;img src=&quot;img/IMG_E1644.JPG&quot; class=&quot;img2&quot;&gt;\n        &lt;img src=&quot;img/IMG_E1640.JPG&quot; class=&quot;img3&quot;&gt;\n        &lt;img src=&quot;img/IMG_1444.JPG&quot; class=&quot;img4&quot;&gt;\n        &lt;img src=&quot;img/IMG_1440.JPG&quot; class=&quot;img5&quot;&gt;\n        &lt;img src=&quot;img/IMG_1439.JPG&quot; class=&quot;img6&quot;&gt;\n        &lt;img src=&quot;img/IMG_1430.JPG&quot; class=&quot;img7&quot;&gt;\n        &lt;img src=&quot;img/IMG_1427.JPG&quot; class=&quot;img8&quot;&gt;\n        &lt;img src=&quot;img/IMG_1429.JPG&quot; class=&quot;img9&quot;&gt;\n        &lt;img src=&quot;img/IMG_1443.JPG&quot; class=&quot;img10&quot;&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>定位(position)</p>\n</li>\n<li><ul>\n<li>属性</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>absolute：绝对定位   会让元素脱离文档流，会参照第一个父元素进行定位</li>\n<li>fiexd：规定位置，将元素固定在某个位置不动，不管网页怎么拖动，该元素始终不动</li>\n<li>relative：相对定位，相对于正常位置进行定位</li>\n<li>inherit：继承，规定添加了该属性的元素继承它父元素的定位属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>注：添加了定位后，对于标签位置移动时不使用margin，而使用left,right,top,bottom</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            margin: 100px;\n            position: relative;\n        &#125;\n        .rows&#123;\n            width: 400px;\n            height: 200px;\n        &#125;\n        .cols&#123;\n            width: 50%;\n            height: 100%;\n            float: left;\n        &#125;\n        .c1&#123;\n            background-color: #ee3fb3;\n        &#125;\n        .c2&#123;\n            background-color: #50eecd;\n        &#125;\n        .lb&#123;\n            width: 200px;\n            height: 200px;\n            background-color: #17ff0a;\n            position: absolute;\n            top: 100px;\n            left: 100px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;rows&quot;&gt;\n            &lt;div class=&quot;cols c1&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;cols c2&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;rows&quot;&gt;\n            &lt;div class=&quot;cols c2&quot;&gt;&lt;/div&gt;\n            &lt;div class=&quot;cols c1&quot;&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;lb&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .b1&#123;\n            height: 1000px;\n            background-color: #50eecd;\n        &#125;\n        .b2&#123;\n            height: 1000px;\n            background-color: #41ee4e;\n        &#125;\n        .b3&#123;\n            height: 1000px;\n            background-color: #edee4f;\n        &#125;\n        .b4&#123;\n            height: 1000px;\n            background-color: #ee3b13;\n        &#125;\n        .b5&#123;\n            height: 1000px;\n            background-color: #c25eee;\n        &#125;\n        .fixedDemo&#123;\n            position: fixed;\n            right: 0px;\n            top: 30%;\n            background-color: #17ff0a;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;b1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b2&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b3&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b4&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b5&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;fixedDemo&quot;&gt;若干国粹&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .b1&#123;\n            height: 1000px;\n            background-color: #50eecd;\n        &#125;\n        .b2&#123;\n            height: 1000px;\n            background-color: #41ee4e;\n        &#125;\n        .b3&#123;\n            height: 1000px;\n            background-color: #edee4f;\n        &#125;\n        .b4&#123;\n            height: 1000px;\n            background-color: #ee3b13;\n        &#125;\n        .b5&#123;\n            height: 1000px;\n            background-color: #c25eee;\n        &#125;\n        .fixedDemo&#123;\n            position: fixed;\n            right: 0px;\n            top: 30%;\n            background-color: #17ff0a;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;b1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b2&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b3&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b4&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;b5&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;fixedDemo&quot;&gt;若干国粹&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"title":"(二)表单","date":"2022-07-08T11:04:21.000Z","cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.NSzr9WEgAGD8YC4TBHEXiwHaEK?pid=ImgDet&rs=1","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"\n表单是用来显示，收集，提交用户信息，表单在网页中主要负责数据采集功能，一个表单由三个基本部分组成：表单元素、表单域、按钮\n\n<!--more-->\n\n## 2.1表单\n\n表单是一个包含表单元素的区域，使用\\<form>...\\</form>定义，通过在表单中添加对应的表单元素使得用户可以在网页上输入数据\n\n\\<form>中含有诸多属性用来规定表单的格式，详见下表\n\n| 属性                                                         | 值                                                           | 描述                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [accept-charset](https://www.runoob.com/tags/att-form-accept-charset.html) | *character_set*                                              | 规定服务器可处理的表单数据字符集。                           |\n| [action](https://www.runoob.com/tags/att-form-action.html)   | *URL*                                                        | 规定当提交表单时向何处发送表单数据。                         |\n| [autocomplete](https://www.runoob.com/tags/att-form-autocomplete.html) | onoff                                                        | 规定是否启用表单的自动完成功能。                             |\n| [enctype](https://www.runoob.com/tags/att-form-enctype.html) | application/x-www-form-urlencodedmultipart/form-datatext/plain | 规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method=\"post\" 的情况） |\n| [method](https://www.runoob.com/tags/att-form-method.html)   | getpost                                                      | 规定用于发送表单数据的 HTTP 方法。                           |\n| [name](https://www.runoob.com/tags/att-form-name.html)       | *text*                                                       | 规定表单的名称。                                             |\n| [novalidate](https://www.runoob.com/tags/att-form-novalidate.html) | novalidate                                                   | 如果使用该属性，则提交表单时不进行验证。                     |\n| [target](https://www.runoob.com/tags/att-form-target.html)   | _blank_self_parent_top                                       | 规定在何处打开 action URL。                                  |\n\n## 2.2 表单元素\n\n#### 2.2.1 输入标签\n\n多数情况下使用的表单元素是输入标签\\<input>\n\n元素内输入类型有标签中的type属性定义，常用的元素类型如下表：\n\n| 类型            | 作用                                                         |\n| --------------- | ------------------------------------------------------------ |\n| type=\"text\"     | 单行文本框，一般用来以明文的方式输入数据，如：用户名         |\n| type=\"password\" | 密码框，密码字符不会以明文方式显示，而是以“*”，“·”替代       |\n| type=\"color\"    | 色盘，可以通过鼠标点击选择一个颜色，其值为十六进制值 如：#ff6700 |\n| type=\"radio\"    | 单选按钮，通过在标签中添加相同的name属性值，以多选一的效果 如：性别 |\n| type=\"checkbox\" | 复选按钮，可以同时选中多个数据 如：爱好                      |\n| type=\"date\"     | 日期类型，规定输入的数据类型必须为日期类型，谷歌内核的浏览器可以唤出浏览器自带的日期的控件选择日期 日期格式：yyyy-MM-dd |\n| type=\"time\"     | 时间类型，规定输入的数据必须为时间                           |\n| type=\"month\"    | 月类型，规定输入的数据类型必须为月份                         |\n| type=\"file\"     | 文件类型，点击后可在本地选择文件                             |\n| type=\"number\"   | 数字类型，外观与text文本框相似，但不允许输入数值以外的数据   |\n| type=\"range\"    | 数字范围选择器，具有max与min属性，使用滑动条的方式制定数值   |\n| type=\"email\"    | 邮箱类型，外观与文本框相似，其值必须为邮箱格式，浏览器会对其内容做简单的验证 |\n| type=\"url\"      | url类型，外观与文本框相似，其中必须为url，浏览器会对其内容做简单验证 |\n| type=\"hidden\"   | 隐藏域，表单提供一个不在界面显示的文本域                     |\n\n2.2.2 下拉标签\n\n- \\<select>元素为表单控件，用于在表单中接收数据\n\n- - \\<select>元素可创建单选或多选菜单\n  - \\<option>标签定义了菜单中的可选项\n\n- 下拉列表支持属性\n\n| 属性                                                         | 值        | 描述                                               |\n| ------------------------------------------------------------ | --------- | -------------------------------------------------- |\n| [autofocus](https://www.runoob.com/tags/att-select-autofocus.html) | autofocus | 规定在页面加载时下拉列表自动获得焦点。             |\n| [disabled](https://www.runoob.com/tags/att-select-disabled.html) | disabled  | 当该属性为 true 时，会禁用下拉列表。               |\n| [form](https://www.runoob.com/tags/att-select-form.html)     | *form_id* | 定义 select 字段所属的一个或多个表单。             |\n| [multiple](https://www.runoob.com/tags/att-select-multiple.html) | multiple  | 当该属性为 true 时，可选择多个选项。               |\n| [name](https://www.runoob.com/tags/att-select-name.html)     | *text*    | 定义下拉列表的名称。                               |\n| [required](https://www.runoob.com/tags/att-select-required.html) | required  | 规定用户在提交表单前必须选择一个下拉列表中的选项。 |\n| [size](https://www.runoob.com/tags/att-select-size.html)     | *number*  | 规定下拉列表中可见选项的数目。                     |\n\n#### 2.2.3 按钮\n\n- 按钮在网页中一般用于提交，重置页面数据，也可以与javascript配置做一些交互响应事件\n- 在HTML中按钮一般使用\\<input>或\\<button>来定义\n- 按钮属性\n\n| 属性                                                         | 值                                                           | 描述                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [autofocus](https://www.runoob.com/tags/att-button-autofocus.html) | autofocus                                                    | 规定当页面加载时按钮应当自动地获得焦点。                     |\n| [disabled](https://www.runoob.com/tags/att-button-disabled.html) | disabled                                                     | 规定应该禁用该按钮。                                         |\n| [form](https://www.runoob.com/tags/att-button-form.html)     | *form_id*                                                    | 规定按钮属于一个或多个表单。                                 |\n| [formaction](https://www.runoob.com/tags/att-button-formaction.html) | *URL*                                                        | 规定当提交表单时向何处发送表单数据。覆盖 form 元素的 action 属性。该属性与 type=\"submit\" 配合使用。 |\n| [formenctype](https://www.runoob.com/tags/att-button-formenctype.html) | application/x-www-form-urlencodedmultipart/form-datatext/plain | 规定在向服务器发送表单数据之前如何对其进行编码。覆盖 form 元素的 enctype 属性。该属性与 type=\"submit\" 配合使用。 |\n| [formmethod](https://www.runoob.com/tags/att-button-formmethod.html) | get，post                                                    | 规定用于发送表单数据的 HTTP 方法。覆盖 form 元素的 method 属性。该属性与 type=\"submit\" 配合使用。 |\n| [formnovalidate](https://www.runoob.com/tags/att-button-formnovalidate.html) | formnovalidate                                               | 如果使用该属性，则提交表单时不进行验证。覆盖 form 元素的 novalidate 属性。该属性与 type=\"submit\" 配合使用。 |\n| [formtarget](https://www.runoob.com/tags/att-button-formtarget.html) | _blank_self_parent_top*framename*                            | 规定在何处打开 action URL。覆盖 form 元素的 target 属性。该属性与 type=\"submit\" 配合使用。 |\n| [name](https://www.runoob.com/tags/att-button-name.html)     | *name*                                                       | 规定按钮的名称。                                             |\n| [type](https://www.runoob.com/tags/att-button-type.html)     | buttonresetsubmit                                            | 规定按钮的类型。                                             |\n| [value](https://www.runoob.com/tags/att-button-value.html)   | *text*                                                       | 规定按钮的初始值。可由脚本进行修改。                         |\n\n- \\<button>与\\<input>按钮区别\n\n- - \\<button>按钮如果不设置type属性，在不同浏览器中可能会提交不同值\n  - \\<button>按钮是成对出现的，可放置文本，图像等，\\<input>标签只能通过value属性为其设置文本\n  - 需要注意的是虽然\\<button>按钮可以嵌套其它标签，但不能再去嵌套按钮\n\n#### 示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <form>\n        <p>\n            文本：<input type=\"text\">\n        </p>\n        <p>\n            密码：<input type=\"password\">\n        </p>\n        <p>\n            颜色色：<input type=\"color\">\n        </p>\n        <p>单选：\n            男<input type=\"radio\" name=\"gender\">\n            女<input type=\"radio\" name=\"gender\">\n        </p>\n        <p>复选：\n            爱好1<input type=\"checkbox\">\n            爱好2<input type=\"checkbox\">\n            爱好3<input type=\"checkbox\">\n            爱好4<input type=\"checkbox\">\n        </p>\n        <p>\n            下拉：<select name=\"\" >\n                <option value=\"\">[请输入...]</option>\n                <option value=\"\">选择数据一</option>\n                <option value=\"\">选择数据二</option>\n            </select>县\n            <select name=\"\" >\n                <option value=\"\">[请输入...]</option>\n                <option value=\"\">选择数据一</option>\n                <option value=\"\">选择数据二</option>\n            </select>村\n        </p>\n        <p>\n            日期：<input type=\"date\">\n        </p>\n        <p>\n            时间：<input type=\"time\">\n        </p>\n        <p>\n            月份：<input type=\"month\">\n        </p>\n        <p>\n            文件：<input type=\"file\">\n        </p>\n        <p>\n            数字：<input type=\"number\">\n        </p>\n        <p>\n            数字范围：<input type=\"range\" max=\"10\" min=\"0\">\n        </p>\n        <p>\n            邮箱：<input type=\"email\">\n        </p>\n        <p>\n            地址：<input type=\"url\">\n        </p>\n        <p>\n            隐藏：<input type=\"hidden\">\n        </p>\n        <p>\n            <input type=\"submit\" value=\"input提交按钮\">\n            <input type=\"reset\" value=\"input重置按钮\">\n            <input type=\"button\" value=\"input按钮\">\n        </p>\n        <p>\n            <button type=\"submit\">button提交按钮</button>\n            <button type=\"reset\">button重置按钮</button>\n            <button type=\"button\">button按钮</button>\n        </p>\n    </form>\n</body>\n</html>\n```\n\n## 2.3 HTML5 表单增强\n\n#### 2.3.1 form属性\n\n在HTML4中，表单内的从属元素必须书写在表单内部，但在HTML5中，可以把它书写在页面的任意地方，然后给该元素指定一个form属性，属性值为该表单的id，这样就可以声明该元素从属于指定的表单\n\n示例\n\n```html\n<form id=\"formTest\">\n\t<input type=\"text\" name=\"username\"/>\n</form>\n<input type=\"password\" name=\"password\" form=\"formTest\">\n```\n\n代码解析：\n\n1. 第一个input标签从属form表单，它被书写在form表单内部，所以用不着对它指定form属性\n2. 第二个input表单被书写在form之外，但想要它从属form，这时就可以为其添加form属性并指定表单id让它从属form表单\n\n#### 2.3.2 formaction属性\n\n在HTML 4中，一个表单内的所有元素都只能通过表单的action属性统一提交到另一个页面，而在HTML 5中可以给所有的提交按钮，诸如\\<input type=\"submit\">、<inputtype=\"image\">、\\<button type=\"submit\">都增加不同的formaction属性，使得点击不同的按钮，可以将表单提交到不同的页面，formaction属性的使用方法如下：\n\n```html\n<form id=\"testform\" action=\" serve.jsp\">\n  <input type=\"submit\" name=\"s1\" value=\"v1\" formaction=\"s1.jsp\">提交到s1\n  <input type=\"submit\" name=\"s2\" value=\"v2\" formaction=\"s2.jsp\">提交到s2\n  <input type=\"submit\" name=\"s3\" value=\"v3\" formaction=\"s3.jsp\">提交到s3\n  <input type= \"submit\">\n<form>\n```\n\n**注：该属性目前支持的浏览器并不多，慎重使用**\n\n#### 2.3.3 list属性\n\n在HTML 5中，为单行文本框(\\<input type=\"text\">)增加了一个list属性，该属性的值为某个datalist元素的id。datalist元素也是HTML 5中新增元素，该元素类似于选择框( select>)，但是当用户想要设定的值不在选择列表之内时，允许其自行输入。该元素本身并不显示，而是当文本框获得焦点时以提示输入的方式显示。为了避免在没有支持该元素的浏览器上出现显示错误，可以用CSS等将它设定为不显示。\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    text: <input type=\"text\" name=\" greeting\" list=\"greetings\">\n    <datalist id=\"greetings\">\n        <option value=\"Good Morning\">Good Morning</option>\n        <option value=\"Hello\">Hello</option>\n        <option value=\"Good Afternoon\">Good Afternoon</option>\n    </datalist>\n</body>\n</html>\n```\n\n#### 2.3.4 autocomplete属性\n\n辅助输入所用的自动完成功能，是一个节省输入时间，同时也十分方便的功能。在HTML5之前，因为谁都可以看见输入的值，所以存在安全隐患，但只要使用autocomplete属性，安全性就可以得到很好的控制。.\n\n对于autocomplete属性，可以指定“on”、“off”与“”(不指定）这三种值。不指定时，使用浏览器的默认值(取决于各浏览器的决定)。把该属性设为on时，可以显式指定候补输入的数据列表。使用detalist元素与list属性提供候补输入的数据列表，自动完成时，可以将该datalist元素中的数据作为候补输入的数据在文本框中自动显示。autocomplete属性的使用方法如下所示。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    text: <input type=\"text\" name=\"greeting\" list=\"greetings\" autocomplete=\"on\">\n    <datalist id=\"greetings\">\n        <option value=\"Good Morning\">Good Morning</option>\n        <option value=\"Hello\">Hello</option>\n        <option value=\"Good Afternoon\">Good Afternoon</option>\n    </datalist>\n</body>\n</html>\n```\n\n#### 2.3.5 output标签\n\n- output为H5的新增标签，用来定义不同类型的输出，长和form表单一起使用，用来输出显示计算结果\n- 语法\n\n\\<output name=\"名称\" for=\"element_id\">默认内容\\</output>\n\n- 标签属性\n\n- - for：定义输出域相关的一个或多个元素，以空格隔开；\n  - form：定义输入字段所属的一个或多个表单，以空格隔开；\n  - name：定义对象的唯一名称（表单提交时使用）。\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <form oninput=\"o.value=parseInt(a.value)\">\n        选择数字范围：<input type=\"range\" min=\"0\" max=\"100\" id=\"a\">\n        <output id=\"o\" >50</output>\n    </form>\n</body>\n</html>\n```\n\n示例二\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">\n        <input type=\"number\" id=\"a\" value=\"0\"> +\n        <input type=\"number\" id=\"b\" value=\"0\"> =\n        <output name=\"x\" for=\"a b\">0</output>\n    </form>\n</body>\n</html>\n```\n\n注：\n\noninput为表单事件，表示当对元素输入数据时触发\n\nparseInt为javascript函数，用来解析一个字符串，并返回一个整数\n\n#### 2.3.6 表单验证\n\n在H5中，新增了大量在提交时对表单与表单内新增元素进行有效性验证的功能\n\n#####  2.3.6.1 自动验证\n\n在H5中，新增的一些表单元素本身就带有简单的提交格式验证，如邮箱（email）就有固定的格式“@”，“.”，但普通的表单元素就要通过对元素使用属性的方法，来实现在表单提交时执行自动验证的功能\n\n| 代码示例                                                     | 图示                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <form action=**\"\"**>  <input type=**\"email\"**>  <input type=**\"submit\"**></form> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396669228-351c8049-6a87-4b61-896d-4654ecf82402.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| <form action=**\"\"**>     <input type=**\"url\"**>     <input type=**\"submit\"**> </form> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396965883-3328df19-69b6-46f4-944a-57e10cceb3c4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n普通表单元素的验证属性\n\n1. required属性\n\nHTML 5中新增的required属性可以应用在大多数输入元素上（除了隐藏元素、图片元素按钮上)。在提交时，如果元素中内容为空白，则不允许提交，同时在浏览器中显示信息提示文字，提示用户这个元素中必须输入内容。\n\n| 代码示例                                                     | 图示                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <form action=**\"\"**>     <input type=**\"text\"** required>     <input type=**\"submit\"**> </form> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396887922-636d1b76-d057-4a4a-b4f7-c586e0a524cd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n1. pattern属性\n\n之前提到的一些新增的input元素，譬如email、number、url等，要求输入内容符合--定的格式，对input元素使用pattern属性，并且将属性值设为某个格式的正则表达式，在提交时会检查其内容是否符合给定格式。当输入的内容不符合给定格式时，则不允许提交，同时在浏览器中显示信息提示文字，提示输入的内容必须符合给定格式。譬如下面所示，要求输入内容为三个大写字母。\n\n| <form action=**\"\"**>  <input type=**\"text\"** placeholder=**\"****请输入三个大写字母****\"** required pattern=**\"[A-Z]{3}\"**>  <input type=**\"submit\"**></form> |\n| ------------------------------------------------------------ |\n| ![image (1).png](https://s2.loli.net/2022/07/08/RZVXKCHWeonvgSr.png) |\n\n1. min属性与max属性\n\nmin与max这两个属性是数值类型或日期类型的input元素的专用属性，它们限制了在input元素中输入的数值与日期的范围。\n\n| 代码示例                                                     | 图示                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <form action=**\"\"**>  <input type=**\"number\"** required min=**\"1\"** max=**\"100\"**>  <input type=**\"submit\"**></form> | ![image.png](https://s2.loli.net/2022/07/08/JdoXgQhPUmBK2fC.png) |","source":"_posts/二-表单.md","raw":"---\ntitle: (二)表单\ndate: 2022-07-08 19:04:21\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://tse2-mm.cn.bing.net/th/id/OIP-C.NSzr9WEgAGD8YC4TBHEXiwHaEK?pid=ImgDet&rs=1\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\n\n表单是用来显示，收集，提交用户信息，表单在网页中主要负责数据采集功能，一个表单由三个基本部分组成：表单元素、表单域、按钮\n\n<!--more-->\n\n## 2.1表单\n\n表单是一个包含表单元素的区域，使用\\<form>...\\</form>定义，通过在表单中添加对应的表单元素使得用户可以在网页上输入数据\n\n\\<form>中含有诸多属性用来规定表单的格式，详见下表\n\n| 属性                                                         | 值                                                           | 描述                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [accept-charset](https://www.runoob.com/tags/att-form-accept-charset.html) | *character_set*                                              | 规定服务器可处理的表单数据字符集。                           |\n| [action](https://www.runoob.com/tags/att-form-action.html)   | *URL*                                                        | 规定当提交表单时向何处发送表单数据。                         |\n| [autocomplete](https://www.runoob.com/tags/att-form-autocomplete.html) | onoff                                                        | 规定是否启用表单的自动完成功能。                             |\n| [enctype](https://www.runoob.com/tags/att-form-enctype.html) | application/x-www-form-urlencodedmultipart/form-datatext/plain | 规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method=\"post\" 的情况） |\n| [method](https://www.runoob.com/tags/att-form-method.html)   | getpost                                                      | 规定用于发送表单数据的 HTTP 方法。                           |\n| [name](https://www.runoob.com/tags/att-form-name.html)       | *text*                                                       | 规定表单的名称。                                             |\n| [novalidate](https://www.runoob.com/tags/att-form-novalidate.html) | novalidate                                                   | 如果使用该属性，则提交表单时不进行验证。                     |\n| [target](https://www.runoob.com/tags/att-form-target.html)   | _blank_self_parent_top                                       | 规定在何处打开 action URL。                                  |\n\n## 2.2 表单元素\n\n#### 2.2.1 输入标签\n\n多数情况下使用的表单元素是输入标签\\<input>\n\n元素内输入类型有标签中的type属性定义，常用的元素类型如下表：\n\n| 类型            | 作用                                                         |\n| --------------- | ------------------------------------------------------------ |\n| type=\"text\"     | 单行文本框，一般用来以明文的方式输入数据，如：用户名         |\n| type=\"password\" | 密码框，密码字符不会以明文方式显示，而是以“*”，“·”替代       |\n| type=\"color\"    | 色盘，可以通过鼠标点击选择一个颜色，其值为十六进制值 如：#ff6700 |\n| type=\"radio\"    | 单选按钮，通过在标签中添加相同的name属性值，以多选一的效果 如：性别 |\n| type=\"checkbox\" | 复选按钮，可以同时选中多个数据 如：爱好                      |\n| type=\"date\"     | 日期类型，规定输入的数据类型必须为日期类型，谷歌内核的浏览器可以唤出浏览器自带的日期的控件选择日期 日期格式：yyyy-MM-dd |\n| type=\"time\"     | 时间类型，规定输入的数据必须为时间                           |\n| type=\"month\"    | 月类型，规定输入的数据类型必须为月份                         |\n| type=\"file\"     | 文件类型，点击后可在本地选择文件                             |\n| type=\"number\"   | 数字类型，外观与text文本框相似，但不允许输入数值以外的数据   |\n| type=\"range\"    | 数字范围选择器，具有max与min属性，使用滑动条的方式制定数值   |\n| type=\"email\"    | 邮箱类型，外观与文本框相似，其值必须为邮箱格式，浏览器会对其内容做简单的验证 |\n| type=\"url\"      | url类型，外观与文本框相似，其中必须为url，浏览器会对其内容做简单验证 |\n| type=\"hidden\"   | 隐藏域，表单提供一个不在界面显示的文本域                     |\n\n2.2.2 下拉标签\n\n- \\<select>元素为表单控件，用于在表单中接收数据\n\n- - \\<select>元素可创建单选或多选菜单\n  - \\<option>标签定义了菜单中的可选项\n\n- 下拉列表支持属性\n\n| 属性                                                         | 值        | 描述                                               |\n| ------------------------------------------------------------ | --------- | -------------------------------------------------- |\n| [autofocus](https://www.runoob.com/tags/att-select-autofocus.html) | autofocus | 规定在页面加载时下拉列表自动获得焦点。             |\n| [disabled](https://www.runoob.com/tags/att-select-disabled.html) | disabled  | 当该属性为 true 时，会禁用下拉列表。               |\n| [form](https://www.runoob.com/tags/att-select-form.html)     | *form_id* | 定义 select 字段所属的一个或多个表单。             |\n| [multiple](https://www.runoob.com/tags/att-select-multiple.html) | multiple  | 当该属性为 true 时，可选择多个选项。               |\n| [name](https://www.runoob.com/tags/att-select-name.html)     | *text*    | 定义下拉列表的名称。                               |\n| [required](https://www.runoob.com/tags/att-select-required.html) | required  | 规定用户在提交表单前必须选择一个下拉列表中的选项。 |\n| [size](https://www.runoob.com/tags/att-select-size.html)     | *number*  | 规定下拉列表中可见选项的数目。                     |\n\n#### 2.2.3 按钮\n\n- 按钮在网页中一般用于提交，重置页面数据，也可以与javascript配置做一些交互响应事件\n- 在HTML中按钮一般使用\\<input>或\\<button>来定义\n- 按钮属性\n\n| 属性                                                         | 值                                                           | 描述                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [autofocus](https://www.runoob.com/tags/att-button-autofocus.html) | autofocus                                                    | 规定当页面加载时按钮应当自动地获得焦点。                     |\n| [disabled](https://www.runoob.com/tags/att-button-disabled.html) | disabled                                                     | 规定应该禁用该按钮。                                         |\n| [form](https://www.runoob.com/tags/att-button-form.html)     | *form_id*                                                    | 规定按钮属于一个或多个表单。                                 |\n| [formaction](https://www.runoob.com/tags/att-button-formaction.html) | *URL*                                                        | 规定当提交表单时向何处发送表单数据。覆盖 form 元素的 action 属性。该属性与 type=\"submit\" 配合使用。 |\n| [formenctype](https://www.runoob.com/tags/att-button-formenctype.html) | application/x-www-form-urlencodedmultipart/form-datatext/plain | 规定在向服务器发送表单数据之前如何对其进行编码。覆盖 form 元素的 enctype 属性。该属性与 type=\"submit\" 配合使用。 |\n| [formmethod](https://www.runoob.com/tags/att-button-formmethod.html) | get，post                                                    | 规定用于发送表单数据的 HTTP 方法。覆盖 form 元素的 method 属性。该属性与 type=\"submit\" 配合使用。 |\n| [formnovalidate](https://www.runoob.com/tags/att-button-formnovalidate.html) | formnovalidate                                               | 如果使用该属性，则提交表单时不进行验证。覆盖 form 元素的 novalidate 属性。该属性与 type=\"submit\" 配合使用。 |\n| [formtarget](https://www.runoob.com/tags/att-button-formtarget.html) | _blank_self_parent_top*framename*                            | 规定在何处打开 action URL。覆盖 form 元素的 target 属性。该属性与 type=\"submit\" 配合使用。 |\n| [name](https://www.runoob.com/tags/att-button-name.html)     | *name*                                                       | 规定按钮的名称。                                             |\n| [type](https://www.runoob.com/tags/att-button-type.html)     | buttonresetsubmit                                            | 规定按钮的类型。                                             |\n| [value](https://www.runoob.com/tags/att-button-value.html)   | *text*                                                       | 规定按钮的初始值。可由脚本进行修改。                         |\n\n- \\<button>与\\<input>按钮区别\n\n- - \\<button>按钮如果不设置type属性，在不同浏览器中可能会提交不同值\n  - \\<button>按钮是成对出现的，可放置文本，图像等，\\<input>标签只能通过value属性为其设置文本\n  - 需要注意的是虽然\\<button>按钮可以嵌套其它标签，但不能再去嵌套按钮\n\n#### 示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <form>\n        <p>\n            文本：<input type=\"text\">\n        </p>\n        <p>\n            密码：<input type=\"password\">\n        </p>\n        <p>\n            颜色色：<input type=\"color\">\n        </p>\n        <p>单选：\n            男<input type=\"radio\" name=\"gender\">\n            女<input type=\"radio\" name=\"gender\">\n        </p>\n        <p>复选：\n            爱好1<input type=\"checkbox\">\n            爱好2<input type=\"checkbox\">\n            爱好3<input type=\"checkbox\">\n            爱好4<input type=\"checkbox\">\n        </p>\n        <p>\n            下拉：<select name=\"\" >\n                <option value=\"\">[请输入...]</option>\n                <option value=\"\">选择数据一</option>\n                <option value=\"\">选择数据二</option>\n            </select>县\n            <select name=\"\" >\n                <option value=\"\">[请输入...]</option>\n                <option value=\"\">选择数据一</option>\n                <option value=\"\">选择数据二</option>\n            </select>村\n        </p>\n        <p>\n            日期：<input type=\"date\">\n        </p>\n        <p>\n            时间：<input type=\"time\">\n        </p>\n        <p>\n            月份：<input type=\"month\">\n        </p>\n        <p>\n            文件：<input type=\"file\">\n        </p>\n        <p>\n            数字：<input type=\"number\">\n        </p>\n        <p>\n            数字范围：<input type=\"range\" max=\"10\" min=\"0\">\n        </p>\n        <p>\n            邮箱：<input type=\"email\">\n        </p>\n        <p>\n            地址：<input type=\"url\">\n        </p>\n        <p>\n            隐藏：<input type=\"hidden\">\n        </p>\n        <p>\n            <input type=\"submit\" value=\"input提交按钮\">\n            <input type=\"reset\" value=\"input重置按钮\">\n            <input type=\"button\" value=\"input按钮\">\n        </p>\n        <p>\n            <button type=\"submit\">button提交按钮</button>\n            <button type=\"reset\">button重置按钮</button>\n            <button type=\"button\">button按钮</button>\n        </p>\n    </form>\n</body>\n</html>\n```\n\n## 2.3 HTML5 表单增强\n\n#### 2.3.1 form属性\n\n在HTML4中，表单内的从属元素必须书写在表单内部，但在HTML5中，可以把它书写在页面的任意地方，然后给该元素指定一个form属性，属性值为该表单的id，这样就可以声明该元素从属于指定的表单\n\n示例\n\n```html\n<form id=\"formTest\">\n\t<input type=\"text\" name=\"username\"/>\n</form>\n<input type=\"password\" name=\"password\" form=\"formTest\">\n```\n\n代码解析：\n\n1. 第一个input标签从属form表单，它被书写在form表单内部，所以用不着对它指定form属性\n2. 第二个input表单被书写在form之外，但想要它从属form，这时就可以为其添加form属性并指定表单id让它从属form表单\n\n#### 2.3.2 formaction属性\n\n在HTML 4中，一个表单内的所有元素都只能通过表单的action属性统一提交到另一个页面，而在HTML 5中可以给所有的提交按钮，诸如\\<input type=\"submit\">、<inputtype=\"image\">、\\<button type=\"submit\">都增加不同的formaction属性，使得点击不同的按钮，可以将表单提交到不同的页面，formaction属性的使用方法如下：\n\n```html\n<form id=\"testform\" action=\" serve.jsp\">\n  <input type=\"submit\" name=\"s1\" value=\"v1\" formaction=\"s1.jsp\">提交到s1\n  <input type=\"submit\" name=\"s2\" value=\"v2\" formaction=\"s2.jsp\">提交到s2\n  <input type=\"submit\" name=\"s3\" value=\"v3\" formaction=\"s3.jsp\">提交到s3\n  <input type= \"submit\">\n<form>\n```\n\n**注：该属性目前支持的浏览器并不多，慎重使用**\n\n#### 2.3.3 list属性\n\n在HTML 5中，为单行文本框(\\<input type=\"text\">)增加了一个list属性，该属性的值为某个datalist元素的id。datalist元素也是HTML 5中新增元素，该元素类似于选择框( select>)，但是当用户想要设定的值不在选择列表之内时，允许其自行输入。该元素本身并不显示，而是当文本框获得焦点时以提示输入的方式显示。为了避免在没有支持该元素的浏览器上出现显示错误，可以用CSS等将它设定为不显示。\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    text: <input type=\"text\" name=\" greeting\" list=\"greetings\">\n    <datalist id=\"greetings\">\n        <option value=\"Good Morning\">Good Morning</option>\n        <option value=\"Hello\">Hello</option>\n        <option value=\"Good Afternoon\">Good Afternoon</option>\n    </datalist>\n</body>\n</html>\n```\n\n#### 2.3.4 autocomplete属性\n\n辅助输入所用的自动完成功能，是一个节省输入时间，同时也十分方便的功能。在HTML5之前，因为谁都可以看见输入的值，所以存在安全隐患，但只要使用autocomplete属性，安全性就可以得到很好的控制。.\n\n对于autocomplete属性，可以指定“on”、“off”与“”(不指定）这三种值。不指定时，使用浏览器的默认值(取决于各浏览器的决定)。把该属性设为on时，可以显式指定候补输入的数据列表。使用detalist元素与list属性提供候补输入的数据列表，自动完成时，可以将该datalist元素中的数据作为候补输入的数据在文本框中自动显示。autocomplete属性的使用方法如下所示。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    text: <input type=\"text\" name=\"greeting\" list=\"greetings\" autocomplete=\"on\">\n    <datalist id=\"greetings\">\n        <option value=\"Good Morning\">Good Morning</option>\n        <option value=\"Hello\">Hello</option>\n        <option value=\"Good Afternoon\">Good Afternoon</option>\n    </datalist>\n</body>\n</html>\n```\n\n#### 2.3.5 output标签\n\n- output为H5的新增标签，用来定义不同类型的输出，长和form表单一起使用，用来输出显示计算结果\n- 语法\n\n\\<output name=\"名称\" for=\"element_id\">默认内容\\</output>\n\n- 标签属性\n\n- - for：定义输出域相关的一个或多个元素，以空格隔开；\n  - form：定义输入字段所属的一个或多个表单，以空格隔开；\n  - name：定义对象的唯一名称（表单提交时使用）。\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <form oninput=\"o.value=parseInt(a.value)\">\n        选择数字范围：<input type=\"range\" min=\"0\" max=\"100\" id=\"a\">\n        <output id=\"o\" >50</output>\n    </form>\n</body>\n</html>\n```\n\n示例二\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <form oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">\n        <input type=\"number\" id=\"a\" value=\"0\"> +\n        <input type=\"number\" id=\"b\" value=\"0\"> =\n        <output name=\"x\" for=\"a b\">0</output>\n    </form>\n</body>\n</html>\n```\n\n注：\n\noninput为表单事件，表示当对元素输入数据时触发\n\nparseInt为javascript函数，用来解析一个字符串，并返回一个整数\n\n#### 2.3.6 表单验证\n\n在H5中，新增了大量在提交时对表单与表单内新增元素进行有效性验证的功能\n\n#####  2.3.6.1 自动验证\n\n在H5中，新增的一些表单元素本身就带有简单的提交格式验证，如邮箱（email）就有固定的格式“@”，“.”，但普通的表单元素就要通过对元素使用属性的方法，来实现在表单提交时执行自动验证的功能\n\n| 代码示例                                                     | 图示                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <form action=**\"\"**>  <input type=**\"email\"**>  <input type=**\"submit\"**></form> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396669228-351c8049-6a87-4b61-896d-4654ecf82402.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| <form action=**\"\"**>     <input type=**\"url\"**>     <input type=**\"submit\"**> </form> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396965883-3328df19-69b6-46f4-944a-57e10cceb3c4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n普通表单元素的验证属性\n\n1. required属性\n\nHTML 5中新增的required属性可以应用在大多数输入元素上（除了隐藏元素、图片元素按钮上)。在提交时，如果元素中内容为空白，则不允许提交，同时在浏览器中显示信息提示文字，提示用户这个元素中必须输入内容。\n\n| 代码示例                                                     | 图示                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <form action=**\"\"**>     <input type=**\"text\"** required>     <input type=**\"submit\"**> </form> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396887922-636d1b76-d057-4a4a-b4f7-c586e0a524cd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n1. pattern属性\n\n之前提到的一些新增的input元素，譬如email、number、url等，要求输入内容符合--定的格式，对input元素使用pattern属性，并且将属性值设为某个格式的正则表达式，在提交时会检查其内容是否符合给定格式。当输入的内容不符合给定格式时，则不允许提交，同时在浏览器中显示信息提示文字，提示输入的内容必须符合给定格式。譬如下面所示，要求输入内容为三个大写字母。\n\n| <form action=**\"\"**>  <input type=**\"text\"** placeholder=**\"****请输入三个大写字母****\"** required pattern=**\"[A-Z]{3}\"**>  <input type=**\"submit\"**></form> |\n| ------------------------------------------------------------ |\n| ![image (1).png](https://s2.loli.net/2022/07/08/RZVXKCHWeonvgSr.png) |\n\n1. min属性与max属性\n\nmin与max这两个属性是数值类型或日期类型的input元素的专用属性，它们限制了在input元素中输入的数值与日期的范围。\n\n| 代码示例                                                     | 图示                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <form action=**\"\"**>  <input type=**\"number\"** required min=**\"1\"** max=**\"100\"**>  <input type=**\"submit\"**></form> | ![image.png](https://s2.loli.net/2022/07/08/JdoXgQhPUmBK2fC.png) |","slug":"二-表单","published":1,"updated":"2022-07-19T02:38:10.197Z","_id":"cl5hmbtlz000x2cujgcwff329","comments":1,"layout":"post","photos":[],"link":"","content":"<p>表单是用来显示，收集，提交用户信息，表单在网页中主要负责数据采集功能，一个表单由三个基本部分组成：表单元素、表单域、按钮</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2-1表单\"><a href=\"#2-1表单\" class=\"headerlink\" title=\"2.1表单\"></a>2.1表单</h2><p>表单是一个包含表单元素的区域，使用&lt;form&gt;…&lt;/form&gt;定义，通过在表单中添加对应的表单元素使得用户可以在网页上输入数据</p>\n<p>&lt;form&gt;中含有诸多属性用来规定表单的格式，详见下表</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-accept-charset.html\">accept-charset</a></td>\n<td><em>character_set</em></td>\n<td>规定服务器可处理的表单数据字符集。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-action.html\">action</a></td>\n<td><em>URL</em></td>\n<td>规定当提交表单时向何处发送表单数据。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-autocomplete.html\">autocomplete</a></td>\n<td>onoff</td>\n<td>规定是否启用表单的自动完成功能。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-enctype.html\">enctype</a></td>\n<td>application/x-www-form-urlencodedmultipart/form-datatext/plain</td>\n<td>规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method=”post” 的情况）</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-method.html\">method</a></td>\n<td>getpost</td>\n<td>规定用于发送表单数据的 HTTP 方法。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-name.html\">name</a></td>\n<td><em>text</em></td>\n<td>规定表单的名称。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-novalidate.html\">novalidate</a></td>\n<td>novalidate</td>\n<td>如果使用该属性，则提交表单时不进行验证。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-target.html\">target</a></td>\n<td>_blank_self_parent_top</td>\n<td>规定在何处打开 action URL。</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-2-表单元素\"><a href=\"#2-2-表单元素\" class=\"headerlink\" title=\"2.2 表单元素\"></a>2.2 表单元素</h2><h4 id=\"2-2-1-输入标签\"><a href=\"#2-2-1-输入标签\" class=\"headerlink\" title=\"2.2.1 输入标签\"></a>2.2.1 输入标签</h4><p>多数情况下使用的表单元素是输入标签&lt;input&gt;</p>\n<p>元素内输入类型有标签中的type属性定义，常用的元素类型如下表：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type=”text”</td>\n<td>单行文本框，一般用来以明文的方式输入数据，如：用户名</td>\n</tr>\n<tr>\n<td>type=”password”</td>\n<td>密码框，密码字符不会以明文方式显示，而是以“*”，“·”替代</td>\n</tr>\n<tr>\n<td>type=”color”</td>\n<td>色盘，可以通过鼠标点击选择一个颜色，其值为十六进制值 如：#ff6700</td>\n</tr>\n<tr>\n<td>type=”radio”</td>\n<td>单选按钮，通过在标签中添加相同的name属性值，以多选一的效果 如：性别</td>\n</tr>\n<tr>\n<td>type=”checkbox”</td>\n<td>复选按钮，可以同时选中多个数据 如：爱好</td>\n</tr>\n<tr>\n<td>type=”date”</td>\n<td>日期类型，规定输入的数据类型必须为日期类型，谷歌内核的浏览器可以唤出浏览器自带的日期的控件选择日期 日期格式：yyyy-MM-dd</td>\n</tr>\n<tr>\n<td>type=”time”</td>\n<td>时间类型，规定输入的数据必须为时间</td>\n</tr>\n<tr>\n<td>type=”month”</td>\n<td>月类型，规定输入的数据类型必须为月份</td>\n</tr>\n<tr>\n<td>type=”file”</td>\n<td>文件类型，点击后可在本地选择文件</td>\n</tr>\n<tr>\n<td>type=”number”</td>\n<td>数字类型，外观与text文本框相似，但不允许输入数值以外的数据</td>\n</tr>\n<tr>\n<td>type=”range”</td>\n<td>数字范围选择器，具有max与min属性，使用滑动条的方式制定数值</td>\n</tr>\n<tr>\n<td>type=”email”</td>\n<td>邮箱类型，外观与文本框相似，其值必须为邮箱格式，浏览器会对其内容做简单的验证</td>\n</tr>\n<tr>\n<td>type=”url”</td>\n<td>url类型，外观与文本框相似，其中必须为url，浏览器会对其内容做简单验证</td>\n</tr>\n<tr>\n<td>type=”hidden”</td>\n<td>隐藏域，表单提供一个不在界面显示的文本域</td>\n</tr>\n</tbody></table>\n<p>2.2.2 下拉标签</p>\n<ul>\n<li><p>&lt;select&gt;元素为表单控件，用于在表单中接收数据</p>\n</li>\n<li><ul>\n<li>&lt;select&gt;元素可创建单选或多选菜单</li>\n<li>&lt;option&gt;标签定义了菜单中的可选项</li>\n</ul>\n</li>\n<li><p>下拉列表支持属性</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-autofocus.html\">autofocus</a></td>\n<td>autofocus</td>\n<td>规定在页面加载时下拉列表自动获得焦点。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-disabled.html\">disabled</a></td>\n<td>disabled</td>\n<td>当该属性为 true 时，会禁用下拉列表。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-form.html\">form</a></td>\n<td><em>form_id</em></td>\n<td>定义 select 字段所属的一个或多个表单。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-multiple.html\">multiple</a></td>\n<td>multiple</td>\n<td>当该属性为 true 时，可选择多个选项。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-name.html\">name</a></td>\n<td><em>text</em></td>\n<td>定义下拉列表的名称。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-required.html\">required</a></td>\n<td>required</td>\n<td>规定用户在提交表单前必须选择一个下拉列表中的选项。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-size.html\">size</a></td>\n<td><em>number</em></td>\n<td>规定下拉列表中可见选项的数目。</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-2-3-按钮\"><a href=\"#2-2-3-按钮\" class=\"headerlink\" title=\"2.2.3 按钮\"></a>2.2.3 按钮</h4><ul>\n<li>按钮在网页中一般用于提交，重置页面数据，也可以与javascript配置做一些交互响应事件</li>\n<li>在HTML中按钮一般使用&lt;input&gt;或&lt;button&gt;来定义</li>\n<li>按钮属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-autofocus.html\">autofocus</a></td>\n<td>autofocus</td>\n<td>规定当页面加载时按钮应当自动地获得焦点。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-disabled.html\">disabled</a></td>\n<td>disabled</td>\n<td>规定应该禁用该按钮。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-form.html\">form</a></td>\n<td><em>form_id</em></td>\n<td>规定按钮属于一个或多个表单。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formaction.html\">formaction</a></td>\n<td><em>URL</em></td>\n<td>规定当提交表单时向何处发送表单数据。覆盖 form 元素的 action 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formenctype.html\">formenctype</a></td>\n<td>application/x-www-form-urlencodedmultipart/form-datatext/plain</td>\n<td>规定在向服务器发送表单数据之前如何对其进行编码。覆盖 form 元素的 enctype 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formmethod.html\">formmethod</a></td>\n<td>get，post</td>\n<td>规定用于发送表单数据的 HTTP 方法。覆盖 form 元素的 method 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formnovalidate.html\">formnovalidate</a></td>\n<td>formnovalidate</td>\n<td>如果使用该属性，则提交表单时不进行验证。覆盖 form 元素的 novalidate 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formtarget.html\">formtarget</a></td>\n<td>_blank_self_parent_top<em>framename</em></td>\n<td>规定在何处打开 action URL。覆盖 form 元素的 target 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-name.html\">name</a></td>\n<td><em>name</em></td>\n<td>规定按钮的名称。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-type.html\">type</a></td>\n<td>buttonresetsubmit</td>\n<td>规定按钮的类型。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-value.html\">value</a></td>\n<td><em>text</em></td>\n<td>规定按钮的初始值。可由脚本进行修改。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>&lt;button&gt;与&lt;input&gt;按钮区别</p>\n</li>\n<li><ul>\n<li>&lt;button&gt;按钮如果不设置type属性，在不同浏览器中可能会提交不同值</li>\n<li>&lt;button&gt;按钮是成对出现的，可放置文本，图像等，&lt;input&gt;标签只能通过value属性为其设置文本</li>\n<li>需要注意的是虽然&lt;button&gt;按钮可以嵌套其它标签，但不能再去嵌套按钮</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form&gt;\n        &lt;p&gt;\n            文本：&lt;input type=&quot;text&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            密码：&lt;input type=&quot;password&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            颜色色：&lt;input type=&quot;color&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;单选：\n            男&lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;\n            女&lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;复选：\n            爱好1&lt;input type=&quot;checkbox&quot;&gt;\n            爱好2&lt;input type=&quot;checkbox&quot;&gt;\n            爱好3&lt;input type=&quot;checkbox&quot;&gt;\n            爱好4&lt;input type=&quot;checkbox&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            下拉：&lt;select name=&quot;&quot; &gt;\n                &lt;option value=&quot;&quot;&gt;[请输入...]&lt;/option&gt;\n                &lt;option value=&quot;&quot;&gt;选择数据一&lt;/option&gt;\n                &lt;option value=&quot;&quot;&gt;选择数据二&lt;/option&gt;\n            &lt;/select&gt;县\n            &lt;select name=&quot;&quot; &gt;\n                &lt;option value=&quot;&quot;&gt;[请输入...]&lt;/option&gt;\n                &lt;option value=&quot;&quot;&gt;选择数据一&lt;/option&gt;\n                &lt;option value=&quot;&quot;&gt;选择数据二&lt;/option&gt;\n            &lt;/select&gt;村\n        &lt;/p&gt;\n        &lt;p&gt;\n            日期：&lt;input type=&quot;date&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            时间：&lt;input type=&quot;time&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            月份：&lt;input type=&quot;month&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            文件：&lt;input type=&quot;file&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            数字：&lt;input type=&quot;number&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            数字范围：&lt;input type=&quot;range&quot; max=&quot;10&quot; min=&quot;0&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            邮箱：&lt;input type=&quot;email&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            地址：&lt;input type=&quot;url&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            隐藏：&lt;input type=&quot;hidden&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            &lt;input type=&quot;submit&quot; value=&quot;input提交按钮&quot;&gt;\n            &lt;input type=&quot;reset&quot; value=&quot;input重置按钮&quot;&gt;\n            &lt;input type=&quot;button&quot; value=&quot;input按钮&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            &lt;button type=&quot;submit&quot;&gt;button提交按钮&lt;/button&gt;\n            &lt;button type=&quot;reset&quot;&gt;button重置按钮&lt;/button&gt;\n            &lt;button type=&quot;button&quot;&gt;button按钮&lt;/button&gt;\n        &lt;/p&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"2-3-HTML5-表单增强\"><a href=\"#2-3-HTML5-表单增强\" class=\"headerlink\" title=\"2.3 HTML5 表单增强\"></a>2.3 HTML5 表单增强</h2><h4 id=\"2-3-1-form属性\"><a href=\"#2-3-1-form属性\" class=\"headerlink\" title=\"2.3.1 form属性\"></a>2.3.1 form属性</h4><p>在HTML4中，表单内的从属元素必须书写在表单内部，但在HTML5中，可以把它书写在页面的任意地方，然后给该元素指定一个form属性，属性值为该表单的id，这样就可以声明该元素从属于指定的表单</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;form id=&quot;formTest&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;\n&lt;/form&gt;\n&lt;input type=&quot;password&quot; name=&quot;password&quot; form=&quot;formTest&quot;&gt;\n</code></pre>\n<p>代码解析：</p>\n<ol>\n<li>第一个input标签从属form表单，它被书写在form表单内部，所以用不着对它指定form属性</li>\n<li>第二个input表单被书写在form之外，但想要它从属form，这时就可以为其添加form属性并指定表单id让它从属form表单</li>\n</ol>\n<h4 id=\"2-3-2-formaction属性\"><a href=\"#2-3-2-formaction属性\" class=\"headerlink\" title=\"2.3.2 formaction属性\"></a>2.3.2 formaction属性</h4><p>在HTML 4中，一个表单内的所有元素都只能通过表单的action属性统一提交到另一个页面，而在HTML 5中可以给所有的提交按钮，诸如&lt;input type=”submit”&gt;、&lt;inputtype=”image”&gt;、&lt;button type=”submit”&gt;都增加不同的formaction属性，使得点击不同的按钮，可以将表单提交到不同的页面，formaction属性的使用方法如下：</p>\n<pre><code class=\"html\">&lt;form id=&quot;testform&quot; action=&quot; serve.jsp&quot;&gt;\n  &lt;input type=&quot;submit&quot; name=&quot;s1&quot; value=&quot;v1&quot; formaction=&quot;s1.jsp&quot;&gt;提交到s1\n  &lt;input type=&quot;submit&quot; name=&quot;s2&quot; value=&quot;v2&quot; formaction=&quot;s2.jsp&quot;&gt;提交到s2\n  &lt;input type=&quot;submit&quot; name=&quot;s3&quot; value=&quot;v3&quot; formaction=&quot;s3.jsp&quot;&gt;提交到s3\n  &lt;input type= &quot;submit&quot;&gt;\n&lt;form&gt;\n</code></pre>\n<p><strong>注：该属性目前支持的浏览器并不多，慎重使用</strong></p>\n<h4 id=\"2-3-3-list属性\"><a href=\"#2-3-3-list属性\" class=\"headerlink\" title=\"2.3.3 list属性\"></a>2.3.3 list属性</h4><p>在HTML 5中，为单行文本框(&lt;input type=”text”&gt;)增加了一个list属性，该属性的值为某个datalist元素的id。datalist元素也是HTML 5中新增元素，该元素类似于选择框( select&gt;)，但是当用户想要设定的值不在选择列表之内时，允许其自行输入。该元素本身并不显示，而是当文本框获得焦点时以提示输入的方式显示。为了避免在没有支持该元素的浏览器上出现显示错误，可以用CSS等将它设定为不显示。</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    text: &lt;input type=&quot;text&quot; name=&quot; greeting&quot; list=&quot;greetings&quot;&gt;\n    &lt;datalist id=&quot;greetings&quot;&gt;\n        &lt;option value=&quot;Good Morning&quot;&gt;Good Morning&lt;/option&gt;\n        &lt;option value=&quot;Hello&quot;&gt;Hello&lt;/option&gt;\n        &lt;option value=&quot;Good Afternoon&quot;&gt;Good Afternoon&lt;/option&gt;\n    &lt;/datalist&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"2-3-4-autocomplete属性\"><a href=\"#2-3-4-autocomplete属性\" class=\"headerlink\" title=\"2.3.4 autocomplete属性\"></a>2.3.4 autocomplete属性</h4><p>辅助输入所用的自动完成功能，是一个节省输入时间，同时也十分方便的功能。在HTML5之前，因为谁都可以看见输入的值，所以存在安全隐患，但只要使用autocomplete属性，安全性就可以得到很好的控制。.</p>\n<p>对于autocomplete属性，可以指定“on”、“off”与“”(不指定）这三种值。不指定时，使用浏览器的默认值(取决于各浏览器的决定)。把该属性设为on时，可以显式指定候补输入的数据列表。使用detalist元素与list属性提供候补输入的数据列表，自动完成时，可以将该datalist元素中的数据作为候补输入的数据在文本框中自动显示。autocomplete属性的使用方法如下所示。</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    text: &lt;input type=&quot;text&quot; name=&quot;greeting&quot; list=&quot;greetings&quot; autocomplete=&quot;on&quot;&gt;\n    &lt;datalist id=&quot;greetings&quot;&gt;\n        &lt;option value=&quot;Good Morning&quot;&gt;Good Morning&lt;/option&gt;\n        &lt;option value=&quot;Hello&quot;&gt;Hello&lt;/option&gt;\n        &lt;option value=&quot;Good Afternoon&quot;&gt;Good Afternoon&lt;/option&gt;\n    &lt;/datalist&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"2-3-5-output标签\"><a href=\"#2-3-5-output标签\" class=\"headerlink\" title=\"2.3.5 output标签\"></a>2.3.5 output标签</h4><ul>\n<li>output为H5的新增标签，用来定义不同类型的输出，长和form表单一起使用，用来输出显示计算结果</li>\n<li>语法</li>\n</ul>\n<p>&lt;output name=”名称” for=”element_id”&gt;默认内容&lt;/output&gt;</p>\n<ul>\n<li><p>标签属性</p>\n</li>\n<li><ul>\n<li>for：定义输出域相关的一个或多个元素，以空格隔开；</li>\n<li>form：定义输入字段所属的一个或多个表单，以空格隔开；</li>\n<li>name：定义对象的唯一名称（表单提交时使用）。</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form oninput=&quot;o.value=parseInt(a.value)&quot;&gt;\n        选择数字范围：&lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;100&quot; id=&quot;a&quot;&gt;\n        &lt;output id=&quot;o&quot; &gt;50&lt;/output&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>示例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form oninput=&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;\n        &lt;input type=&quot;number&quot; id=&quot;a&quot; value=&quot;0&quot;&gt; +\n        &lt;input type=&quot;number&quot; id=&quot;b&quot; value=&quot;0&quot;&gt; =\n        &lt;output name=&quot;x&quot; for=&quot;a b&quot;&gt;0&lt;/output&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>注：</p>\n<p>oninput为表单事件，表示当对元素输入数据时触发</p>\n<p>parseInt为javascript函数，用来解析一个字符串，并返回一个整数</p>\n<h4 id=\"2-3-6-表单验证\"><a href=\"#2-3-6-表单验证\" class=\"headerlink\" title=\"2.3.6 表单验证\"></a>2.3.6 表单验证</h4><p>在H5中，新增了大量在提交时对表单与表单内新增元素进行有效性验证的功能</p>\n<h5 id=\"2-3-6-1-自动验证\"><a href=\"#2-3-6-1-自动验证\" class=\"headerlink\" title=\"2.3.6.1 自动验证\"></a>2.3.6.1 自动验证</h5><p>在H5中，新增的一些表单元素本身就带有简单的提交格式验证，如邮箱（email）就有固定的格式“@”，“.”，但普通的表单元素就要通过对元素使用属性的方法，来实现在表单提交时执行自动验证的功能</p>\n<table>\n<thead>\n<tr>\n<th>代码示例</th>\n<th>图示</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;form action=**””**&gt;  &lt;input type=**”email”**&gt;  &lt;input type=**”submit”**&gt;</form></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396669228-351c8049-6a87-4b61-896d-4654ecf82402.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n<tr>\n<td>&lt;form action=**””**&gt;     &lt;input type=**”url”**&gt;     &lt;input type=**”submit”**&gt; </form></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396965883-3328df19-69b6-46f4-944a-57e10cceb3c4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<p>普通表单元素的验证属性</p>\n<ol>\n<li>required属性</li>\n</ol>\n<p>HTML 5中新增的required属性可以应用在大多数输入元素上（除了隐藏元素、图片元素按钮上)。在提交时，如果元素中内容为空白，则不允许提交，同时在浏览器中显示信息提示文字，提示用户这个元素中必须输入内容。</p>\n<table>\n<thead>\n<tr>\n<th>代码示例</th>\n<th>图示</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;form action=**””**&gt;     &lt;input type=**”text”** required&gt;     &lt;input type=**”submit”**&gt; </form></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396887922-636d1b76-d057-4a4a-b4f7-c586e0a524cd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<ol>\n<li>pattern属性</li>\n</ol>\n<p>之前提到的一些新增的input元素，譬如email、number、url等，要求输入内容符合–定的格式，对input元素使用pattern属性，并且将属性值设为某个格式的正则表达式，在提交时会检查其内容是否符合给定格式。当输入的内容不符合给定格式时，则不允许提交，同时在浏览器中显示信息提示文字，提示输入的内容必须符合给定格式。譬如下面所示，要求输入内容为三个大写字母。</p>\n<table>\n<thead>\n<tr>\n<th>&lt;form action=**””**&gt;  &lt;input type=**”text”** placeholder=**”****请输入三个大写字母****”** required pattern=**”[A-Z]{3}”**&gt;  &lt;input type=**”submit”**&gt;</form></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://s2.loli.net/2022/07/08/RZVXKCHWeonvgSr.png\" alt=\"image (1).png\"></td>\n</tr>\n</tbody></table>\n<ol>\n<li>min属性与max属性</li>\n</ol>\n<p>min与max这两个属性是数值类型或日期类型的input元素的专用属性，它们限制了在input元素中输入的数值与日期的范围。</p>\n<table>\n<thead>\n<tr>\n<th>代码示例</th>\n<th>图示</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;form action=**””**&gt;  &lt;input type=**”number”** required min=**”1”** max=**”100”**&gt;  &lt;input type=**”submit”**&gt;</form></td>\n<td><img src=\"https://s2.loli.net/2022/07/08/JdoXgQhPUmBK2fC.png\" alt=\"image.png\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>表单是用来显示，收集，提交用户信息，表单在网页中主要负责数据采集功能，一个表单由三个基本部分组成：表单元素、表单域、按钮</p>","more":"<h2 id=\"2-1表单\"><a href=\"#2-1表单\" class=\"headerlink\" title=\"2.1表单\"></a>2.1表单</h2><p>表单是一个包含表单元素的区域，使用&lt;form&gt;…&lt;/form&gt;定义，通过在表单中添加对应的表单元素使得用户可以在网页上输入数据</p>\n<p>&lt;form&gt;中含有诸多属性用来规定表单的格式，详见下表</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-accept-charset.html\">accept-charset</a></td>\n<td><em>character_set</em></td>\n<td>规定服务器可处理的表单数据字符集。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-action.html\">action</a></td>\n<td><em>URL</em></td>\n<td>规定当提交表单时向何处发送表单数据。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-autocomplete.html\">autocomplete</a></td>\n<td>onoff</td>\n<td>规定是否启用表单的自动完成功能。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-enctype.html\">enctype</a></td>\n<td>application/x-www-form-urlencodedmultipart/form-datatext/plain</td>\n<td>规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method=”post” 的情况）</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-method.html\">method</a></td>\n<td>getpost</td>\n<td>规定用于发送表单数据的 HTTP 方法。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-name.html\">name</a></td>\n<td><em>text</em></td>\n<td>规定表单的名称。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-novalidate.html\">novalidate</a></td>\n<td>novalidate</td>\n<td>如果使用该属性，则提交表单时不进行验证。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-form-target.html\">target</a></td>\n<td>_blank_self_parent_top</td>\n<td>规定在何处打开 action URL。</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-2-表单元素\"><a href=\"#2-2-表单元素\" class=\"headerlink\" title=\"2.2 表单元素\"></a>2.2 表单元素</h2><h4 id=\"2-2-1-输入标签\"><a href=\"#2-2-1-输入标签\" class=\"headerlink\" title=\"2.2.1 输入标签\"></a>2.2.1 输入标签</h4><p>多数情况下使用的表单元素是输入标签&lt;input&gt;</p>\n<p>元素内输入类型有标签中的type属性定义，常用的元素类型如下表：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type=”text”</td>\n<td>单行文本框，一般用来以明文的方式输入数据，如：用户名</td>\n</tr>\n<tr>\n<td>type=”password”</td>\n<td>密码框，密码字符不会以明文方式显示，而是以“*”，“·”替代</td>\n</tr>\n<tr>\n<td>type=”color”</td>\n<td>色盘，可以通过鼠标点击选择一个颜色，其值为十六进制值 如：#ff6700</td>\n</tr>\n<tr>\n<td>type=”radio”</td>\n<td>单选按钮，通过在标签中添加相同的name属性值，以多选一的效果 如：性别</td>\n</tr>\n<tr>\n<td>type=”checkbox”</td>\n<td>复选按钮，可以同时选中多个数据 如：爱好</td>\n</tr>\n<tr>\n<td>type=”date”</td>\n<td>日期类型，规定输入的数据类型必须为日期类型，谷歌内核的浏览器可以唤出浏览器自带的日期的控件选择日期 日期格式：yyyy-MM-dd</td>\n</tr>\n<tr>\n<td>type=”time”</td>\n<td>时间类型，规定输入的数据必须为时间</td>\n</tr>\n<tr>\n<td>type=”month”</td>\n<td>月类型，规定输入的数据类型必须为月份</td>\n</tr>\n<tr>\n<td>type=”file”</td>\n<td>文件类型，点击后可在本地选择文件</td>\n</tr>\n<tr>\n<td>type=”number”</td>\n<td>数字类型，外观与text文本框相似，但不允许输入数值以外的数据</td>\n</tr>\n<tr>\n<td>type=”range”</td>\n<td>数字范围选择器，具有max与min属性，使用滑动条的方式制定数值</td>\n</tr>\n<tr>\n<td>type=”email”</td>\n<td>邮箱类型，外观与文本框相似，其值必须为邮箱格式，浏览器会对其内容做简单的验证</td>\n</tr>\n<tr>\n<td>type=”url”</td>\n<td>url类型，外观与文本框相似，其中必须为url，浏览器会对其内容做简单验证</td>\n</tr>\n<tr>\n<td>type=”hidden”</td>\n<td>隐藏域，表单提供一个不在界面显示的文本域</td>\n</tr>\n</tbody></table>\n<p>2.2.2 下拉标签</p>\n<ul>\n<li><p>&lt;select&gt;元素为表单控件，用于在表单中接收数据</p>\n</li>\n<li><ul>\n<li>&lt;select&gt;元素可创建单选或多选菜单</li>\n<li>&lt;option&gt;标签定义了菜单中的可选项</li>\n</ul>\n</li>\n<li><p>下拉列表支持属性</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-autofocus.html\">autofocus</a></td>\n<td>autofocus</td>\n<td>规定在页面加载时下拉列表自动获得焦点。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-disabled.html\">disabled</a></td>\n<td>disabled</td>\n<td>当该属性为 true 时，会禁用下拉列表。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-form.html\">form</a></td>\n<td><em>form_id</em></td>\n<td>定义 select 字段所属的一个或多个表单。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-multiple.html\">multiple</a></td>\n<td>multiple</td>\n<td>当该属性为 true 时，可选择多个选项。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-name.html\">name</a></td>\n<td><em>text</em></td>\n<td>定义下拉列表的名称。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-required.html\">required</a></td>\n<td>required</td>\n<td>规定用户在提交表单前必须选择一个下拉列表中的选项。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-select-size.html\">size</a></td>\n<td><em>number</em></td>\n<td>规定下拉列表中可见选项的数目。</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-2-3-按钮\"><a href=\"#2-2-3-按钮\" class=\"headerlink\" title=\"2.2.3 按钮\"></a>2.2.3 按钮</h4><ul>\n<li>按钮在网页中一般用于提交，重置页面数据，也可以与javascript配置做一些交互响应事件</li>\n<li>在HTML中按钮一般使用&lt;input&gt;或&lt;button&gt;来定义</li>\n<li>按钮属性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-autofocus.html\">autofocus</a></td>\n<td>autofocus</td>\n<td>规定当页面加载时按钮应当自动地获得焦点。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-disabled.html\">disabled</a></td>\n<td>disabled</td>\n<td>规定应该禁用该按钮。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-form.html\">form</a></td>\n<td><em>form_id</em></td>\n<td>规定按钮属于一个或多个表单。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formaction.html\">formaction</a></td>\n<td><em>URL</em></td>\n<td>规定当提交表单时向何处发送表单数据。覆盖 form 元素的 action 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formenctype.html\">formenctype</a></td>\n<td>application/x-www-form-urlencodedmultipart/form-datatext/plain</td>\n<td>规定在向服务器发送表单数据之前如何对其进行编码。覆盖 form 元素的 enctype 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formmethod.html\">formmethod</a></td>\n<td>get，post</td>\n<td>规定用于发送表单数据的 HTTP 方法。覆盖 form 元素的 method 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formnovalidate.html\">formnovalidate</a></td>\n<td>formnovalidate</td>\n<td>如果使用该属性，则提交表单时不进行验证。覆盖 form 元素的 novalidate 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-formtarget.html\">formtarget</a></td>\n<td>_blank_self_parent_top<em>framename</em></td>\n<td>规定在何处打开 action URL。覆盖 form 元素的 target 属性。该属性与 type=”submit” 配合使用。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-name.html\">name</a></td>\n<td><em>name</em></td>\n<td>规定按钮的名称。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-type.html\">type</a></td>\n<td>buttonresetsubmit</td>\n<td>规定按钮的类型。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/tags/att-button-value.html\">value</a></td>\n<td><em>text</em></td>\n<td>规定按钮的初始值。可由脚本进行修改。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>&lt;button&gt;与&lt;input&gt;按钮区别</p>\n</li>\n<li><ul>\n<li>&lt;button&gt;按钮如果不设置type属性，在不同浏览器中可能会提交不同值</li>\n<li>&lt;button&gt;按钮是成对出现的，可放置文本，图像等，&lt;input&gt;标签只能通过value属性为其设置文本</li>\n<li>需要注意的是虽然&lt;button&gt;按钮可以嵌套其它标签，但不能再去嵌套按钮</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form&gt;\n        &lt;p&gt;\n            文本：&lt;input type=&quot;text&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            密码：&lt;input type=&quot;password&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            颜色色：&lt;input type=&quot;color&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;单选：\n            男&lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;\n            女&lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;复选：\n            爱好1&lt;input type=&quot;checkbox&quot;&gt;\n            爱好2&lt;input type=&quot;checkbox&quot;&gt;\n            爱好3&lt;input type=&quot;checkbox&quot;&gt;\n            爱好4&lt;input type=&quot;checkbox&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            下拉：&lt;select name=&quot;&quot; &gt;\n                &lt;option value=&quot;&quot;&gt;[请输入...]&lt;/option&gt;\n                &lt;option value=&quot;&quot;&gt;选择数据一&lt;/option&gt;\n                &lt;option value=&quot;&quot;&gt;选择数据二&lt;/option&gt;\n            &lt;/select&gt;县\n            &lt;select name=&quot;&quot; &gt;\n                &lt;option value=&quot;&quot;&gt;[请输入...]&lt;/option&gt;\n                &lt;option value=&quot;&quot;&gt;选择数据一&lt;/option&gt;\n                &lt;option value=&quot;&quot;&gt;选择数据二&lt;/option&gt;\n            &lt;/select&gt;村\n        &lt;/p&gt;\n        &lt;p&gt;\n            日期：&lt;input type=&quot;date&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            时间：&lt;input type=&quot;time&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            月份：&lt;input type=&quot;month&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            文件：&lt;input type=&quot;file&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            数字：&lt;input type=&quot;number&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            数字范围：&lt;input type=&quot;range&quot; max=&quot;10&quot; min=&quot;0&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            邮箱：&lt;input type=&quot;email&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            地址：&lt;input type=&quot;url&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            隐藏：&lt;input type=&quot;hidden&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            &lt;input type=&quot;submit&quot; value=&quot;input提交按钮&quot;&gt;\n            &lt;input type=&quot;reset&quot; value=&quot;input重置按钮&quot;&gt;\n            &lt;input type=&quot;button&quot; value=&quot;input按钮&quot;&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            &lt;button type=&quot;submit&quot;&gt;button提交按钮&lt;/button&gt;\n            &lt;button type=&quot;reset&quot;&gt;button重置按钮&lt;/button&gt;\n            &lt;button type=&quot;button&quot;&gt;button按钮&lt;/button&gt;\n        &lt;/p&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"2-3-HTML5-表单增强\"><a href=\"#2-3-HTML5-表单增强\" class=\"headerlink\" title=\"2.3 HTML5 表单增强\"></a>2.3 HTML5 表单增强</h2><h4 id=\"2-3-1-form属性\"><a href=\"#2-3-1-form属性\" class=\"headerlink\" title=\"2.3.1 form属性\"></a>2.3.1 form属性</h4><p>在HTML4中，表单内的从属元素必须书写在表单内部，但在HTML5中，可以把它书写在页面的任意地方，然后给该元素指定一个form属性，属性值为该表单的id，这样就可以声明该元素从属于指定的表单</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;form id=&quot;formTest&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;\n&lt;/form&gt;\n&lt;input type=&quot;password&quot; name=&quot;password&quot; form=&quot;formTest&quot;&gt;\n</code></pre>\n<p>代码解析：</p>\n<ol>\n<li>第一个input标签从属form表单，它被书写在form表单内部，所以用不着对它指定form属性</li>\n<li>第二个input表单被书写在form之外，但想要它从属form，这时就可以为其添加form属性并指定表单id让它从属form表单</li>\n</ol>\n<h4 id=\"2-3-2-formaction属性\"><a href=\"#2-3-2-formaction属性\" class=\"headerlink\" title=\"2.3.2 formaction属性\"></a>2.3.2 formaction属性</h4><p>在HTML 4中，一个表单内的所有元素都只能通过表单的action属性统一提交到另一个页面，而在HTML 5中可以给所有的提交按钮，诸如&lt;input type=”submit”&gt;、&lt;inputtype=”image”&gt;、&lt;button type=”submit”&gt;都增加不同的formaction属性，使得点击不同的按钮，可以将表单提交到不同的页面，formaction属性的使用方法如下：</p>\n<pre><code class=\"html\">&lt;form id=&quot;testform&quot; action=&quot; serve.jsp&quot;&gt;\n  &lt;input type=&quot;submit&quot; name=&quot;s1&quot; value=&quot;v1&quot; formaction=&quot;s1.jsp&quot;&gt;提交到s1\n  &lt;input type=&quot;submit&quot; name=&quot;s2&quot; value=&quot;v2&quot; formaction=&quot;s2.jsp&quot;&gt;提交到s2\n  &lt;input type=&quot;submit&quot; name=&quot;s3&quot; value=&quot;v3&quot; formaction=&quot;s3.jsp&quot;&gt;提交到s3\n  &lt;input type= &quot;submit&quot;&gt;\n&lt;form&gt;\n</code></pre>\n<p><strong>注：该属性目前支持的浏览器并不多，慎重使用</strong></p>\n<h4 id=\"2-3-3-list属性\"><a href=\"#2-3-3-list属性\" class=\"headerlink\" title=\"2.3.3 list属性\"></a>2.3.3 list属性</h4><p>在HTML 5中，为单行文本框(&lt;input type=”text”&gt;)增加了一个list属性，该属性的值为某个datalist元素的id。datalist元素也是HTML 5中新增元素，该元素类似于选择框( select&gt;)，但是当用户想要设定的值不在选择列表之内时，允许其自行输入。该元素本身并不显示，而是当文本框获得焦点时以提示输入的方式显示。为了避免在没有支持该元素的浏览器上出现显示错误，可以用CSS等将它设定为不显示。</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    text: &lt;input type=&quot;text&quot; name=&quot; greeting&quot; list=&quot;greetings&quot;&gt;\n    &lt;datalist id=&quot;greetings&quot;&gt;\n        &lt;option value=&quot;Good Morning&quot;&gt;Good Morning&lt;/option&gt;\n        &lt;option value=&quot;Hello&quot;&gt;Hello&lt;/option&gt;\n        &lt;option value=&quot;Good Afternoon&quot;&gt;Good Afternoon&lt;/option&gt;\n    &lt;/datalist&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"2-3-4-autocomplete属性\"><a href=\"#2-3-4-autocomplete属性\" class=\"headerlink\" title=\"2.3.4 autocomplete属性\"></a>2.3.4 autocomplete属性</h4><p>辅助输入所用的自动完成功能，是一个节省输入时间，同时也十分方便的功能。在HTML5之前，因为谁都可以看见输入的值，所以存在安全隐患，但只要使用autocomplete属性，安全性就可以得到很好的控制。.</p>\n<p>对于autocomplete属性，可以指定“on”、“off”与“”(不指定）这三种值。不指定时，使用浏览器的默认值(取决于各浏览器的决定)。把该属性设为on时，可以显式指定候补输入的数据列表。使用detalist元素与list属性提供候补输入的数据列表，自动完成时，可以将该datalist元素中的数据作为候补输入的数据在文本框中自动显示。autocomplete属性的使用方法如下所示。</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    text: &lt;input type=&quot;text&quot; name=&quot;greeting&quot; list=&quot;greetings&quot; autocomplete=&quot;on&quot;&gt;\n    &lt;datalist id=&quot;greetings&quot;&gt;\n        &lt;option value=&quot;Good Morning&quot;&gt;Good Morning&lt;/option&gt;\n        &lt;option value=&quot;Hello&quot;&gt;Hello&lt;/option&gt;\n        &lt;option value=&quot;Good Afternoon&quot;&gt;Good Afternoon&lt;/option&gt;\n    &lt;/datalist&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"2-3-5-output标签\"><a href=\"#2-3-5-output标签\" class=\"headerlink\" title=\"2.3.5 output标签\"></a>2.3.5 output标签</h4><ul>\n<li>output为H5的新增标签，用来定义不同类型的输出，长和form表单一起使用，用来输出显示计算结果</li>\n<li>语法</li>\n</ul>\n<p>&lt;output name=”名称” for=”element_id”&gt;默认内容&lt;/output&gt;</p>\n<ul>\n<li><p>标签属性</p>\n</li>\n<li><ul>\n<li>for：定义输出域相关的一个或多个元素，以空格隔开；</li>\n<li>form：定义输入字段所属的一个或多个表单，以空格隔开；</li>\n<li>name：定义对象的唯一名称（表单提交时使用）。</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form oninput=&quot;o.value=parseInt(a.value)&quot;&gt;\n        选择数字范围：&lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;100&quot; id=&quot;a&quot;&gt;\n        &lt;output id=&quot;o&quot; &gt;50&lt;/output&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>示例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form oninput=&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;\n        &lt;input type=&quot;number&quot; id=&quot;a&quot; value=&quot;0&quot;&gt; +\n        &lt;input type=&quot;number&quot; id=&quot;b&quot; value=&quot;0&quot;&gt; =\n        &lt;output name=&quot;x&quot; for=&quot;a b&quot;&gt;0&lt;/output&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>注：</p>\n<p>oninput为表单事件，表示当对元素输入数据时触发</p>\n<p>parseInt为javascript函数，用来解析一个字符串，并返回一个整数</p>\n<h4 id=\"2-3-6-表单验证\"><a href=\"#2-3-6-表单验证\" class=\"headerlink\" title=\"2.3.6 表单验证\"></a>2.3.6 表单验证</h4><p>在H5中，新增了大量在提交时对表单与表单内新增元素进行有效性验证的功能</p>\n<h5 id=\"2-3-6-1-自动验证\"><a href=\"#2-3-6-1-自动验证\" class=\"headerlink\" title=\"2.3.6.1 自动验证\"></a>2.3.6.1 自动验证</h5><p>在H5中，新增的一些表单元素本身就带有简单的提交格式验证，如邮箱（email）就有固定的格式“@”，“.”，但普通的表单元素就要通过对元素使用属性的方法，来实现在表单提交时执行自动验证的功能</p>\n<table>\n<thead>\n<tr>\n<th>代码示例</th>\n<th>图示</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;form action=**””**&gt;  &lt;input type=**”email”**&gt;  &lt;input type=**”submit”**&gt;</form></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396669228-351c8049-6a87-4b61-896d-4654ecf82402.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n<tr>\n<td>&lt;form action=**””**&gt;     &lt;input type=**”url”**&gt;     &lt;input type=**”submit”**&gt; </form></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396965883-3328df19-69b6-46f4-944a-57e10cceb3c4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<p>普通表单元素的验证属性</p>\n<ol>\n<li>required属性</li>\n</ol>\n<p>HTML 5中新增的required属性可以应用在大多数输入元素上（除了隐藏元素、图片元素按钮上)。在提交时，如果元素中内容为空白，则不允许提交，同时在浏览器中显示信息提示文字，提示用户这个元素中必须输入内容。</p>\n<table>\n<thead>\n<tr>\n<th>代码示例</th>\n<th>图示</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;form action=**””**&gt;     &lt;input type=**”text”** required&gt;     &lt;input type=**”submit”**&gt; </form></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396887922-636d1b76-d057-4a4a-b4f7-c586e0a524cd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<ol>\n<li>pattern属性</li>\n</ol>\n<p>之前提到的一些新增的input元素，譬如email、number、url等，要求输入内容符合–定的格式，对input元素使用pattern属性，并且将属性值设为某个格式的正则表达式，在提交时会检查其内容是否符合给定格式。当输入的内容不符合给定格式时，则不允许提交，同时在浏览器中显示信息提示文字，提示输入的内容必须符合给定格式。譬如下面所示，要求输入内容为三个大写字母。</p>\n<table>\n<thead>\n<tr>\n<th>&lt;form action=**””**&gt;  &lt;input type=**”text”** placeholder=**”****请输入三个大写字母****”** required pattern=**”[A-Z]{3}”**&gt;  &lt;input type=**”submit”**&gt;</form></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://s2.loli.net/2022/07/08/RZVXKCHWeonvgSr.png\" alt=\"image (1).png\"></td>\n</tr>\n</tbody></table>\n<ol>\n<li>min属性与max属性</li>\n</ol>\n<p>min与max这两个属性是数值类型或日期类型的input元素的专用属性，它们限制了在input元素中输入的数值与日期的范围。</p>\n<table>\n<thead>\n<tr>\n<th>代码示例</th>\n<th>图示</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;form action=**””**&gt;  &lt;input type=**”number”** required min=**”1”** max=**”100”**&gt;  &lt;input type=**”submit”**&gt;</form></td>\n<td><img src=\"https://s2.loli.net/2022/07/08/JdoXgQhPUmBK2fC.png\" alt=\"image.png\"></td>\n</tr>\n</tbody></table>"},{"title":"(五)CSS常用样式","date":"2022-07-08T11:42:18.000Z","cover":"https://www.codesnail.com/wp-content/uploads/2021/02/css-syntax-structure.png","coverWidth":1280,"coverHeight":650,"author":"xiguayaaaaa","from":null,"_content":"(五)CSS常用样式\n<!--more-->\n## 5.3 CSS 常用样式属性\n\n#### 5.3.1宽高\n\n- - 宽width：像素值/百分比（上一级标签的百分之多少）\n  - 高height：像素值/百分比（上一级标签的百分之多少[注：当标签为body下的第一层标签时，高度使用百分比是不生效的]）\n  - 示例\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404127941-15c52bda-471e-4f8f-badd-94657b35432f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404138115-693d3125-52b8-4fdc-b468-ab6f777ba28c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404170319-5ab39ea2-c836-4221-9f15-35afbf841664.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_19%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |                                                              |\n\n#### 5.3.2文字\n\n- - 文字大小\n\n- - - font-size：像素值\n\n- - 文字颜色\n\n- - - color:颜色单词/十六进制值/rgba值\n\n- - 文字对齐方式\n\n- - - text-align:居中/靠左/靠右\n\n- - 文字的字体设置\n\n- - - font-family:字体\n\n示例\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404233490-92063cc0-c11a-41ea-8787-37e5c94c2d40.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_24%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n#### 5.3.3浮动\n\n- - 标准文档流\n\n- - - web页面的制作不同于设计软件，它是个流，必须从上而下，先执行渲染显示上边的元素，依次向下渲染显示\n    - 我们知道元素分块级和行级元素两类，如果页面完全遵循文档流去开发就会导致很多页面排版不能实现或不能完全实现\n    - 通过浮动我们可以让元素脱离标准流，实现块级元素并排等一些效果\n\n- - 浮动特点\n\n- - - 脱离标准流\n    - 元素并排（如果容器宽度足够元素则在容器宽度范围内并排，如果宽度不够则容器内元素会依次换行排列）\n    - 收缩（如果一个没有设置宽度的元素浮动，那么元素的宽度会自动收缩为内容宽度）\n\n- - 注：在学习初期关于浮动要遵循的一个原则：**不要让一个元素单独浮动，要浮一起浮，要么都别浮**\n  - 浮动属性\n\n- - - 左浮动    float:left;\n    - 右浮动    float:right\n\n脱标示例\n\n| 代码                                                         | 运行结果                                                     |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <!DOCTYPE html><html lang=**\"en\"**><head>  <meta charset=**\"UTF-8\"**>  <title>**Title**</title>  <style>    .box{        width: 300**px**;        height: 300**px**;        background-color: **red**;             }      .FBox{        width: 450**px**;        height: 450**px**;        background-color: **aqua**;      }    </style></head><body>  <div class=**\"box\"**></div>  <div class=**\"FBox\"**></div></body></html> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411052874-f74c9cef-be0c-4eb3-8305-7009f53bf4fa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_15%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| <!DOCTYPE html><html lang=**\"en\"**><head>  <meta charset=**\"UTF-8\"**>  <title>**Title**</title>  <style>    .box{        width: 300**px**;        height: 300**px**;        background-color: **red**;        float: **left**;      }      .FBox{        width: 450**px**;        height: 450**px**;        background-color: **aqua**;      }    </style></head><body>  <div class=**\"box\"**></div>  <div class=**\"FBox\"**></div></body></html> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411089649-7e53a85f-5dec-427a-b4e5-f561b68a2fc9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n收缩示例\n\n| 代码                                                         | 示例                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <!DOCTYPE html><html lang=**\"en\"**><head>  <meta charset=**\"UTF-8\"**>  <title>**Title**</title>  <style>    .box{        background-color: **red**;       }    </style></head><body>  <div class=**\"box\"**>**这是一行字**</div></body></html> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411191956-d9627364-0284-47bd-92c4-cd34f74deffa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_23%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| <!DOCTYPE html><html lang=**\"en\"**><head>  <meta charset=**\"UTF-8\"**>  <title>**Title**</title>  <style>    .box{        background-color: **red**;        float: **left**;      }     </style></head><body>  <div class=**\"box\"**>**这是一行字**</div></body></html> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411233384-6aaacf3c-b4ed-49a6-a17f-da47de55c0fa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n左浮动示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            background-color: red;\n            float: left;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是第一行字</div>\n    <div class=\"box\">这是第二行字</div>\n    <div class=\"box\">这是第三行字</div>\n    <div class=\"box\">这是第四行字</div>\n</body>\n</html>\n```\n\n右浮动示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            background-color: red;\n            float: right;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是第一行字</div>\n    <div class=\"box\">这是第二行字</div>\n    <div class=\"box\">这是第三行字</div>\n    <div class=\"box\">这是第四行字</div>\n</body>\n</html>\n```\n\n#### 5.3.4背景\n\n- - 背景图 background-image:url(\"图片地址\")\n\n- - - 注：\n\n- - - - 在元素添加背景图时其运行时高度必须大于1\n      - 背景图处于元素的最底层不会占用元素内容的存储空间\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background-image: url(\"../images/mapImages/4.png\");\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景图大小 background-size:宽度 高度；\n\n- - - 注：\n\n- - - - 为背景图设置大小时需要注意该图的纵横比（容易出现背景变形）\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background-image: url(\"../images/mapImages/1.png\");\n            background-size: 100% 100%;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景重复 background-repeat:no-repeat/repeat-x;repeat-y;\n\n- - - 当图片宽高小于容器宽高时图片默认会铺满整个容器，会导致背景重复\n    - 背景重复属性值默认为repeat（重复），也可以设置为\n\n- - - - no-repeat:不重复\n      - repeat-x：X轴重复\n      - repeat-y：Y轴重复\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background-image: url(\"../images/mapImages/1.png\");\n            /*background-repeat: repeat-x;*/\n            /*background-repeat: repeat-y;*/\n            background-repeat: no-repeat;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景位移 background-position:x轴值 Y轴值；\n\n- - - 当背景图大小小于容器大小的时候，容器中添加背景图后只能展示出部分背景图\n    - 通过背景位移，可以移动背景图片让容器中显示背景图中想要展示分部分\n    - 注：\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630463229523-5d0c94e2-3a53-4b6a-a6ba-5e109ae8913c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100px;\n            height: 100px;\n            background-image: url(\"../images/mapImages/4.png\");\n            background-repeat: no-repeat;\n            border: 1px solid black;\n            background-position: -56px -30px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景色 background-color:颜色单词/十六进制值/rgba值\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background-color: red;\n            /*background-color: #ff0000;*/\n            /*background-color: rgba(255, 0, 0, 0.71);*/\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景渐变\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background:linear-gradient(#ff0000,#ffffff);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n#### 5.3.5阴影 box-shadow\n\n- - 语法：\n\nbox-shadow: h-shadow v-shadow blur spread color inset;\n\n- - 属性值：\n\n| 值       | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| h-shadow | 必需的。水平阴影的位置。允许负值                             |\n| v-shadow | 必需的。垂直阴影的位置。允许负值                             |\n| blur     | 可选。模糊距离                                               |\n| spread   | 可选。阴影的大小                                             |\n| color    | 可选。阴影的颜色。在[CSS颜色值](https://www.runoob.com/cssref/css_colors_legal.aspx)寻找颜色值的完整列表 |\n| inset    | 可选。从外层的阴影（开始时）改变阴影内侧阴影                 |\n\n示例一\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100px;\n            height: 100px;\n            background-color: white;\n            box-shadow: 0px 0px 50px 2px gainsboro;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n示例二\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100px;\n            height: 100px;\n            background-color: white;\n            box-shadow:    0px -10px 0px 0px #ff0000,   /*上边阴影  红色*/\n            -10px 0px 0px 0px #3bee17,   /*左边阴影  绿色*/\n            10px 0px 0px 0px #2279ee,    /*右边阴影  蓝色*/\n            0px 10px 0px 0px #eede15;    /*下边阴影  黄色*/\n            border-radius: 50%;\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n#### 5.3.6圆角 border-[*-*-]radius:圆角值\n\n圆形示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: red;\n            border-radius: 50%;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>\n```\n\n单角示例\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: red;\n            border-bottom-left-radius: 20px;\n            /*border-bottom-right-radius: 20px;*/\n            /*border-top-right-radius: 20px;*/\n            /*border-top-left-radius: 20px;*/\n            \n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>\n```","source":"_posts/五-CSS常用样式.md","raw":"---\ntitle: (五)CSS常用样式\ndate: 2022-07-08 19:42:18\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://www.codesnail.com/wp-content/uploads/2021/02/css-syntax-structure.png\ncoverWidth: 1280\ncoverHeight: 650\nauthor: xiguayaaaaa\nfrom:\n---\n(五)CSS常用样式\n<!--more-->\n## 5.3 CSS 常用样式属性\n\n#### 5.3.1宽高\n\n- - 宽width：像素值/百分比（上一级标签的百分之多少）\n  - 高height：像素值/百分比（上一级标签的百分之多少[注：当标签为body下的第一层标签时，高度使用百分比是不生效的]）\n  - 示例\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404127941-15c52bda-471e-4f8f-badd-94657b35432f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404138115-693d3125-52b8-4fdc-b468-ab6f777ba28c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404170319-5ab39ea2-c836-4221-9f15-35afbf841664.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_19%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |                                                              |\n\n#### 5.3.2文字\n\n- - 文字大小\n\n- - - font-size：像素值\n\n- - 文字颜色\n\n- - - color:颜色单词/十六进制值/rgba值\n\n- - 文字对齐方式\n\n- - - text-align:居中/靠左/靠右\n\n- - 文字的字体设置\n\n- - - font-family:字体\n\n示例\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404233490-92063cc0-c11a-41ea-8787-37e5c94c2d40.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_24%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n#### 5.3.3浮动\n\n- - 标准文档流\n\n- - - web页面的制作不同于设计软件，它是个流，必须从上而下，先执行渲染显示上边的元素，依次向下渲染显示\n    - 我们知道元素分块级和行级元素两类，如果页面完全遵循文档流去开发就会导致很多页面排版不能实现或不能完全实现\n    - 通过浮动我们可以让元素脱离标准流，实现块级元素并排等一些效果\n\n- - 浮动特点\n\n- - - 脱离标准流\n    - 元素并排（如果容器宽度足够元素则在容器宽度范围内并排，如果宽度不够则容器内元素会依次换行排列）\n    - 收缩（如果一个没有设置宽度的元素浮动，那么元素的宽度会自动收缩为内容宽度）\n\n- - 注：在学习初期关于浮动要遵循的一个原则：**不要让一个元素单独浮动，要浮一起浮，要么都别浮**\n  - 浮动属性\n\n- - - 左浮动    float:left;\n    - 右浮动    float:right\n\n脱标示例\n\n| 代码                                                         | 运行结果                                                     |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <!DOCTYPE html><html lang=**\"en\"**><head>  <meta charset=**\"UTF-8\"**>  <title>**Title**</title>  <style>    .box{        width: 300**px**;        height: 300**px**;        background-color: **red**;             }      .FBox{        width: 450**px**;        height: 450**px**;        background-color: **aqua**;      }    </style></head><body>  <div class=**\"box\"**></div>  <div class=**\"FBox\"**></div></body></html> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411052874-f74c9cef-be0c-4eb3-8305-7009f53bf4fa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_15%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| <!DOCTYPE html><html lang=**\"en\"**><head>  <meta charset=**\"UTF-8\"**>  <title>**Title**</title>  <style>    .box{        width: 300**px**;        height: 300**px**;        background-color: **red**;        float: **left**;      }      .FBox{        width: 450**px**;        height: 450**px**;        background-color: **aqua**;      }    </style></head><body>  <div class=**\"box\"**></div>  <div class=**\"FBox\"**></div></body></html> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411089649-7e53a85f-5dec-427a-b4e5-f561b68a2fc9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n收缩示例\n\n| 代码                                                         | 示例                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <!DOCTYPE html><html lang=**\"en\"**><head>  <meta charset=**\"UTF-8\"**>  <title>**Title**</title>  <style>    .box{        background-color: **red**;       }    </style></head><body>  <div class=**\"box\"**>**这是一行字**</div></body></html> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411191956-d9627364-0284-47bd-92c4-cd34f74deffa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_23%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| <!DOCTYPE html><html lang=**\"en\"**><head>  <meta charset=**\"UTF-8\"**>  <title>**Title**</title>  <style>    .box{        background-color: **red**;        float: **left**;      }     </style></head><body>  <div class=**\"box\"**>**这是一行字**</div></body></html> | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411233384-6aaacf3c-b4ed-49a6-a17f-da47de55c0fa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n左浮动示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            background-color: red;\n            float: left;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是第一行字</div>\n    <div class=\"box\">这是第二行字</div>\n    <div class=\"box\">这是第三行字</div>\n    <div class=\"box\">这是第四行字</div>\n</body>\n</html>\n```\n\n右浮动示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            background-color: red;\n            float: right;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">这是第一行字</div>\n    <div class=\"box\">这是第二行字</div>\n    <div class=\"box\">这是第三行字</div>\n    <div class=\"box\">这是第四行字</div>\n</body>\n</html>\n```\n\n#### 5.3.4背景\n\n- - 背景图 background-image:url(\"图片地址\")\n\n- - - 注：\n\n- - - - 在元素添加背景图时其运行时高度必须大于1\n      - 背景图处于元素的最底层不会占用元素内容的存储空间\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background-image: url(\"../images/mapImages/4.png\");\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景图大小 background-size:宽度 高度；\n\n- - - 注：\n\n- - - - 为背景图设置大小时需要注意该图的纵横比（容易出现背景变形）\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background-image: url(\"../images/mapImages/1.png\");\n            background-size: 100% 100%;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景重复 background-repeat:no-repeat/repeat-x;repeat-y;\n\n- - - 当图片宽高小于容器宽高时图片默认会铺满整个容器，会导致背景重复\n    - 背景重复属性值默认为repeat（重复），也可以设置为\n\n- - - - no-repeat:不重复\n      - repeat-x：X轴重复\n      - repeat-y：Y轴重复\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background-image: url(\"../images/mapImages/1.png\");\n            /*background-repeat: repeat-x;*/\n            /*background-repeat: repeat-y;*/\n            background-repeat: no-repeat;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景位移 background-position:x轴值 Y轴值；\n\n- - - 当背景图大小小于容器大小的时候，容器中添加背景图后只能展示出部分背景图\n    - 通过背景位移，可以移动背景图片让容器中显示背景图中想要展示分部分\n    - 注：\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630463229523-5d0c94e2-3a53-4b6a-a6ba-5e109ae8913c.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100px;\n            height: 100px;\n            background-image: url(\"../images/mapImages/4.png\");\n            background-repeat: no-repeat;\n            border: 1px solid black;\n            background-position: -56px -30px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景色 background-color:颜色单词/十六进制值/rgba值\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background-color: red;\n            /*background-color: #ff0000;*/\n            /*background-color: rgba(255, 0, 0, 0.71);*/\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n- - 背景渐变\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 200px;\n            background:linear-gradient(#ff0000,#ffffff);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n#### 5.3.5阴影 box-shadow\n\n- - 语法：\n\nbox-shadow: h-shadow v-shadow blur spread color inset;\n\n- - 属性值：\n\n| 值       | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| h-shadow | 必需的。水平阴影的位置。允许负值                             |\n| v-shadow | 必需的。垂直阴影的位置。允许负值                             |\n| blur     | 可选。模糊距离                                               |\n| spread   | 可选。阴影的大小                                             |\n| color    | 可选。阴影的颜色。在[CSS颜色值](https://www.runoob.com/cssref/css_colors_legal.aspx)寻找颜色值的完整列表 |\n| inset    | 可选。从外层的阴影（开始时）改变阴影内侧阴影                 |\n\n示例一\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100px;\n            height: 100px;\n            background-color: white;\n            box-shadow: 0px 0px 50px 2px gainsboro;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n示例二\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100px;\n            height: 100px;\n            background-color: white;\n            box-shadow:    0px -10px 0px 0px #ff0000,   /*上边阴影  红色*/\n            -10px 0px 0px 0px #3bee17,   /*左边阴影  绿色*/\n            10px 0px 0px 0px #2279ee,    /*右边阴影  蓝色*/\n            0px 10px 0px 0px #eede15;    /*下边阴影  黄色*/\n            border-radius: 50%;\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"demo\"></div>\n</body>\n</html>\n```\n\n#### 5.3.6圆角 border-[*-*-]radius:圆角值\n\n圆形示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: red;\n            border-radius: 50%;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>\n```\n\n单角示例\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 200px;\n            height: 200px;\n            background-color: red;\n            border-bottom-left-radius: 20px;\n            /*border-bottom-right-radius: 20px;*/\n            /*border-top-right-radius: 20px;*/\n            /*border-top-left-radius: 20px;*/\n            \n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>\n```","slug":"五-CSS常用样式","published":1,"updated":"2022-07-19T02:39:25.094Z","_id":"cl5hmbtm000112cujhipy7doj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(五)CSS常用样式</p>\n<span id=\"more\"></span>\n<h2 id=\"5-3-CSS-常用样式属性\"><a href=\"#5-3-CSS-常用样式属性\" class=\"headerlink\" title=\"5.3 CSS 常用样式属性\"></a>5.3 CSS 常用样式属性</h2><h4 id=\"5-3-1宽高\"><a href=\"#5-3-1宽高\" class=\"headerlink\" title=\"5.3.1宽高\"></a>5.3.1宽高</h4><ul>\n<li><ul>\n<li>宽width：像素值/百分比（上一级标签的百分之多少）</li>\n<li>高height：像素值/百分比（上一级标签的百分之多少[注：当标签为body下的第一层标签时，高度使用百分比是不生效的]）</li>\n<li>示例</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404127941-15c52bda-471e-4f8f-badd-94657b35432f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404138115-693d3125-52b8-4fdc-b468-ab6f777ba28c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404170319-5ab39ea2-c836-4221-9f15-35afbf841664.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"5-3-2文字\"><a href=\"#5-3-2文字\" class=\"headerlink\" title=\"5.3.2文字\"></a>5.3.2文字</h4><ul>\n<li><ul>\n<li>文字大小</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>font-size：像素值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>文字颜色</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>color:颜色单词/十六进制值/rgba值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>文字对齐方式</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>text-align:居中/靠左/靠右</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>文字的字体设置</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>font-family:字体</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404233490-92063cc0-c11a-41ea-8787-37e5c94c2d40.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_24,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h4 id=\"5-3-3浮动\"><a href=\"#5-3-3浮动\" class=\"headerlink\" title=\"5.3.3浮动\"></a>5.3.3浮动</h4><ul>\n<li><ul>\n<li>标准文档流</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>web页面的制作不同于设计软件，它是个流，必须从上而下，先执行渲染显示上边的元素，依次向下渲染显示</li>\n<li>我们知道元素分块级和行级元素两类，如果页面完全遵循文档流去开发就会导致很多页面排版不能实现或不能完全实现</li>\n<li>通过浮动我们可以让元素脱离标准流，实现块级元素并排等一些效果</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>浮动特点</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>脱离标准流</li>\n<li>元素并排（如果容器宽度足够元素则在容器宽度范围内并排，如果宽度不够则容器内元素会依次换行排列）</li>\n<li>收缩（如果一个没有设置宽度的元素浮动，那么元素的宽度会自动收缩为内容宽度）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>注：在学习初期关于浮动要遵循的一个原则：<strong>不要让一个元素单独浮动，要浮一起浮，要么都别浮</strong></li>\n<li>浮动属性</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>左浮动    float:left;</li>\n<li>右浮动    float:right</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>脱标示例</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>运行结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><!DOCTYPE html>&lt;html lang=<strong>“en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        width: 300</strong>px**;        height: 300<strong>px</strong>;        background-color: <strong>red</strong>;             }      .FBox{        width: 450<strong>px</strong>;        height: 450<strong>px</strong>;        background-color: <strong>aqua</strong>;      }    </style></head><body>  &lt;div class=**”box”**&gt;</div>  &lt;div class=**”FBox”**&gt;</div></body></html></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411052874-f74c9cef-be0c-4eb3-8305-7009f53bf4fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n<tr>\n<td><!DOCTYPE html>&lt;html lang=<strong>“en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        width: 300</strong>px**;        height: 300<strong>px</strong>;        background-color: <strong>red</strong>;        float: <strong>left</strong>;      }      .FBox{        width: 450<strong>px</strong>;        height: 450<strong>px</strong>;        background-color: <strong>aqua</strong>;      }    </style></head><body>  &lt;div class=**”box”**&gt;</div>  &lt;div class=**”FBox”**&gt;</div></body></html></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411089649-7e53a85f-5dec-427a-b4e5-f561b68a2fc9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<p>收缩示例</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><!DOCTYPE html>&lt;html lang=**”en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        background-color: <strong>red</strong>;       }    </style></head><body>  &lt;div class=**”box”**&gt;<strong>这是一行字</strong></div></body></html></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411191956-d9627364-0284-47bd-92c4-cd34f74deffa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n<tr>\n<td><!DOCTYPE html>&lt;html lang=**”en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        background-color: <strong>red</strong>;        float: <strong>left</strong>;      }     </style></head><body>  &lt;div class=**”box”**&gt;<strong>这是一行字</strong></div></body></html></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411233384-6aaacf3c-b4ed-49a6-a17f-da47de55c0fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<p>左浮动示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            background-color: red;\n            float: left;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第一行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第二行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第三行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第四行字&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>右浮动示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            background-color: red;\n            float: right;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第一行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第二行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第三行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第四行字&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"5-3-4背景\"><a href=\"#5-3-4背景\" class=\"headerlink\" title=\"5.3.4背景\"></a>5.3.4背景</h4><ul>\n<li><ul>\n<li>背景图 background-image:url(“图片地址”)</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>注：</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>在元素添加背景图时其运行时高度必须大于1</li>\n<li>背景图处于元素的最底层不会占用元素内容的存储空间</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background-image: url(&quot;../images/mapImages/4.png&quot;);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景图大小 background-size:宽度 高度；</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>注：</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>为背景图设置大小时需要注意该图的纵横比（容易出现背景变形）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background-image: url(&quot;../images/mapImages/1.png&quot;);\n            background-size: 100% 100%;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景重复 background-repeat:no-repeat/repeat-x;repeat-y;</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>当图片宽高小于容器宽高时图片默认会铺满整个容器，会导致背景重复</li>\n<li>背景重复属性值默认为repeat（重复），也可以设置为</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>no-repeat:不重复</li>\n<li>repeat-x：X轴重复</li>\n<li>repeat-y：Y轴重复</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background-image: url(&quot;../images/mapImages/1.png&quot;);\n            /*background-repeat: repeat-x;*/\n            /*background-repeat: repeat-y;*/\n            background-repeat: no-repeat;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景位移 background-position:x轴值 Y轴值；</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>当背景图大小小于容器大小的时候，容器中添加背景图后只能展示出部分背景图</li>\n<li>通过背景位移，可以移动背景图片让容器中显示背景图中想要展示分部分</li>\n<li>注：</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630463229523-5d0c94e2-3a53-4b6a-a6ba-5e109ae8913c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100px;\n            height: 100px;\n            background-image: url(&quot;../images/mapImages/4.png&quot;);\n            background-repeat: no-repeat;\n            border: 1px solid black;\n            background-position: -56px -30px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景色 background-color:颜色单词/十六进制值/rgba值</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background-color: red;\n            /*background-color: #ff0000;*/\n            /*background-color: rgba(255, 0, 0, 0.71);*/\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景渐变</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background:linear-gradient(#ff0000,#ffffff);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"5-3-5阴影-box-shadow\"><a href=\"#5-3-5阴影-box-shadow\" class=\"headerlink\" title=\"5.3.5阴影 box-shadow\"></a>5.3.5阴影 box-shadow</h4><ul>\n<li><ul>\n<li>语法：</li>\n</ul>\n</li>\n</ul>\n<p>box-shadow: h-shadow v-shadow blur spread color inset;</p>\n<ul>\n<li><ul>\n<li>属性值：</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>h-shadow</td>\n<td>必需的。水平阴影的位置。允许负值</td>\n</tr>\n<tr>\n<td>v-shadow</td>\n<td>必需的。垂直阴影的位置。允许负值</td>\n</tr>\n<tr>\n<td>blur</td>\n<td>可选。模糊距离</td>\n</tr>\n<tr>\n<td>spread</td>\n<td>可选。阴影的大小</td>\n</tr>\n<tr>\n<td>color</td>\n<td>可选。阴影的颜色。在<a href=\"https://www.runoob.com/cssref/css_colors_legal.aspx\">CSS颜色值</a>寻找颜色值的完整列表</td>\n</tr>\n<tr>\n<td>inset</td>\n<td>可选。从外层的阴影（开始时）改变阴影内侧阴影</td>\n</tr>\n</tbody></table>\n<p>示例一</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100px;\n            height: 100px;\n            background-color: white;\n            box-shadow: 0px 0px 50px 2px gainsboro;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>示例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100px;\n            height: 100px;\n            background-color: white;\n            box-shadow:    0px -10px 0px 0px #ff0000,   /*上边阴影  红色*/\n            -10px 0px 0px 0px #3bee17,   /*左边阴影  绿色*/\n            10px 0px 0px 0px #2279ee,    /*右边阴影  蓝色*/\n            0px 10px 0px 0px #eede15;    /*下边阴影  黄色*/\n            border-radius: 50%;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"5-3-6圆角-border-radius-圆角值\"><a href=\"#5-3-6圆角-border-radius-圆角值\" class=\"headerlink\" title=\"5.3.6圆角 border-[--]radius:圆角值\"></a>5.3.6圆角 border-[<em>-</em>-]radius:圆角值</h4><p>圆形示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: red;\n            border-radius: 50%;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>单角示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: red;\n            border-bottom-left-radius: 20px;\n            /*border-bottom-right-radius: 20px;*/\n            /*border-top-right-radius: 20px;*/\n            /*border-top-left-radius: 20px;*/\n            \n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>(五)CSS常用样式</p>","more":"<h2 id=\"5-3-CSS-常用样式属性\"><a href=\"#5-3-CSS-常用样式属性\" class=\"headerlink\" title=\"5.3 CSS 常用样式属性\"></a>5.3 CSS 常用样式属性</h2><h4 id=\"5-3-1宽高\"><a href=\"#5-3-1宽高\" class=\"headerlink\" title=\"5.3.1宽高\"></a>5.3.1宽高</h4><ul>\n<li><ul>\n<li>宽width：像素值/百分比（上一级标签的百分之多少）</li>\n<li>高height：像素值/百分比（上一级标签的百分之多少[注：当标签为body下的第一层标签时，高度使用百分比是不生效的]）</li>\n<li>示例</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404127941-15c52bda-471e-4f8f-badd-94657b35432f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404138115-693d3125-52b8-4fdc-b468-ab6f777ba28c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404170319-5ab39ea2-c836-4221-9f15-35afbf841664.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"5-3-2文字\"><a href=\"#5-3-2文字\" class=\"headerlink\" title=\"5.3.2文字\"></a>5.3.2文字</h4><ul>\n<li><ul>\n<li>文字大小</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>font-size：像素值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>文字颜色</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>color:颜色单词/十六进制值/rgba值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>文字对齐方式</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>text-align:居中/靠左/靠右</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>文字的字体设置</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>font-family:字体</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404233490-92063cc0-c11a-41ea-8787-37e5c94c2d40.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_24,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h4 id=\"5-3-3浮动\"><a href=\"#5-3-3浮动\" class=\"headerlink\" title=\"5.3.3浮动\"></a>5.3.3浮动</h4><ul>\n<li><ul>\n<li>标准文档流</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>web页面的制作不同于设计软件，它是个流，必须从上而下，先执行渲染显示上边的元素，依次向下渲染显示</li>\n<li>我们知道元素分块级和行级元素两类，如果页面完全遵循文档流去开发就会导致很多页面排版不能实现或不能完全实现</li>\n<li>通过浮动我们可以让元素脱离标准流，实现块级元素并排等一些效果</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>浮动特点</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>脱离标准流</li>\n<li>元素并排（如果容器宽度足够元素则在容器宽度范围内并排，如果宽度不够则容器内元素会依次换行排列）</li>\n<li>收缩（如果一个没有设置宽度的元素浮动，那么元素的宽度会自动收缩为内容宽度）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>注：在学习初期关于浮动要遵循的一个原则：<strong>不要让一个元素单独浮动，要浮一起浮，要么都别浮</strong></li>\n<li>浮动属性</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>左浮动    float:left;</li>\n<li>右浮动    float:right</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>脱标示例</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>运行结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><!DOCTYPE html>&lt;html lang=<strong>“en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        width: 300</strong>px**;        height: 300<strong>px</strong>;        background-color: <strong>red</strong>;             }      .FBox{        width: 450<strong>px</strong>;        height: 450<strong>px</strong>;        background-color: <strong>aqua</strong>;      }    </style></head><body>  &lt;div class=**”box”**&gt;</div>  &lt;div class=**”FBox”**&gt;</div></body></html></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411052874-f74c9cef-be0c-4eb3-8305-7009f53bf4fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n<tr>\n<td><!DOCTYPE html>&lt;html lang=<strong>“en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        width: 300</strong>px**;        height: 300<strong>px</strong>;        background-color: <strong>red</strong>;        float: <strong>left</strong>;      }      .FBox{        width: 450<strong>px</strong>;        height: 450<strong>px</strong>;        background-color: <strong>aqua</strong>;      }    </style></head><body>  &lt;div class=**”box”**&gt;</div>  &lt;div class=**”FBox”**&gt;</div></body></html></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411089649-7e53a85f-5dec-427a-b4e5-f561b68a2fc9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<p>收缩示例</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><!DOCTYPE html>&lt;html lang=**”en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        background-color: <strong>red</strong>;       }    </style></head><body>  &lt;div class=**”box”**&gt;<strong>这是一行字</strong></div></body></html></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411191956-d9627364-0284-47bd-92c4-cd34f74deffa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n<tr>\n<td><!DOCTYPE html>&lt;html lang=**”en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        background-color: <strong>red</strong>;        float: <strong>left</strong>;      }     </style></head><body>  &lt;div class=**”box”**&gt;<strong>这是一行字</strong></div></body></html></td>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411233384-6aaacf3c-b4ed-49a6-a17f-da47de55c0fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<p>左浮动示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            background-color: red;\n            float: left;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第一行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第二行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第三行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第四行字&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>右浮动示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            background-color: red;\n            float: right;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第一行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第二行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第三行字&lt;/div&gt;\n    &lt;div class=&quot;box&quot;&gt;这是第四行字&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"5-3-4背景\"><a href=\"#5-3-4背景\" class=\"headerlink\" title=\"5.3.4背景\"></a>5.3.4背景</h4><ul>\n<li><ul>\n<li>背景图 background-image:url(“图片地址”)</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>注：</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>在元素添加背景图时其运行时高度必须大于1</li>\n<li>背景图处于元素的最底层不会占用元素内容的存储空间</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background-image: url(&quot;../images/mapImages/4.png&quot;);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景图大小 background-size:宽度 高度；</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>注：</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>为背景图设置大小时需要注意该图的纵横比（容易出现背景变形）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background-image: url(&quot;../images/mapImages/1.png&quot;);\n            background-size: 100% 100%;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景重复 background-repeat:no-repeat/repeat-x;repeat-y;</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>当图片宽高小于容器宽高时图片默认会铺满整个容器，会导致背景重复</li>\n<li>背景重复属性值默认为repeat（重复），也可以设置为</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>no-repeat:不重复</li>\n<li>repeat-x：X轴重复</li>\n<li>repeat-y：Y轴重复</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background-image: url(&quot;../images/mapImages/1.png&quot;);\n            /*background-repeat: repeat-x;*/\n            /*background-repeat: repeat-y;*/\n            background-repeat: no-repeat;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景位移 background-position:x轴值 Y轴值；</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>当背景图大小小于容器大小的时候，容器中添加背景图后只能展示出部分背景图</li>\n<li>通过背景位移，可以移动背景图片让容器中显示背景图中想要展示分部分</li>\n<li>注：</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630463229523-5d0c94e2-3a53-4b6a-a6ba-5e109ae8913c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100px;\n            height: 100px;\n            background-image: url(&quot;../images/mapImages/4.png&quot;);\n            background-repeat: no-repeat;\n            border: 1px solid black;\n            background-position: -56px -30px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景色 background-color:颜色单词/十六进制值/rgba值</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background-color: red;\n            /*background-color: #ff0000;*/\n            /*background-color: rgba(255, 0, 0, 0.71);*/\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>背景渐变</li>\n</ul>\n</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 200px;\n            background:linear-gradient(#ff0000,#ffffff);\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"5-3-5阴影-box-shadow\"><a href=\"#5-3-5阴影-box-shadow\" class=\"headerlink\" title=\"5.3.5阴影 box-shadow\"></a>5.3.5阴影 box-shadow</h4><ul>\n<li><ul>\n<li>语法：</li>\n</ul>\n</li>\n</ul>\n<p>box-shadow: h-shadow v-shadow blur spread color inset;</p>\n<ul>\n<li><ul>\n<li>属性值：</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>h-shadow</td>\n<td>必需的。水平阴影的位置。允许负值</td>\n</tr>\n<tr>\n<td>v-shadow</td>\n<td>必需的。垂直阴影的位置。允许负值</td>\n</tr>\n<tr>\n<td>blur</td>\n<td>可选。模糊距离</td>\n</tr>\n<tr>\n<td>spread</td>\n<td>可选。阴影的大小</td>\n</tr>\n<tr>\n<td>color</td>\n<td>可选。阴影的颜色。在<a href=\"https://www.runoob.com/cssref/css_colors_legal.aspx\">CSS颜色值</a>寻找颜色值的完整列表</td>\n</tr>\n<tr>\n<td>inset</td>\n<td>可选。从外层的阴影（开始时）改变阴影内侧阴影</td>\n</tr>\n</tbody></table>\n<p>示例一</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100px;\n            height: 100px;\n            background-color: white;\n            box-shadow: 0px 0px 50px 2px gainsboro;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>示例二</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100px;\n            height: 100px;\n            background-color: white;\n            box-shadow:    0px -10px 0px 0px #ff0000,   /*上边阴影  红色*/\n            -10px 0px 0px 0px #3bee17,   /*左边阴影  绿色*/\n            10px 0px 0px 0px #2279ee,    /*右边阴影  蓝色*/\n            0px 10px 0px 0px #eede15;    /*下边阴影  黄色*/\n            border-radius: 50%;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"5-3-6圆角-border-radius-圆角值\"><a href=\"#5-3-6圆角-border-radius-圆角值\" class=\"headerlink\" title=\"5.3.6圆角 border-[--]radius:圆角值\"></a>5.3.6圆角 border-[<em>-</em>-]radius:圆角值</h4><p>圆形示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: red;\n            border-radius: 50%;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>单角示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 200px;\n            height: 200px;\n            background-color: red;\n            border-bottom-left-radius: 20px;\n            /*border-bottom-right-radius: 20px;*/\n            /*border-top-right-radius: 20px;*/\n            /*border-top-left-radius: 20px;*/\n            \n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"title":"(六)样式表与选择器","date":"2022-07-08T11:42:50.000Z","cover":"https://tse3-mm.cn.bing.net/th/id/OIP-C.Od-UrquQOrcwEkpDwwkCiQHaEK?pid=ImgDet&rs=1","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"(六)样式表与选择器\n<!--more-->\n\n\n\n## 6.1 样式表\n\ncss 是 web 标准中的表现标准，专门用来对网页标签进行布局和设置样式的一门语言，目前使用css3，css 又名层叠样式表.\n\n样式表表示CSS代码的位置，目前CSS样式表分以下三类：\n\n#### 6.1.1 内联样式表\n\n- 顾名思义内联样式写在标签中（在开始标签中添加style=\"\"属性，在双引号中添加样式属性，属性和属性之间用分号隔开）\n- 格式\n\n\\<开始标签 style=\"样式属性:属性值;样式属性:属性值;.........\">标签内容\\</结束标签>\n\n示例\n\n```html\n<body>\n    <div style=\"color: red\">内联样式</div>\n</body>\n```\n\n#### 6.1.2 内部样式表\n\n- 写在html内部的样式（在html的头文件中嵌套\\<style>标签，在style标签中通过特有格式添加基本样式）\n- 格式\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\">内联样式</div>\n</body>\n</html>\n```\n\n#### 6.1.3 外部样式表\n\n- 外部样式表就是在html文件外创建一个后缀为.css的文件，然后html标签中使用link标签将外部.css文件引入到html文件中去使用\n- 格式\n\n\\<link rel=\"stylesheet\" href=\"外部文件路径\" type=\"text/css\" />\n\n- 创建外部样式表文件\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630480612231-e15e1d65-ac38-4c0a-84d2-9f8c78dc8991.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"styleCss.css\" type=\"text/css\">\n</head>\n<body>\n    <div class=\"demo\">内联样式</div>\n</body>\n</html>\n.demo{\n    color: red;\n}\n```\n\n注：当三种样式表出现冲突时，三种样式表的优先级为  **内联样式表>内部样式表>外部样式表**\n\n## 6.2 选择器\n\n选择器是CSS 中一个重要的内容。使用它可以大幅度提高开发人员书写或修改样式表时的工作效率。\n\n#### 6.2.1 属性选择器\n\n在HTML中，通过各种各样的属性，我们可以给元素增加很多附加信息。例如，通过width属性，我们可以指定div元素的宽度，通过id属性，我们可以将不同的div元素进行区分，并且通过JavaScript来控制这个div元素的内容和状态。\n\n##### 6.2.1.1 类选择器(class选择器)\n\n- 在开始标签中添加class=\"\"属性，并命名，在样式表中使用“.选择器名称{......}”可为该元素添加想要添加的样式属性\n- 当然样式表中的样式与标签中的class=\"选择名称\"，可以理解为是标签引用了选择器中的样式，一个标签中可以引用多个类选择器样式，名称和名称之间用空格隔开\n- 格式\n\n| 元素                                                         | 样式表                                                       |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <开始标签 class=\"ClassName\">元素内容</结束标签>              | .ClassName{  样式属性:属性值;  样式属性:属性值;  ......}     |\n| <开始标签 class=\"ClassName ClassNameTest\">元素内容</结束标签> | .ClassName{  样式属性:属性值;  样式属性:属性值;  ......}.ClassNameTest{  样式属性:属性值;  样式属性:属性值;  ......} |\n\n类选择器样式是可以重复使用的，也就是说一个样式可以由多个元素共同使用，这样可以提供代码的复用性，但是需要注意在做网页结构布局的时候对于结构不要过多的复用代码，保不准后期需要更改结构模块，复用的代码可以是一些不更改结构的样式，如文字，颜色，等\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 100px;\n        }\n        .color1{\n            background-color: red;\n        }\n        .color2{\n            background-color: #3bee17;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo color1\"></div>\n    <div class=\"demo color2\"></div>\n</body>\n</html>\n```\n\n##### 6.2.1.2 id选择器\n\n- 在开始标签中添加id=\"\"属性，并命名，在样式表中使用“#选择器名称{......}”可为该元素添加想要添加的样式属性\n- 需要注意的是id选择器是唯一的，不可复用的，它是一个元素的唯一标识\n\n| 元素                                         | 样式表                                                   |\n| -------------------------------------------- | -------------------------------------------------------- |\n| <开始标签 id=\"ClassName\">元素内容</结束标签> | #ClassName{  样式属性:属性值;  样式属性:属性值;  ......} |\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        #myElement{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"myElement\"></div>\n</body>\n</html>\n```\n\n##### 6.2.1.3 通配选择器\n\n- [att*=val]选择器\n\n[att*=val]属性选择器的含义是:如果元素用att表示的属性之属性值中包含用val指定的字符的话，则该元素使用这个样式。\n\n- [att^=val]选择器\n\n[att^=val]属性选择器的含义是:如果元素用att表示的属性之属性值的开头字符为用val指定的字符的话，则该元素使用这个样式。\n\n- [att$=val]选择器\n\n[att$=val]属性选择器的含义是:如果元素用att表示的属性之属性值的结尾字符为用val指定的字符的话，则该元素使用这个样式。\n\n注：使用该属性时必须在指定匹配字符前加上“\\”转义符，不能是纯数字\n\n示例1\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n      /*只要包含e字符，全部添加一下样式*/\n        [class*=e]{\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"Element\">这是元素</div>\n    <div class=\"demo\">这是文字</div>\n    <div class=\"Element2\">这是元素</div>\n    <div class=\"demo1\">这是文字</div>\n    <div class=\"Element3\">这是元素</div>\n    <div class=\"demo2\">这是文字</div>\n    <div class=\"Element4\">这是元素</div>\n</body>\n</html>\n```\n\n示例2\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        /*只要d开头，就添加以下样式*/\n        [class^=d]{\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"Element\">这是元素</div>\n    <div class=\"demo\">这是文字</div>\n    <div class=\"Element2\">这是元素</div>\n    <div class=\"demo1\">这是文字</div>\n    <div class=\"Element3\">这是元素</div>\n    <div class=\"demo2\">这是文字</div>\n    <div class=\"Element4\">这是元素</div>\n</body>\n</html>\n```\n\n示例3\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        /*只要-2结尾，就添加以下样式*/\n        [class$=\\-2]{\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"Element\">这是元素</div>\n    <div class=\"demo\">这是文字</div>\n    <div class=\"Element-2\">这是元素</div>\n    <div class=\"demo-1\">这是文字</div>\n    <div class=\"Element-3\">这是元素</div>\n    <div class=\"demo-2\">这是文字</div>\n    <div class=\"Element-4\">这是元素</div>\n</body>\n</html>\n```\n\n#### 6.2.2 标签选择器\n\n- 标签选择顾名思义就是直接使用标签名在样式表中去给标签添加样式\n- 注：标签选择器会给所有同名且没有其它选择器的标签添加相同的样式，不建议直接使用，可与结构选择器结合使用\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            color: #2279ee;\n        }\n        div{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div>这是一行字</div>\n    <div>这是一行字</div>\n    <div class=\"demo\">这是一行字</div>\n    <div>这是一行字</div>\n    <div>这是一行字</div>\n    <div>这是一行字</div>\n</body>\n</html>\n```\n\n#### 6.2.3 结构选择器\n\n##### 6.2.3.1 后代选择器\n\n- 后代选择器又称包含选择器，后代选择器可以选择作为某元素后代（嵌套关系）的元素\n- 我们可以定义后代选择器来创建一些规则，使这些规则在某些文档结构中起作用，而在另外一些结构中不起作用。\n- 在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符（combinator）。每个空格结合符可以解释为“... 在 ... 找到”、“... 作为 ... 的一部分”、“... 作为 ... 的后代”，但是要求必须从右向左读选择器。\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .dlOne dd p{\n            color: white;\n            background-color: red;\n        }\n        .dlOne dd a{\n            color: #ff6700;\n        }\n        .dlTwo dd p{\n            color: white;\n            background-color: #ff50ef;\n        }\n        .dlTwo dd a{\n            color: #339fff;\n        }\n    </style>\n</head>\n<body>\n    <dl class=\"dlOne\">\n        <dt>\n            <img src=\"../images/mapImages/1.png\" alt=\"\">\n        </dt>\n        <dd>\n            <p>这是一行字</p>\n            <a href=\"#\">这是另一行字</a>\n        </dd>\n    </dl>\n    <dl class=\"dlTwo\">\n        <dt>\n            <img src=\"../images/mapImages/1.png\" alt=\"\">\n        </dt>\n        <dd>\n            <p>这还是一行字</p>\n            <a href=\"#\">这又是另一行字</a>\n        </dd>\n    </dl>\n</body>\n</html>\n```\n\n##### 6.2.3.2 群组选择器\n\n- 要为不同的HTML元素定义相同的样式时，可以采用群组声明。\n- 上述规则在选择器中指定了多个元素，元素之间用逗号来分隔。逗号告诉浏览器，规则中包含两个不同的选择器。这样的选择器叫群组选择器。\n- 群组选择器可以减少样式的重复定义。可以把任意数量、任意类型的选择器放在群组中进行声明\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo,a{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\">Byte科技</div>\n    <a href=\"#\">棒滴很！！！</a>\n</body>\n</html>\n```\n\n##### 6.2.3.3 序号子选择器\n\n-  序号选择器可以指定父元素中顺数或倒数某个子元素的样式\n- nth-child() 顺数\n- nth-last-child() 倒数\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        nav a:nth-child(1){\n            color: red;\n        }\n        nav a:nth-child(2){\n            color: #339fff;\n        }\n        nav a:nth-last-child(1){\n            background-color: #339fff;\n            color: white;\n        }\n        nav a:nth-last-child(2){\n            background-color: #d442ff;\n            color: #fff800;\n        }\n    </style>\n</head>\n<body>\n    <nav>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n    </nav>\n</body>\n</html>\n```\n\n#### 6.2.4 通用选择器\n\n- 通用选择器可以选择页面上的所有元素，并对它们应用样式，用 * 来表示。\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div>这是一行字</div>\n    <p>这还是一行字</p>\n    <a href=\"#\">这又是一行字</a>\n</body>\n</html>\n```\n\n#### 6.2.5 伪类选择器\n\n- 伪类用于定义元素的特殊状态，由CSS提供\n- E:hover\n- E:active\n- E:link\n- E:visited\n- E:foucs\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        a:link{\n            color: #339fff;\n        }\n        a:visited{\n            color: #3bee17;\n        }\n        a:hover{\n            color: red;\n        }\n        a:active{\n            font-size: 25px;\n        }\n        .inputEL:focus{\n            background-color: #339fff;\n        }\n    </style>\n</head>\n<body>\n    <a href=\"#\" class=\"demo\">这是一行字</a>\n\n    <form action=\"\">\n        <input class=\"inputEL\" type=\"text\" required>\n    </form>\n</body>\n</html>\n```","source":"_posts/六-样式表与选择器.md","raw":"---\ntitle: (六)样式表与选择器\ndate: 2022-07-08 19:42:50\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://tse3-mm.cn.bing.net/th/id/OIP-C.Od-UrquQOrcwEkpDwwkCiQHaEK?pid=ImgDet&rs=1\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\n(六)样式表与选择器\n<!--more-->\n\n\n\n## 6.1 样式表\n\ncss 是 web 标准中的表现标准，专门用来对网页标签进行布局和设置样式的一门语言，目前使用css3，css 又名层叠样式表.\n\n样式表表示CSS代码的位置，目前CSS样式表分以下三类：\n\n#### 6.1.1 内联样式表\n\n- 顾名思义内联样式写在标签中（在开始标签中添加style=\"\"属性，在双引号中添加样式属性，属性和属性之间用分号隔开）\n- 格式\n\n\\<开始标签 style=\"样式属性:属性值;样式属性:属性值;.........\">标签内容\\</结束标签>\n\n示例\n\n```html\n<body>\n    <div style=\"color: red\">内联样式</div>\n</body>\n```\n\n#### 6.1.2 内部样式表\n\n- 写在html内部的样式（在html的头文件中嵌套\\<style>标签，在style标签中通过特有格式添加基本样式）\n- 格式\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\">内联样式</div>\n</body>\n</html>\n```\n\n#### 6.1.3 外部样式表\n\n- 外部样式表就是在html文件外创建一个后缀为.css的文件，然后html标签中使用link标签将外部.css文件引入到html文件中去使用\n- 格式\n\n\\<link rel=\"stylesheet\" href=\"外部文件路径\" type=\"text/css\" />\n\n- 创建外部样式表文件\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630480612231-e15e1d65-ac38-4c0a-84d2-9f8c78dc8991.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"styleCss.css\" type=\"text/css\">\n</head>\n<body>\n    <div class=\"demo\">内联样式</div>\n</body>\n</html>\n.demo{\n    color: red;\n}\n```\n\n注：当三种样式表出现冲突时，三种样式表的优先级为  **内联样式表>内部样式表>外部样式表**\n\n## 6.2 选择器\n\n选择器是CSS 中一个重要的内容。使用它可以大幅度提高开发人员书写或修改样式表时的工作效率。\n\n#### 6.2.1 属性选择器\n\n在HTML中，通过各种各样的属性，我们可以给元素增加很多附加信息。例如，通过width属性，我们可以指定div元素的宽度，通过id属性，我们可以将不同的div元素进行区分，并且通过JavaScript来控制这个div元素的内容和状态。\n\n##### 6.2.1.1 类选择器(class选择器)\n\n- 在开始标签中添加class=\"\"属性，并命名，在样式表中使用“.选择器名称{......}”可为该元素添加想要添加的样式属性\n- 当然样式表中的样式与标签中的class=\"选择名称\"，可以理解为是标签引用了选择器中的样式，一个标签中可以引用多个类选择器样式，名称和名称之间用空格隔开\n- 格式\n\n| 元素                                                         | 样式表                                                       |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| <开始标签 class=\"ClassName\">元素内容</结束标签>              | .ClassName{  样式属性:属性值;  样式属性:属性值;  ......}     |\n| <开始标签 class=\"ClassName ClassNameTest\">元素内容</结束标签> | .ClassName{  样式属性:属性值;  样式属性:属性值;  ......}.ClassNameTest{  样式属性:属性值;  样式属性:属性值;  ......} |\n\n类选择器样式是可以重复使用的，也就是说一个样式可以由多个元素共同使用，这样可以提供代码的复用性，但是需要注意在做网页结构布局的时候对于结构不要过多的复用代码，保不准后期需要更改结构模块，复用的代码可以是一些不更改结构的样式，如文字，颜色，等\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            width: 100%;\n            height: 100px;\n        }\n        .color1{\n            background-color: red;\n        }\n        .color2{\n            background-color: #3bee17;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo color1\"></div>\n    <div class=\"demo color2\"></div>\n</body>\n</html>\n```\n\n##### 6.2.1.2 id选择器\n\n- 在开始标签中添加id=\"\"属性，并命名，在样式表中使用“#选择器名称{......}”可为该元素添加想要添加的样式属性\n- 需要注意的是id选择器是唯一的，不可复用的，它是一个元素的唯一标识\n\n| 元素                                         | 样式表                                                   |\n| -------------------------------------------- | -------------------------------------------------------- |\n| <开始标签 id=\"ClassName\">元素内容</结束标签> | #ClassName{  样式属性:属性值;  样式属性:属性值;  ......} |\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        #myElement{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"myElement\"></div>\n</body>\n</html>\n```\n\n##### 6.2.1.3 通配选择器\n\n- [att*=val]选择器\n\n[att*=val]属性选择器的含义是:如果元素用att表示的属性之属性值中包含用val指定的字符的话，则该元素使用这个样式。\n\n- [att^=val]选择器\n\n[att^=val]属性选择器的含义是:如果元素用att表示的属性之属性值的开头字符为用val指定的字符的话，则该元素使用这个样式。\n\n- [att$=val]选择器\n\n[att$=val]属性选择器的含义是:如果元素用att表示的属性之属性值的结尾字符为用val指定的字符的话，则该元素使用这个样式。\n\n注：使用该属性时必须在指定匹配字符前加上“\\”转义符，不能是纯数字\n\n示例1\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n      /*只要包含e字符，全部添加一下样式*/\n        [class*=e]{\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"Element\">这是元素</div>\n    <div class=\"demo\">这是文字</div>\n    <div class=\"Element2\">这是元素</div>\n    <div class=\"demo1\">这是文字</div>\n    <div class=\"Element3\">这是元素</div>\n    <div class=\"demo2\">这是文字</div>\n    <div class=\"Element4\">这是元素</div>\n</body>\n</html>\n```\n\n示例2\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        /*只要d开头，就添加以下样式*/\n        [class^=d]{\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"Element\">这是元素</div>\n    <div class=\"demo\">这是文字</div>\n    <div class=\"Element2\">这是元素</div>\n    <div class=\"demo1\">这是文字</div>\n    <div class=\"Element3\">这是元素</div>\n    <div class=\"demo2\">这是文字</div>\n    <div class=\"Element4\">这是元素</div>\n</body>\n</html>\n```\n\n示例3\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        /*只要-2结尾，就添加以下样式*/\n        [class$=\\-2]{\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"Element\">这是元素</div>\n    <div class=\"demo\">这是文字</div>\n    <div class=\"Element-2\">这是元素</div>\n    <div class=\"demo-1\">这是文字</div>\n    <div class=\"Element-3\">这是元素</div>\n    <div class=\"demo-2\">这是文字</div>\n    <div class=\"Element-4\">这是元素</div>\n</body>\n</html>\n```\n\n#### 6.2.2 标签选择器\n\n- 标签选择顾名思义就是直接使用标签名在样式表中去给标签添加样式\n- 注：标签选择器会给所有同名且没有其它选择器的标签添加相同的样式，不建议直接使用，可与结构选择器结合使用\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo{\n            color: #2279ee;\n        }\n        div{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div>这是一行字</div>\n    <div>这是一行字</div>\n    <div class=\"demo\">这是一行字</div>\n    <div>这是一行字</div>\n    <div>这是一行字</div>\n    <div>这是一行字</div>\n</body>\n</html>\n```\n\n#### 6.2.3 结构选择器\n\n##### 6.2.3.1 后代选择器\n\n- 后代选择器又称包含选择器，后代选择器可以选择作为某元素后代（嵌套关系）的元素\n- 我们可以定义后代选择器来创建一些规则，使这些规则在某些文档结构中起作用，而在另外一些结构中不起作用。\n- 在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符（combinator）。每个空格结合符可以解释为“... 在 ... 找到”、“... 作为 ... 的一部分”、“... 作为 ... 的后代”，但是要求必须从右向左读选择器。\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .dlOne dd p{\n            color: white;\n            background-color: red;\n        }\n        .dlOne dd a{\n            color: #ff6700;\n        }\n        .dlTwo dd p{\n            color: white;\n            background-color: #ff50ef;\n        }\n        .dlTwo dd a{\n            color: #339fff;\n        }\n    </style>\n</head>\n<body>\n    <dl class=\"dlOne\">\n        <dt>\n            <img src=\"../images/mapImages/1.png\" alt=\"\">\n        </dt>\n        <dd>\n            <p>这是一行字</p>\n            <a href=\"#\">这是另一行字</a>\n        </dd>\n    </dl>\n    <dl class=\"dlTwo\">\n        <dt>\n            <img src=\"../images/mapImages/1.png\" alt=\"\">\n        </dt>\n        <dd>\n            <p>这还是一行字</p>\n            <a href=\"#\">这又是另一行字</a>\n        </dd>\n    </dl>\n</body>\n</html>\n```\n\n##### 6.2.3.2 群组选择器\n\n- 要为不同的HTML元素定义相同的样式时，可以采用群组声明。\n- 上述规则在选择器中指定了多个元素，元素之间用逗号来分隔。逗号告诉浏览器，规则中包含两个不同的选择器。这样的选择器叫群组选择器。\n- 群组选择器可以减少样式的重复定义。可以把任意数量、任意类型的选择器放在群组中进行声明\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .demo,a{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"demo\">Byte科技</div>\n    <a href=\"#\">棒滴很！！！</a>\n</body>\n</html>\n```\n\n##### 6.2.3.3 序号子选择器\n\n-  序号选择器可以指定父元素中顺数或倒数某个子元素的样式\n- nth-child() 顺数\n- nth-last-child() 倒数\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        nav a:nth-child(1){\n            color: red;\n        }\n        nav a:nth-child(2){\n            color: #339fff;\n        }\n        nav a:nth-last-child(1){\n            background-color: #339fff;\n            color: white;\n        }\n        nav a:nth-last-child(2){\n            background-color: #d442ff;\n            color: #fff800;\n        }\n    </style>\n</head>\n<body>\n    <nav>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n        <a href=\"#\">导航</a>\n    </nav>\n</body>\n</html>\n```\n\n#### 6.2.4 通用选择器\n\n- 通用选择器可以选择页面上的所有元素，并对它们应用样式，用 * 来表示。\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div>这是一行字</div>\n    <p>这还是一行字</p>\n    <a href=\"#\">这又是一行字</a>\n</body>\n</html>\n```\n\n#### 6.2.5 伪类选择器\n\n- 伪类用于定义元素的特殊状态，由CSS提供\n- E:hover\n- E:active\n- E:link\n- E:visited\n- E:foucs\n\n示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        a:link{\n            color: #339fff;\n        }\n        a:visited{\n            color: #3bee17;\n        }\n        a:hover{\n            color: red;\n        }\n        a:active{\n            font-size: 25px;\n        }\n        .inputEL:focus{\n            background-color: #339fff;\n        }\n    </style>\n</head>\n<body>\n    <a href=\"#\" class=\"demo\">这是一行字</a>\n\n    <form action=\"\">\n        <input class=\"inputEL\" type=\"text\" required>\n    </form>\n</body>\n</html>\n```","slug":"六-样式表与选择器","published":1,"updated":"2022-07-19T02:31:31.508Z","_id":"cl5hmbtm100152cuj11xiasgx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(六)样式表与选择器</p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"6-1-样式表\"><a href=\"#6-1-样式表\" class=\"headerlink\" title=\"6.1 样式表\"></a>6.1 样式表</h2><p>css 是 web 标准中的表现标准，专门用来对网页标签进行布局和设置样式的一门语言，目前使用css3，css 又名层叠样式表.</p>\n<p>样式表表示CSS代码的位置，目前CSS样式表分以下三类：</p>\n<h4 id=\"6-1-1-内联样式表\"><a href=\"#6-1-1-内联样式表\" class=\"headerlink\" title=\"6.1.1 内联样式表\"></a>6.1.1 内联样式表</h4><ul>\n<li>顾名思义内联样式写在标签中（在开始标签中添加style=””属性，在双引号中添加样式属性，属性和属性之间用分号隔开）</li>\n<li>格式</li>\n</ul>\n<p>&lt;开始标签 style=”样式属性:属性值;样式属性:属性值;………”&gt;标签内容&lt;/结束标签&gt;</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;body&gt;\n    &lt;div style=&quot;color: red&quot;&gt;内联样式&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"6-1-2-内部样式表\"><a href=\"#6-1-2-内部样式表\" class=\"headerlink\" title=\"6.1.2 内部样式表\"></a>6.1.2 内部样式表</h4><ul>\n<li>写在html内部的样式（在html的头文件中嵌套&lt;style&gt;标签，在style标签中通过特有格式添加基本样式）</li>\n<li>格式</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;内联样式&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-1-3-外部样式表\"><a href=\"#6-1-3-外部样式表\" class=\"headerlink\" title=\"6.1.3 外部样式表\"></a>6.1.3 外部样式表</h4><ul>\n<li>外部样式表就是在html文件外创建一个后缀为.css的文件，然后html标签中使用link标签将外部.css文件引入到html文件中去使用</li>\n<li>格式</li>\n</ul>\n<p>&lt;link rel=”stylesheet” href=”外部文件路径” type=”text/css” /&gt;</p>\n<ul>\n<li>创建外部样式表文件</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630480612231-e15e1d65-ac38-4c0a-84d2-9f8c78dc8991.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;styleCss.css&quot; type=&quot;text/css&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;内联样式&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n.demo&#123;\n    color: red;\n&#125;\n</code></pre>\n<p>注：当三种样式表出现冲突时，三种样式表的优先级为  <strong>内联样式表&gt;内部样式表&gt;外部样式表</strong></p>\n<h2 id=\"6-2-选择器\"><a href=\"#6-2-选择器\" class=\"headerlink\" title=\"6.2 选择器\"></a>6.2 选择器</h2><p>选择器是CSS 中一个重要的内容。使用它可以大幅度提高开发人员书写或修改样式表时的工作效率。</p>\n<h4 id=\"6-2-1-属性选择器\"><a href=\"#6-2-1-属性选择器\" class=\"headerlink\" title=\"6.2.1 属性选择器\"></a>6.2.1 属性选择器</h4><p>在HTML中，通过各种各样的属性，我们可以给元素增加很多附加信息。例如，通过width属性，我们可以指定div元素的宽度，通过id属性，我们可以将不同的div元素进行区分，并且通过JavaScript来控制这个div元素的内容和状态。</p>\n<h5 id=\"6-2-1-1-类选择器-class选择器\"><a href=\"#6-2-1-1-类选择器-class选择器\" class=\"headerlink\" title=\"6.2.1.1 类选择器(class选择器)\"></a>6.2.1.1 类选择器(class选择器)</h5><ul>\n<li>在开始标签中添加class=””属性，并命名，在样式表中使用“.选择器名称{……}”可为该元素添加想要添加的样式属性</li>\n<li>当然样式表中的样式与标签中的class=”选择名称”，可以理解为是标签引用了选择器中的样式，一个标签中可以引用多个类选择器样式，名称和名称之间用空格隔开</li>\n<li>格式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>样式表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;开始标签 class=”ClassName”&gt;元素内容&lt;/结束标签&gt;</td>\n<td>.ClassName{  样式属性:属性值;  样式属性:属性值;  ……}</td>\n</tr>\n<tr>\n<td>&lt;开始标签 class=”ClassName ClassNameTest”&gt;元素内容&lt;/结束标签&gt;</td>\n<td>.ClassName{  样式属性:属性值;  样式属性:属性值;  ……}.ClassNameTest{  样式属性:属性值;  样式属性:属性值;  ……}</td>\n</tr>\n</tbody></table>\n<p>类选择器样式是可以重复使用的，也就是说一个样式可以由多个元素共同使用，这样可以提供代码的复用性，但是需要注意在做网页结构布局的时候对于结构不要过多的复用代码，保不准后期需要更改结构模块，复用的代码可以是一些不更改结构的样式，如文字，颜色，等</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 100px;\n        &#125;\n        .color1&#123;\n            background-color: red;\n        &#125;\n        .color2&#123;\n            background-color: #3bee17;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo color1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;demo color2&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h5 id=\"6-2-1-2-id选择器\"><a href=\"#6-2-1-2-id选择器\" class=\"headerlink\" title=\"6.2.1.2 id选择器\"></a>6.2.1.2 id选择器</h5><ul>\n<li>在开始标签中添加id=””属性，并命名，在样式表中使用“#选择器名称{……}”可为该元素添加想要添加的样式属性</li>\n<li>需要注意的是id选择器是唯一的，不可复用的，它是一个元素的唯一标识</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>样式表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;开始标签 id=”ClassName”&gt;元素内容&lt;/结束标签&gt;</td>\n<td>#ClassName{  样式属性:属性值;  样式属性:属性值;  ……}</td>\n</tr>\n</tbody></table>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        #myElement&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;myElement&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h5 id=\"6-2-1-3-通配选择器\"><a href=\"#6-2-1-3-通配选择器\" class=\"headerlink\" title=\"6.2.1.3 通配选择器\"></a>6.2.1.3 通配选择器</h5><ul>\n<li>[att*=val]选择器</li>\n</ul>\n<p>[att*=val]属性选择器的含义是:如果元素用att表示的属性之属性值中包含用val指定的字符的话，则该元素使用这个样式。</p>\n<ul>\n<li>[att^=val]选择器</li>\n</ul>\n<p>[att^=val]属性选择器的含义是:如果元素用att表示的属性之属性值的开头字符为用val指定的字符的话，则该元素使用这个样式。</p>\n<ul>\n<li>[att$=val]选择器</li>\n</ul>\n<p>[att$=val]属性选择器的含义是:如果元素用att表示的属性之属性值的结尾字符为用val指定的字符的话，则该元素使用这个样式。</p>\n<p>注：使用该属性时必须在指定匹配字符前加上“\\”转义符，不能是纯数字</p>\n<p>示例1</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n      /*只要包含e字符，全部添加一下样式*/\n        [class*=e]&#123;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;Element&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element2&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo1&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element3&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo2&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element4&quot;&gt;这是元素&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>示例2</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        /*只要d开头，就添加以下样式*/\n        [class^=d]&#123;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;Element&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element2&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo1&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element3&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo2&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element4&quot;&gt;这是元素&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>示例3</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        /*只要-2结尾，就添加以下样式*/\n        [class$=\\-2]&#123;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;Element&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element-2&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo-1&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element-3&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo-2&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element-4&quot;&gt;这是元素&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-2-2-标签选择器\"><a href=\"#6-2-2-标签选择器\" class=\"headerlink\" title=\"6.2.2 标签选择器\"></a>6.2.2 标签选择器</h4><ul>\n<li>标签选择顾名思义就是直接使用标签名在样式表中去给标签添加样式</li>\n<li>注：标签选择器会给所有同名且没有其它选择器的标签添加相同的样式，不建议直接使用，可与结构选择器结合使用</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            color: #2279ee;\n        &#125;\n        div&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;div class=&quot;demo&quot;&gt;这是一行字&lt;/div&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-2-3-结构选择器\"><a href=\"#6-2-3-结构选择器\" class=\"headerlink\" title=\"6.2.3 结构选择器\"></a>6.2.3 结构选择器</h4><h5 id=\"6-2-3-1-后代选择器\"><a href=\"#6-2-3-1-后代选择器\" class=\"headerlink\" title=\"6.2.3.1 后代选择器\"></a>6.2.3.1 后代选择器</h5><ul>\n<li>后代选择器又称包含选择器，后代选择器可以选择作为某元素后代（嵌套关系）的元素</li>\n<li>我们可以定义后代选择器来创建一些规则，使这些规则在某些文档结构中起作用，而在另外一些结构中不起作用。</li>\n<li>在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符（combinator）。每个空格结合符可以解释为“… 在 … 找到”、“… 作为 … 的一部分”、“… 作为 … 的后代”，但是要求必须从右向左读选择器。</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .dlOne dd p&#123;\n            color: white;\n            background-color: red;\n        &#125;\n        .dlOne dd a&#123;\n            color: #ff6700;\n        &#125;\n        .dlTwo dd p&#123;\n            color: white;\n            background-color: #ff50ef;\n        &#125;\n        .dlTwo dd a&#123;\n            color: #339fff;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;dl class=&quot;dlOne&quot;&gt;\n        &lt;dt&gt;\n            &lt;img src=&quot;../images/mapImages/1.png&quot; alt=&quot;&quot;&gt;\n        &lt;/dt&gt;\n        &lt;dd&gt;\n            &lt;p&gt;这是一行字&lt;/p&gt;\n            &lt;a href=&quot;#&quot;&gt;这是另一行字&lt;/a&gt;\n        &lt;/dd&gt;\n    &lt;/dl&gt;\n    &lt;dl class=&quot;dlTwo&quot;&gt;\n        &lt;dt&gt;\n            &lt;img src=&quot;../images/mapImages/1.png&quot; alt=&quot;&quot;&gt;\n        &lt;/dt&gt;\n        &lt;dd&gt;\n            &lt;p&gt;这还是一行字&lt;/p&gt;\n            &lt;a href=&quot;#&quot;&gt;这又是另一行字&lt;/a&gt;\n        &lt;/dd&gt;\n    &lt;/dl&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h5 id=\"6-2-3-2-群组选择器\"><a href=\"#6-2-3-2-群组选择器\" class=\"headerlink\" title=\"6.2.3.2 群组选择器\"></a>6.2.3.2 群组选择器</h5><ul>\n<li>要为不同的HTML元素定义相同的样式时，可以采用群组声明。</li>\n<li>上述规则在选择器中指定了多个元素，元素之间用逗号来分隔。逗号告诉浏览器，规则中包含两个不同的选择器。这样的选择器叫群组选择器。</li>\n<li>群组选择器可以减少样式的重复定义。可以把任意数量、任意类型的选择器放在群组中进行声明</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo,a&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;Byte科技&lt;/div&gt;\n    &lt;a href=&quot;#&quot;&gt;棒滴很！！！&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h5 id=\"6-2-3-3-序号子选择器\"><a href=\"#6-2-3-3-序号子选择器\" class=\"headerlink\" title=\"6.2.3.3 序号子选择器\"></a>6.2.3.3 序号子选择器</h5><ul>\n<li> 序号选择器可以指定父元素中顺数或倒数某个子元素的样式</li>\n<li>nth-child() 顺数</li>\n<li>nth-last-child() 倒数</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        nav a:nth-child(1)&#123;\n            color: red;\n        &#125;\n        nav a:nth-child(2)&#123;\n            color: #339fff;\n        &#125;\n        nav a:nth-last-child(1)&#123;\n            background-color: #339fff;\n            color: white;\n        &#125;\n        nav a:nth-last-child(2)&#123;\n            background-color: #d442ff;\n            color: #fff800;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;nav&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n    &lt;/nav&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-2-4-通用选择器\"><a href=\"#6-2-4-通用选择器\" class=\"headerlink\" title=\"6.2.4 通用选择器\"></a>6.2.4 通用选择器</h4><ul>\n<li>通用选择器可以选择页面上的所有元素，并对它们应用样式，用 * 来表示。</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;p&gt;这还是一行字&lt;/p&gt;\n    &lt;a href=&quot;#&quot;&gt;这又是一行字&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-2-5-伪类选择器\"><a href=\"#6-2-5-伪类选择器\" class=\"headerlink\" title=\"6.2.5 伪类选择器\"></a>6.2.5 伪类选择器</h4><ul>\n<li>伪类用于定义元素的特殊状态，由CSS提供</li>\n<li>E:hover</li>\n<li>E:active</li>\n<li>E:link</li>\n<li>E:visited</li>\n<li>E:foucs</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        a:link&#123;\n            color: #339fff;\n        &#125;\n        a:visited&#123;\n            color: #3bee17;\n        &#125;\n        a:hover&#123;\n            color: red;\n        &#125;\n        a:active&#123;\n            font-size: 25px;\n        &#125;\n        .inputEL:focus&#123;\n            background-color: #339fff;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;a href=&quot;#&quot; class=&quot;demo&quot;&gt;这是一行字&lt;/a&gt;\n\n    &lt;form action=&quot;&quot;&gt;\n        &lt;input class=&quot;inputEL&quot; type=&quot;text&quot; required&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>(六)样式表与选择器</p>","more":"<h2 id=\"6-1-样式表\"><a href=\"#6-1-样式表\" class=\"headerlink\" title=\"6.1 样式表\"></a>6.1 样式表</h2><p>css 是 web 标准中的表现标准，专门用来对网页标签进行布局和设置样式的一门语言，目前使用css3，css 又名层叠样式表.</p>\n<p>样式表表示CSS代码的位置，目前CSS样式表分以下三类：</p>\n<h4 id=\"6-1-1-内联样式表\"><a href=\"#6-1-1-内联样式表\" class=\"headerlink\" title=\"6.1.1 内联样式表\"></a>6.1.1 内联样式表</h4><ul>\n<li>顾名思义内联样式写在标签中（在开始标签中添加style=””属性，在双引号中添加样式属性，属性和属性之间用分号隔开）</li>\n<li>格式</li>\n</ul>\n<p>&lt;开始标签 style=”样式属性:属性值;样式属性:属性值;………”&gt;标签内容&lt;/结束标签&gt;</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;body&gt;\n    &lt;div style=&quot;color: red&quot;&gt;内联样式&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h4 id=\"6-1-2-内部样式表\"><a href=\"#6-1-2-内部样式表\" class=\"headerlink\" title=\"6.1.2 内部样式表\"></a>6.1.2 内部样式表</h4><ul>\n<li>写在html内部的样式（在html的头文件中嵌套&lt;style&gt;标签，在style标签中通过特有格式添加基本样式）</li>\n<li>格式</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;内联样式&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-1-3-外部样式表\"><a href=\"#6-1-3-外部样式表\" class=\"headerlink\" title=\"6.1.3 外部样式表\"></a>6.1.3 外部样式表</h4><ul>\n<li>外部样式表就是在html文件外创建一个后缀为.css的文件，然后html标签中使用link标签将外部.css文件引入到html文件中去使用</li>\n<li>格式</li>\n</ul>\n<p>&lt;link rel=”stylesheet” href=”外部文件路径” type=”text/css” /&gt;</p>\n<ul>\n<li>创建外部样式表文件</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630480612231-e15e1d65-ac38-4c0a-84d2-9f8c78dc8991.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;styleCss.css&quot; type=&quot;text/css&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;内联样式&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n.demo&#123;\n    color: red;\n&#125;\n</code></pre>\n<p>注：当三种样式表出现冲突时，三种样式表的优先级为  <strong>内联样式表&gt;内部样式表&gt;外部样式表</strong></p>\n<h2 id=\"6-2-选择器\"><a href=\"#6-2-选择器\" class=\"headerlink\" title=\"6.2 选择器\"></a>6.2 选择器</h2><p>选择器是CSS 中一个重要的内容。使用它可以大幅度提高开发人员书写或修改样式表时的工作效率。</p>\n<h4 id=\"6-2-1-属性选择器\"><a href=\"#6-2-1-属性选择器\" class=\"headerlink\" title=\"6.2.1 属性选择器\"></a>6.2.1 属性选择器</h4><p>在HTML中，通过各种各样的属性，我们可以给元素增加很多附加信息。例如，通过width属性，我们可以指定div元素的宽度，通过id属性，我们可以将不同的div元素进行区分，并且通过JavaScript来控制这个div元素的内容和状态。</p>\n<h5 id=\"6-2-1-1-类选择器-class选择器\"><a href=\"#6-2-1-1-类选择器-class选择器\" class=\"headerlink\" title=\"6.2.1.1 类选择器(class选择器)\"></a>6.2.1.1 类选择器(class选择器)</h5><ul>\n<li>在开始标签中添加class=””属性，并命名，在样式表中使用“.选择器名称{……}”可为该元素添加想要添加的样式属性</li>\n<li>当然样式表中的样式与标签中的class=”选择名称”，可以理解为是标签引用了选择器中的样式，一个标签中可以引用多个类选择器样式，名称和名称之间用空格隔开</li>\n<li>格式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>样式表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;开始标签 class=”ClassName”&gt;元素内容&lt;/结束标签&gt;</td>\n<td>.ClassName{  样式属性:属性值;  样式属性:属性值;  ……}</td>\n</tr>\n<tr>\n<td>&lt;开始标签 class=”ClassName ClassNameTest”&gt;元素内容&lt;/结束标签&gt;</td>\n<td>.ClassName{  样式属性:属性值;  样式属性:属性值;  ……}.ClassNameTest{  样式属性:属性值;  样式属性:属性值;  ……}</td>\n</tr>\n</tbody></table>\n<p>类选择器样式是可以重复使用的，也就是说一个样式可以由多个元素共同使用，这样可以提供代码的复用性，但是需要注意在做网页结构布局的时候对于结构不要过多的复用代码，保不准后期需要更改结构模块，复用的代码可以是一些不更改结构的样式，如文字，颜色，等</p>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            width: 100%;\n            height: 100px;\n        &#125;\n        .color1&#123;\n            background-color: red;\n        &#125;\n        .color2&#123;\n            background-color: #3bee17;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo color1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;demo color2&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h5 id=\"6-2-1-2-id选择器\"><a href=\"#6-2-1-2-id选择器\" class=\"headerlink\" title=\"6.2.1.2 id选择器\"></a>6.2.1.2 id选择器</h5><ul>\n<li>在开始标签中添加id=””属性，并命名，在样式表中使用“#选择器名称{……}”可为该元素添加想要添加的样式属性</li>\n<li>需要注意的是id选择器是唯一的，不可复用的，它是一个元素的唯一标识</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>样式表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;开始标签 id=”ClassName”&gt;元素内容&lt;/结束标签&gt;</td>\n<td>#ClassName{  样式属性:属性值;  样式属性:属性值;  ……}</td>\n</tr>\n</tbody></table>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        #myElement&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=&quot;myElement&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h5 id=\"6-2-1-3-通配选择器\"><a href=\"#6-2-1-3-通配选择器\" class=\"headerlink\" title=\"6.2.1.3 通配选择器\"></a>6.2.1.3 通配选择器</h5><ul>\n<li>[att*=val]选择器</li>\n</ul>\n<p>[att*=val]属性选择器的含义是:如果元素用att表示的属性之属性值中包含用val指定的字符的话，则该元素使用这个样式。</p>\n<ul>\n<li>[att^=val]选择器</li>\n</ul>\n<p>[att^=val]属性选择器的含义是:如果元素用att表示的属性之属性值的开头字符为用val指定的字符的话，则该元素使用这个样式。</p>\n<ul>\n<li>[att$=val]选择器</li>\n</ul>\n<p>[att$=val]属性选择器的含义是:如果元素用att表示的属性之属性值的结尾字符为用val指定的字符的话，则该元素使用这个样式。</p>\n<p>注：使用该属性时必须在指定匹配字符前加上“\\”转义符，不能是纯数字</p>\n<p>示例1</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n      /*只要包含e字符，全部添加一下样式*/\n        [class*=e]&#123;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;Element&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element2&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo1&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element3&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo2&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element4&quot;&gt;这是元素&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>示例2</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        /*只要d开头，就添加以下样式*/\n        [class^=d]&#123;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;Element&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element2&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo1&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element3&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo2&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element4&quot;&gt;这是元素&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>示例3</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        /*只要-2结尾，就添加以下样式*/\n        [class$=\\-2]&#123;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;Element&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element-2&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo-1&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element-3&quot;&gt;这是元素&lt;/div&gt;\n    &lt;div class=&quot;demo-2&quot;&gt;这是文字&lt;/div&gt;\n    &lt;div class=&quot;Element-4&quot;&gt;这是元素&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-2-2-标签选择器\"><a href=\"#6-2-2-标签选择器\" class=\"headerlink\" title=\"6.2.2 标签选择器\"></a>6.2.2 标签选择器</h4><ul>\n<li>标签选择顾名思义就是直接使用标签名在样式表中去给标签添加样式</li>\n<li>注：标签选择器会给所有同名且没有其它选择器的标签添加相同的样式，不建议直接使用，可与结构选择器结合使用</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo&#123;\n            color: #2279ee;\n        &#125;\n        div&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;div class=&quot;demo&quot;&gt;这是一行字&lt;/div&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-2-3-结构选择器\"><a href=\"#6-2-3-结构选择器\" class=\"headerlink\" title=\"6.2.3 结构选择器\"></a>6.2.3 结构选择器</h4><h5 id=\"6-2-3-1-后代选择器\"><a href=\"#6-2-3-1-后代选择器\" class=\"headerlink\" title=\"6.2.3.1 后代选择器\"></a>6.2.3.1 后代选择器</h5><ul>\n<li>后代选择器又称包含选择器，后代选择器可以选择作为某元素后代（嵌套关系）的元素</li>\n<li>我们可以定义后代选择器来创建一些规则，使这些规则在某些文档结构中起作用，而在另外一些结构中不起作用。</li>\n<li>在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符（combinator）。每个空格结合符可以解释为“… 在 … 找到”、“… 作为 … 的一部分”、“… 作为 … 的后代”，但是要求必须从右向左读选择器。</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .dlOne dd p&#123;\n            color: white;\n            background-color: red;\n        &#125;\n        .dlOne dd a&#123;\n            color: #ff6700;\n        &#125;\n        .dlTwo dd p&#123;\n            color: white;\n            background-color: #ff50ef;\n        &#125;\n        .dlTwo dd a&#123;\n            color: #339fff;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;dl class=&quot;dlOne&quot;&gt;\n        &lt;dt&gt;\n            &lt;img src=&quot;../images/mapImages/1.png&quot; alt=&quot;&quot;&gt;\n        &lt;/dt&gt;\n        &lt;dd&gt;\n            &lt;p&gt;这是一行字&lt;/p&gt;\n            &lt;a href=&quot;#&quot;&gt;这是另一行字&lt;/a&gt;\n        &lt;/dd&gt;\n    &lt;/dl&gt;\n    &lt;dl class=&quot;dlTwo&quot;&gt;\n        &lt;dt&gt;\n            &lt;img src=&quot;../images/mapImages/1.png&quot; alt=&quot;&quot;&gt;\n        &lt;/dt&gt;\n        &lt;dd&gt;\n            &lt;p&gt;这还是一行字&lt;/p&gt;\n            &lt;a href=&quot;#&quot;&gt;这又是另一行字&lt;/a&gt;\n        &lt;/dd&gt;\n    &lt;/dl&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h5 id=\"6-2-3-2-群组选择器\"><a href=\"#6-2-3-2-群组选择器\" class=\"headerlink\" title=\"6.2.3.2 群组选择器\"></a>6.2.3.2 群组选择器</h5><ul>\n<li>要为不同的HTML元素定义相同的样式时，可以采用群组声明。</li>\n<li>上述规则在选择器中指定了多个元素，元素之间用逗号来分隔。逗号告诉浏览器，规则中包含两个不同的选择器。这样的选择器叫群组选择器。</li>\n<li>群组选择器可以减少样式的重复定义。可以把任意数量、任意类型的选择器放在群组中进行声明</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .demo,a&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;demo&quot;&gt;Byte科技&lt;/div&gt;\n    &lt;a href=&quot;#&quot;&gt;棒滴很！！！&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h5 id=\"6-2-3-3-序号子选择器\"><a href=\"#6-2-3-3-序号子选择器\" class=\"headerlink\" title=\"6.2.3.3 序号子选择器\"></a>6.2.3.3 序号子选择器</h5><ul>\n<li> 序号选择器可以指定父元素中顺数或倒数某个子元素的样式</li>\n<li>nth-child() 顺数</li>\n<li>nth-last-child() 倒数</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        nav a:nth-child(1)&#123;\n            color: red;\n        &#125;\n        nav a:nth-child(2)&#123;\n            color: #339fff;\n        &#125;\n        nav a:nth-last-child(1)&#123;\n            background-color: #339fff;\n            color: white;\n        &#125;\n        nav a:nth-last-child(2)&#123;\n            background-color: #d442ff;\n            color: #fff800;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;nav&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;\n    &lt;/nav&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-2-4-通用选择器\"><a href=\"#6-2-4-通用选择器\" class=\"headerlink\" title=\"6.2.4 通用选择器\"></a>6.2.4 通用选择器</h4><ul>\n<li>通用选择器可以选择页面上的所有元素，并对它们应用样式，用 * 来表示。</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;这是一行字&lt;/div&gt;\n    &lt;p&gt;这还是一行字&lt;/p&gt;\n    &lt;a href=&quot;#&quot;&gt;这又是一行字&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6-2-5-伪类选择器\"><a href=\"#6-2-5-伪类选择器\" class=\"headerlink\" title=\"6.2.5 伪类选择器\"></a>6.2.5 伪类选择器</h4><ul>\n<li>伪类用于定义元素的特殊状态，由CSS提供</li>\n<li>E:hover</li>\n<li>E:active</li>\n<li>E:link</li>\n<li>E:visited</li>\n<li>E:foucs</li>\n</ul>\n<p>示例</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        a:link&#123;\n            color: #339fff;\n        &#125;\n        a:visited&#123;\n            color: #3bee17;\n        &#125;\n        a:hover&#123;\n            color: red;\n        &#125;\n        a:active&#123;\n            font-size: 25px;\n        &#125;\n        .inputEL:focus&#123;\n            background-color: #339fff;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;a href=&quot;#&quot; class=&quot;demo&quot;&gt;这是一行字&lt;/a&gt;\n\n    &lt;form action=&quot;&quot;&gt;\n        &lt;input class=&quot;inputEL&quot; type=&quot;text&quot; required&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"title":"(八)布局","date":"2022-07-08T11:43:48.000Z","cover":"https://tse2-mm.cn.bing.net/th/id/OIP-C.cEQaDzSxip9KGghkMPS9PgHaEH?pid=ImgDet&rs=1","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":" (八)布局\n <!--more-->\n## 8.1 布局\n\n布局是为了对整个网页进行排版，把网站内容安排在多个列中，用以丰富网页背景，色彩，内容等网页外观，就跟房子装修一样，我们需要把我们的房子装修漂漂亮亮的而且功能实用，总不能把床放在卫生间，把马桶放在燃气灶旁边吧\n\n我么在制作前期需要对UI设计师提供的设计图片进行布局分析，明确那个模块在什么位置，我们需要通过布局将模块创建出来，放在它该有的位置上，然后对模块进行内容填充\n\n## 8.2 入门布局--圣杯布局\n\n- 入门图\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630552648013-f7370ed0-1b2e-4490-8032-f72bab65f024.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_48%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例代码\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin: 0 auto;\n        }\n        .top{\n            width: 100%;\n            height: 80px;\n            margin-bottom: 10px;\n        }\n        .middle{\n            width: 100%;\n            height: 500px;\n            margin-bottom: 10px;\n        }\n        .middle div{\n            float: left;\n        }\n        .middle div:nth-child(1),.middle div:nth-last-child(1){\n            width: 30%;\n            height: 100%;\n            background-color: #339fff;\n        }\n        .middle div:nth-child(2){\n            width: 40%;\n            height: 100%;\n            background-color: #2279ee;\n        }\n        .bottom{\n            width: 100%;\n            height: 80px;\n        }\n        .color1{\n            background-color: #339fff;\n        }\n\n    </style>\n</head>\n<body>\n    <!--顶部-->\n    <div class=\"top color1\"></div>\n    <!--中部-->\n    <div class=\"middle\">\n        <!--左-->\n        <div></div>\n        <!--中-->\n        <div></div>\n        <!--右-->\n        <div></div>\n    </div>\n    <!--底部-->\n    <div class=\"bottom color1\"></div>\n</body>\n</html>\n```\n\n## 8.3 弹性布局\n\n#### 8.3.1 传统布局与弹性布局\n\n1. 传统布局方法遵循文档流的模式，依赖浮动，相较于一些特殊布局，不容易实现（如：垂直居中效果）\n2. 弹性布局诞生于2009年，弹性布局也称之为flex布局\n3. 弹性布局可以完整的响应式的实现各种页面布局\n\n#### 8.3.2 在使用弹性布局时需要知道的两个概念\n\n1. 容器：需要添加弹性布局的父元素\n2. 项目：弹性布局容器中的每一个子元素称之为项目\n\n#### 8.3.3 在使用弹性布局时需要了解的两个基本方向\n\n1. 主轴：在弹性布局中，需要通过样式属性去规定水平/垂直方向为主轴\n2. 交叉轴：与主轴垂直的另一个方向称之为交叉轴\n\n#### 8.3.4 弹性布局的使用步骤\n\n1. 给父元素添加display:flex/inline-flex来规定该容器为弹性布局显示，而不遵循常规的文档流模式\n2. 添加弹性布局的相关属性样式\n3. 注：当元素采用了弹性布局后，子元素的浮动会失效\n4. 入门\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            background-color: aqua;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\n配合display:flex使用的12个属性（6个容器属性，6个项目属性）\n\n#### 6个容器属性\n\n1. 1. flex-direction  改属性决定主轴的方向（表示在容器中项目的排列方向）\n\n| 属性值         | 方向                                         |\n| -------------- | -------------------------------------------- |\n| row   默认值   | 主轴为水平方向，从父容器的左部开始渲染显示   |\n| row-reverse    | 主轴为水平方向，从父容器的右部开始渲染显示   |\n| column         | 主轴为垂直方向，从父容器的左上部开始渲染显示 |\n| column-reverse | 主轴为垂直方向，从父容器的左下部开始渲染显示 |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            background-color: aqua;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\nb. flex-wrap   项目的排列方式（默认情况下，所有项目都排列在一条轴线上）\n\n| 属性值       | 作用                                                         |\n| ------------ | ------------------------------------------------------------ |\n| nowrap       | 不换行，当容器的宽度不够时，容器中的每个项目将会被挤压       |\n| wrap         | 换行，按项目的实际宽度执行排列，当容器宽度不够时自动换行，并且第一行在容器的最上方 |\n| wrap-reverse | 换行，第一行在容器的最下方                                   |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\nc.  flex-flow:flex-direction  flex-wrap\n\n默认值为  flex-flow:row  wrap\n\nd.  justify-content   定义了项目在主轴方向的对齐方式\n\n| 属性          | 作用                                                         |\n| ------------- | ------------------------------------------------------------ |\n| flex-start    | 项目位于主轴的起点                                           |\n| flex-end      | 项目位于主轴的终点                                           |\n| center        | 居中对齐                                                     |\n| space-between | 两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边没有间隔 |\n| space-around  | 两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边有一定的间隔 |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\ne.  align-items  交叉轴对齐方式\n\n| 属性       | 作用                                                         |\n| ---------- | ------------------------------------------------------------ |\n| flex-start | 交叉轴起点对齐                                               |\n| flex-end   | 交叉轴终点对齐                                               |\n| center     | 居中对齐                                                     |\n| baseline   | 以项目的第一行文字为基线对齐，文字的行高，字体大小会直接影响后边的项目对齐 |\n| stretch    | 如果项目没有设置高度，则添加该属性后项目会占满整个容器       |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: center;\n            /*align-items: flex-end;*/\n            /*align-items: stretch;*/\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: stretch;\n        }\n        .box div{\n            width: 20%;\n            /*没有高度*/\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: baseline;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n        .big{\n            font-size: 30px;\n            line-height: 50px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"big\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\nf.  align-content 定义多根轴线的对齐方式，如果定义一根轴线则该属性不生效（不推荐出现多根轴线）\n\n| 属性          | 作用                                                         |\n| ------------- | ------------------------------------------------------------ |\n| flex-start    | 与交叉轴的起点对齐                                           |\n| flex-end      | 与交叉轴的终点对齐                                           |\n| center        | 与交叉轴的中点对齐                                           |\n| space-between | 与交叉轴的两端对齐，轴线之间的间隔平均分布，开头和结束项目与容器没间隔 |\n| space-around  | 与交叉轴的两端对齐，轴线之间的间隔都相等                     |\n| stretch       | 轴线占满整个交叉轴                                           |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .big{\n            font-size: 30px;\n            line-height: 50px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"big\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div>7</div>\n        <div>8</div>\n        <div>9</div>\n        <div>10</div>\n    </div>\n</body>\n</html>\n```\n\n#### 6个项目属性\n\n1. 1. order 定义项目排列的顺序，数值越小，排列越靠前，默认值为0，当添加了大于0的值后，该项目则不遵循文档流的排列方式\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .big{\n            font-size: 30px;\n            line-height: 50px;\n        }\n        .orderStyle{\n            order: 5;\n        }\n        .orderStyle1{\n            order: 7;\n        }\n        .orderStyle2{\n            order: 6;\n        }\n        .orderStyle3{\n            order: 4;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"big orderStyle\">1</div>\n        <div>2</div>\n        <div class=\"orderStyle1\">3</div>\n        <div>4</div>\n        <div class=\"orderStyle2\">5</div>\n        <div>6</div>\n        <div>7</div>\n        <div class=\"orderStyle3\">8</div>\n        <div>9</div>\n        <div>10</div>\n    </div>\n</body>\n</html>\n```\n\nb. flex-grow 用来定义项目的放大比例，默认为0，在为0的情况下，即使容器还有空间，项目也不会放大，当值大于零时容器还有空间余量的话则添加了该属性的项目会放大\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .big{\n            font-size: 30px;\n            line-height: 50px;\n        }\n        .orderStyle{\n            order: 5;\n            flex-grow: 2;\n        }\n        .orderStyle1{\n            order: 7;\n            flex-grow: 2;\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"big orderStyle\">1</div>\n        <div>2</div>\n        <div class=\"orderStyle1\">3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\nc. flex-shrink  定义项目是否可压缩，默认值为1，若空间不够，该项目将被缩小，如果其中某一个项目的值被设置为0，则它的空间不会被压缩\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .fs{\n            flex-shrink: 0;\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"fs\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div>7</div>\n        <div>8</div>\n        <div>9</div>\n        <div>10</div>\n        <div>11</div>\n        <div>12</div>\n    </div>\n</body>\n</html>\n```\n\nd. flex-basis  定义了项目占据主轴的空间（设置项目的宽度，当项目添加了该属性后，width会失效）\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .fs{\n            flex-shrink: 0;\n            flex-basis: 50%;\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"fs\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div>7</div>\n        <div>8</div>\n        <div>9</div>\n        <div>10</div>\n        <div>11</div>\n        <div>12</div>\n    </div>\n</body>\n</html>\n```\n\ne. align-self  设置某个项目在交叉轴上的对齐方式，其参数和align-items一致，当某个项目添加了该属性后，则会覆盖父容器上的align-itmes属性，其默认值为auto（表示继承父容器的align-itmes值）\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            align-items: center;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .fs{\n            flex-shrink: 0;\n            flex-basis: 50%;\n            align-self: flex-end;\n        }\n        .as{\n            align-self: flex-start;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"fs\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div class=\"as\">7</div>\n        <div>8</div>\n        <div>9</div>\n        <div>10</div>\n        <div>11</div>\n        <div>12</div>\n    </div>\n</body>\n</html>\n```\n\nf. flex属性，该属性相当于flex-grow，flex-shrink，flex-basis的简写，默认值0,1 auto","source":"_posts/八-布局.md","raw":"---\ntitle: (八)布局\ndate: 2022-07-08 19:43:48\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://tse2-mm.cn.bing.net/th/id/OIP-C.cEQaDzSxip9KGghkMPS9PgHaEH?pid=ImgDet&rs=1\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\n (八)布局\n <!--more-->\n## 8.1 布局\n\n布局是为了对整个网页进行排版，把网站内容安排在多个列中，用以丰富网页背景，色彩，内容等网页外观，就跟房子装修一样，我们需要把我们的房子装修漂漂亮亮的而且功能实用，总不能把床放在卫生间，把马桶放在燃气灶旁边吧\n\n我么在制作前期需要对UI设计师提供的设计图片进行布局分析，明确那个模块在什么位置，我们需要通过布局将模块创建出来，放在它该有的位置上，然后对模块进行内容填充\n\n## 8.2 入门布局--圣杯布局\n\n- 入门图\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630552648013-f7370ed0-1b2e-4490-8032-f72bab65f024.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_48%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n示例代码\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        *{\n            margin: 0 auto;\n        }\n        .top{\n            width: 100%;\n            height: 80px;\n            margin-bottom: 10px;\n        }\n        .middle{\n            width: 100%;\n            height: 500px;\n            margin-bottom: 10px;\n        }\n        .middle div{\n            float: left;\n        }\n        .middle div:nth-child(1),.middle div:nth-last-child(1){\n            width: 30%;\n            height: 100%;\n            background-color: #339fff;\n        }\n        .middle div:nth-child(2){\n            width: 40%;\n            height: 100%;\n            background-color: #2279ee;\n        }\n        .bottom{\n            width: 100%;\n            height: 80px;\n        }\n        .color1{\n            background-color: #339fff;\n        }\n\n    </style>\n</head>\n<body>\n    <!--顶部-->\n    <div class=\"top color1\"></div>\n    <!--中部-->\n    <div class=\"middle\">\n        <!--左-->\n        <div></div>\n        <!--中-->\n        <div></div>\n        <!--右-->\n        <div></div>\n    </div>\n    <!--底部-->\n    <div class=\"bottom color1\"></div>\n</body>\n</html>\n```\n\n## 8.3 弹性布局\n\n#### 8.3.1 传统布局与弹性布局\n\n1. 传统布局方法遵循文档流的模式，依赖浮动，相较于一些特殊布局，不容易实现（如：垂直居中效果）\n2. 弹性布局诞生于2009年，弹性布局也称之为flex布局\n3. 弹性布局可以完整的响应式的实现各种页面布局\n\n#### 8.3.2 在使用弹性布局时需要知道的两个概念\n\n1. 容器：需要添加弹性布局的父元素\n2. 项目：弹性布局容器中的每一个子元素称之为项目\n\n#### 8.3.3 在使用弹性布局时需要了解的两个基本方向\n\n1. 主轴：在弹性布局中，需要通过样式属性去规定水平/垂直方向为主轴\n2. 交叉轴：与主轴垂直的另一个方向称之为交叉轴\n\n#### 8.3.4 弹性布局的使用步骤\n\n1. 给父元素添加display:flex/inline-flex来规定该容器为弹性布局显示，而不遵循常规的文档流模式\n2. 添加弹性布局的相关属性样式\n3. 注：当元素采用了弹性布局后，子元素的浮动会失效\n4. 入门\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            background-color: aqua;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\n配合display:flex使用的12个属性（6个容器属性，6个项目属性）\n\n#### 6个容器属性\n\n1. 1. flex-direction  改属性决定主轴的方向（表示在容器中项目的排列方向）\n\n| 属性值         | 方向                                         |\n| -------------- | -------------------------------------------- |\n| row   默认值   | 主轴为水平方向，从父容器的左部开始渲染显示   |\n| row-reverse    | 主轴为水平方向，从父容器的右部开始渲染显示   |\n| column         | 主轴为垂直方向，从父容器的左上部开始渲染显示 |\n| column-reverse | 主轴为垂直方向，从父容器的左下部开始渲染显示 |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            background-color: aqua;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\nb. flex-wrap   项目的排列方式（默认情况下，所有项目都排列在一条轴线上）\n\n| 属性值       | 作用                                                         |\n| ------------ | ------------------------------------------------------------ |\n| nowrap       | 不换行，当容器的宽度不够时，容器中的每个项目将会被挤压       |\n| wrap         | 换行，按项目的实际宽度执行排列，当容器宽度不够时自动换行，并且第一行在容器的最上方 |\n| wrap-reverse | 换行，第一行在容器的最下方                                   |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\nc.  flex-flow:flex-direction  flex-wrap\n\n默认值为  flex-flow:row  wrap\n\nd.  justify-content   定义了项目在主轴方向的对齐方式\n\n| 属性          | 作用                                                         |\n| ------------- | ------------------------------------------------------------ |\n| flex-start    | 项目位于主轴的起点                                           |\n| flex-end      | 项目位于主轴的终点                                           |\n| center        | 居中对齐                                                     |\n| space-between | 两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边没有间隔 |\n| space-around  | 两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边有一定的间隔 |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\ne.  align-items  交叉轴对齐方式\n\n| 属性       | 作用                                                         |\n| ---------- | ------------------------------------------------------------ |\n| flex-start | 交叉轴起点对齐                                               |\n| flex-end   | 交叉轴终点对齐                                               |\n| center     | 居中对齐                                                     |\n| baseline   | 以项目的第一行文字为基线对齐，文字的行高，字体大小会直接影响后边的项目对齐 |\n| stretch    | 如果项目没有设置高度，则添加该属性后项目会占满整个容器       |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: center;\n            /*align-items: flex-end;*/\n            /*align-items: stretch;*/\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: stretch;\n        }\n        .box div{\n            width: 20%;\n            /*没有高度*/\n            background-color: red;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div>1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: baseline;\n        }\n        .box div{\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        }\n        .big{\n            font-size: 30px;\n            line-height: 50px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"big\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\nf.  align-content 定义多根轴线的对齐方式，如果定义一根轴线则该属性不生效（不推荐出现多根轴线）\n\n| 属性          | 作用                                                         |\n| ------------- | ------------------------------------------------------------ |\n| flex-start    | 与交叉轴的起点对齐                                           |\n| flex-end      | 与交叉轴的终点对齐                                           |\n| center        | 与交叉轴的中点对齐                                           |\n| space-between | 与交叉轴的两端对齐，轴线之间的间隔平均分布，开头和结束项目与容器没间隔 |\n| space-around  | 与交叉轴的两端对齐，轴线之间的间隔都相等                     |\n| stretch       | 轴线占满整个交叉轴                                           |\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .big{\n            font-size: 30px;\n            line-height: 50px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"big\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div>7</div>\n        <div>8</div>\n        <div>9</div>\n        <div>10</div>\n    </div>\n</body>\n</html>\n```\n\n#### 6个项目属性\n\n1. 1. order 定义项目排列的顺序，数值越小，排列越靠前，默认值为0，当添加了大于0的值后，该项目则不遵循文档流的排列方式\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .big{\n            font-size: 30px;\n            line-height: 50px;\n        }\n        .orderStyle{\n            order: 5;\n        }\n        .orderStyle1{\n            order: 7;\n        }\n        .orderStyle2{\n            order: 6;\n        }\n        .orderStyle3{\n            order: 4;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"big orderStyle\">1</div>\n        <div>2</div>\n        <div class=\"orderStyle1\">3</div>\n        <div>4</div>\n        <div class=\"orderStyle2\">5</div>\n        <div>6</div>\n        <div>7</div>\n        <div class=\"orderStyle3\">8</div>\n        <div>9</div>\n        <div>10</div>\n    </div>\n</body>\n</html>\n```\n\nb. flex-grow 用来定义项目的放大比例，默认为0，在为0的情况下，即使容器还有空间，项目也不会放大，当值大于零时容器还有空间余量的话则添加了该属性的项目会放大\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .big{\n            font-size: 30px;\n            line-height: 50px;\n        }\n        .orderStyle{\n            order: 5;\n            flex-grow: 2;\n        }\n        .orderStyle1{\n            order: 7;\n            flex-grow: 2;\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"big orderStyle\">1</div>\n        <div>2</div>\n        <div class=\"orderStyle1\">3</div>\n        <div>4</div>\n    </div>\n</body>\n</html>\n```\n\nc. flex-shrink  定义项目是否可压缩，默认值为1，若空间不够，该项目将被缩小，如果其中某一个项目的值被设置为0，则它的空间不会被压缩\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .fs{\n            flex-shrink: 0;\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"fs\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div>7</div>\n        <div>8</div>\n        <div>9</div>\n        <div>10</div>\n        <div>11</div>\n        <div>12</div>\n    </div>\n</body>\n</html>\n```\n\nd. flex-basis  定义了项目占据主轴的空间（设置项目的宽度，当项目添加了该属性后，width会失效）\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .fs{\n            flex-shrink: 0;\n            flex-basis: 50%;\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"fs\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div>7</div>\n        <div>8</div>\n        <div>9</div>\n        <div>10</div>\n        <div>11</div>\n        <div>12</div>\n    </div>\n</body>\n</html>\n```\n\ne. align-self  设置某个项目在交叉轴上的对齐方式，其参数和align-items一致，当某个项目添加了该属性后，则会覆盖父容器上的align-itmes属性，其默认值为auto（表示继承父容器的align-itmes值）\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        .box{\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            align-items: center;\n        }\n        .box div{\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        }\n        .fs{\n            flex-shrink: 0;\n            flex-basis: 50%;\n            align-self: flex-end;\n        }\n        .as{\n            align-self: flex-start;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"fs\">1</div>\n        <div>2</div>\n        <div>3</div>\n        <div>4</div>\n        <div>5</div>\n        <div>6</div>\n        <div class=\"as\">7</div>\n        <div>8</div>\n        <div>9</div>\n        <div>10</div>\n        <div>11</div>\n        <div>12</div>\n    </div>\n</body>\n</html>\n```\n\nf. flex属性，该属性相当于flex-grow，flex-shrink，flex-basis的简写，默认值0,1 auto","slug":"八-布局","published":1,"updated":"2022-07-19T02:28:32.036Z","_id":"cl5hmbtm200182cujhrlmd15c","comments":1,"layout":"post","photos":[],"link":"","content":"<p> (八)布局<br> <span id=\"more\"></span></p>\n<h2 id=\"8-1-布局\"><a href=\"#8-1-布局\" class=\"headerlink\" title=\"8.1 布局\"></a>8.1 布局</h2><p>布局是为了对整个网页进行排版，把网站内容安排在多个列中，用以丰富网页背景，色彩，内容等网页外观，就跟房子装修一样，我们需要把我们的房子装修漂漂亮亮的而且功能实用，总不能把床放在卫生间，把马桶放在燃气灶旁边吧</p>\n<p>我么在制作前期需要对UI设计师提供的设计图片进行布局分析，明确那个模块在什么位置，我们需要通过布局将模块创建出来，放在它该有的位置上，然后对模块进行内容填充</p>\n<h2 id=\"8-2-入门布局–圣杯布局\"><a href=\"#8-2-入门布局–圣杯布局\" class=\"headerlink\" title=\"8.2 入门布局–圣杯布局\"></a>8.2 入门布局–圣杯布局</h2><ul>\n<li>入门图</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630552648013-f7370ed0-1b2e-4490-8032-f72bab65f024.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_48,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例代码</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0 auto;\n        &#125;\n        .top&#123;\n            width: 100%;\n            height: 80px;\n            margin-bottom: 10px;\n        &#125;\n        .middle&#123;\n            width: 100%;\n            height: 500px;\n            margin-bottom: 10px;\n        &#125;\n        .middle div&#123;\n            float: left;\n        &#125;\n        .middle div:nth-child(1),.middle div:nth-last-child(1)&#123;\n            width: 30%;\n            height: 100%;\n            background-color: #339fff;\n        &#125;\n        .middle div:nth-child(2)&#123;\n            width: 40%;\n            height: 100%;\n            background-color: #2279ee;\n        &#125;\n        .bottom&#123;\n            width: 100%;\n            height: 80px;\n        &#125;\n        .color1&#123;\n            background-color: #339fff;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!--顶部--&gt;\n    &lt;div class=&quot;top color1&quot;&gt;&lt;/div&gt;\n    &lt;!--中部--&gt;\n    &lt;div class=&quot;middle&quot;&gt;\n        &lt;!--左--&gt;\n        &lt;div&gt;&lt;/div&gt;\n        &lt;!--中--&gt;\n        &lt;div&gt;&lt;/div&gt;\n        &lt;!--右--&gt;\n        &lt;div&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;!--底部--&gt;\n    &lt;div class=&quot;bottom color1&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"8-3-弹性布局\"><a href=\"#8-3-弹性布局\" class=\"headerlink\" title=\"8.3 弹性布局\"></a>8.3 弹性布局</h2><h4 id=\"8-3-1-传统布局与弹性布局\"><a href=\"#8-3-1-传统布局与弹性布局\" class=\"headerlink\" title=\"8.3.1 传统布局与弹性布局\"></a>8.3.1 传统布局与弹性布局</h4><ol>\n<li>传统布局方法遵循文档流的模式，依赖浮动，相较于一些特殊布局，不容易实现（如：垂直居中效果）</li>\n<li>弹性布局诞生于2009年，弹性布局也称之为flex布局</li>\n<li>弹性布局可以完整的响应式的实现各种页面布局</li>\n</ol>\n<h4 id=\"8-3-2-在使用弹性布局时需要知道的两个概念\"><a href=\"#8-3-2-在使用弹性布局时需要知道的两个概念\" class=\"headerlink\" title=\"8.3.2 在使用弹性布局时需要知道的两个概念\"></a>8.3.2 在使用弹性布局时需要知道的两个概念</h4><ol>\n<li>容器：需要添加弹性布局的父元素</li>\n<li>项目：弹性布局容器中的每一个子元素称之为项目</li>\n</ol>\n<h4 id=\"8-3-3-在使用弹性布局时需要了解的两个基本方向\"><a href=\"#8-3-3-在使用弹性布局时需要了解的两个基本方向\" class=\"headerlink\" title=\"8.3.3 在使用弹性布局时需要了解的两个基本方向\"></a>8.3.3 在使用弹性布局时需要了解的两个基本方向</h4><ol>\n<li>主轴：在弹性布局中，需要通过样式属性去规定水平/垂直方向为主轴</li>\n<li>交叉轴：与主轴垂直的另一个方向称之为交叉轴</li>\n</ol>\n<h4 id=\"8-3-4-弹性布局的使用步骤\"><a href=\"#8-3-4-弹性布局的使用步骤\" class=\"headerlink\" title=\"8.3.4 弹性布局的使用步骤\"></a>8.3.4 弹性布局的使用步骤</h4><ol>\n<li>给父元素添加display:flex/inline-flex来规定该容器为弹性布局显示，而不遵循常规的文档流模式</li>\n<li>添加弹性布局的相关属性样式</li>\n<li>注：当元素采用了弹性布局后，子元素的浮动会失效</li>\n<li>入门</li>\n</ol>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            background-color: aqua;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>配合display:flex使用的12个属性（6个容器属性，6个项目属性）</p>\n<h4 id=\"6个容器属性\"><a href=\"#6个容器属性\" class=\"headerlink\" title=\"6个容器属性\"></a>6个容器属性</h4><ol>\n<li><ol>\n<li>flex-direction  改属性决定主轴的方向（表示在容器中项目的排列方向）</li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>方向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>row   默认值</td>\n<td>主轴为水平方向，从父容器的左部开始渲染显示</td>\n</tr>\n<tr>\n<td>row-reverse</td>\n<td>主轴为水平方向，从父容器的右部开始渲染显示</td>\n</tr>\n<tr>\n<td>column</td>\n<td>主轴为垂直方向，从父容器的左上部开始渲染显示</td>\n</tr>\n<tr>\n<td>column-reverse</td>\n<td>主轴为垂直方向，从父容器的左下部开始渲染显示</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            background-color: aqua;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>b. flex-wrap   项目的排列方式（默认情况下，所有项目都排列在一条轴线上）</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nowrap</td>\n<td>不换行，当容器的宽度不够时，容器中的每个项目将会被挤压</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td>换行，按项目的实际宽度执行排列，当容器宽度不够时自动换行，并且第一行在容器的最上方</td>\n</tr>\n<tr>\n<td>wrap-reverse</td>\n<td>换行，第一行在容器的最下方</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>c.  flex-flow:flex-direction  flex-wrap</p>\n<p>默认值为  flex-flow:row  wrap</p>\n<p>d.  justify-content   定义了项目在主轴方向的对齐方式</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-start</td>\n<td>项目位于主轴的起点</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>项目位于主轴的终点</td>\n</tr>\n<tr>\n<td>center</td>\n<td>居中对齐</td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边没有间隔</td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边有一定的间隔</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>e.  align-items  交叉轴对齐方式</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-start</td>\n<td>交叉轴起点对齐</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>交叉轴终点对齐</td>\n</tr>\n<tr>\n<td>center</td>\n<td>居中对齐</td>\n</tr>\n<tr>\n<td>baseline</td>\n<td>以项目的第一行文字为基线对齐，文字的行高，字体大小会直接影响后边的项目对齐</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>如果项目没有设置高度，则添加该属性后项目会占满整个容器</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: center;\n            /*align-items: flex-end;*/\n            /*align-items: stretch;*/\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: stretch;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            /*没有高度*/\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: baseline;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n        .big&#123;\n            font-size: 30px;\n            line-height: 50px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;big&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>f.  align-content 定义多根轴线的对齐方式，如果定义一根轴线则该属性不生效（不推荐出现多根轴线）</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-start</td>\n<td>与交叉轴的起点对齐</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>与交叉轴的终点对齐</td>\n</tr>\n<tr>\n<td>center</td>\n<td>与交叉轴的中点对齐</td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>与交叉轴的两端对齐，轴线之间的间隔平均分布，开头和结束项目与容器没间隔</td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>与交叉轴的两端对齐，轴线之间的间隔都相等</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>轴线占满整个交叉轴</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .big&#123;\n            font-size: 30px;\n            line-height: 50px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;big&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div&gt;7&lt;/div&gt;\n        &lt;div&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6个项目属性\"><a href=\"#6个项目属性\" class=\"headerlink\" title=\"6个项目属性\"></a>6个项目属性</h4><ol>\n<li><ol>\n<li>order 定义项目排列的顺序，数值越小，排列越靠前，默认值为0，当添加了大于0的值后，该项目则不遵循文档流的排列方式</li>\n</ol>\n</li>\n</ol>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .big&#123;\n            font-size: 30px;\n            line-height: 50px;\n        &#125;\n        .orderStyle&#123;\n            order: 5;\n        &#125;\n        .orderStyle1&#123;\n            order: 7;\n        &#125;\n        .orderStyle2&#123;\n            order: 6;\n        &#125;\n        .orderStyle3&#123;\n            order: 4;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;big orderStyle&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div class=&quot;orderStyle1&quot;&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div class=&quot;orderStyle2&quot;&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div&gt;7&lt;/div&gt;\n        &lt;div class=&quot;orderStyle3&quot;&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>b. flex-grow 用来定义项目的放大比例，默认为0，在为0的情况下，即使容器还有空间，项目也不会放大，当值大于零时容器还有空间余量的话则添加了该属性的项目会放大</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .big&#123;\n            font-size: 30px;\n            line-height: 50px;\n        &#125;\n        .orderStyle&#123;\n            order: 5;\n            flex-grow: 2;\n        &#125;\n        .orderStyle1&#123;\n            order: 7;\n            flex-grow: 2;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;big orderStyle&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div class=&quot;orderStyle1&quot;&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>c. flex-shrink  定义项目是否可压缩，默认值为1，若空间不够，该项目将被缩小，如果其中某一个项目的值被设置为0，则它的空间不会被压缩</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .fs&#123;\n            flex-shrink: 0;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;fs&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div&gt;7&lt;/div&gt;\n        &lt;div&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n        &lt;div&gt;11&lt;/div&gt;\n        &lt;div&gt;12&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>d. flex-basis  定义了项目占据主轴的空间（设置项目的宽度，当项目添加了该属性后，width会失效）</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .fs&#123;\n            flex-shrink: 0;\n            flex-basis: 50%;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;fs&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div&gt;7&lt;/div&gt;\n        &lt;div&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n        &lt;div&gt;11&lt;/div&gt;\n        &lt;div&gt;12&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>e. align-self  设置某个项目在交叉轴上的对齐方式，其参数和align-items一致，当某个项目添加了该属性后，则会覆盖父容器上的align-itmes属性，其默认值为auto（表示继承父容器的align-itmes值）</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            align-items: center;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .fs&#123;\n            flex-shrink: 0;\n            flex-basis: 50%;\n            align-self: flex-end;\n        &#125;\n        .as&#123;\n            align-self: flex-start;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;fs&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div class=&quot;as&quot;&gt;7&lt;/div&gt;\n        &lt;div&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n        &lt;div&gt;11&lt;/div&gt;\n        &lt;div&gt;12&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>f. flex属性，该属性相当于flex-grow，flex-shrink，flex-basis的简写，默认值0,1 auto</p>\n","site":{"data":{}},"excerpt":"<p> (八)布局<br>","more":"</p>\n<h2 id=\"8-1-布局\"><a href=\"#8-1-布局\" class=\"headerlink\" title=\"8.1 布局\"></a>8.1 布局</h2><p>布局是为了对整个网页进行排版，把网站内容安排在多个列中，用以丰富网页背景，色彩，内容等网页外观，就跟房子装修一样，我们需要把我们的房子装修漂漂亮亮的而且功能实用，总不能把床放在卫生间，把马桶放在燃气灶旁边吧</p>\n<p>我么在制作前期需要对UI设计师提供的设计图片进行布局分析，明确那个模块在什么位置，我们需要通过布局将模块创建出来，放在它该有的位置上，然后对模块进行内容填充</p>\n<h2 id=\"8-2-入门布局–圣杯布局\"><a href=\"#8-2-入门布局–圣杯布局\" class=\"headerlink\" title=\"8.2 入门布局–圣杯布局\"></a>8.2 入门布局–圣杯布局</h2><ul>\n<li>入门图</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630552648013-f7370ed0-1b2e-4490-8032-f72bab65f024.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_48,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>示例代码</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        *&#123;\n            margin: 0 auto;\n        &#125;\n        .top&#123;\n            width: 100%;\n            height: 80px;\n            margin-bottom: 10px;\n        &#125;\n        .middle&#123;\n            width: 100%;\n            height: 500px;\n            margin-bottom: 10px;\n        &#125;\n        .middle div&#123;\n            float: left;\n        &#125;\n        .middle div:nth-child(1),.middle div:nth-last-child(1)&#123;\n            width: 30%;\n            height: 100%;\n            background-color: #339fff;\n        &#125;\n        .middle div:nth-child(2)&#123;\n            width: 40%;\n            height: 100%;\n            background-color: #2279ee;\n        &#125;\n        .bottom&#123;\n            width: 100%;\n            height: 80px;\n        &#125;\n        .color1&#123;\n            background-color: #339fff;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!--顶部--&gt;\n    &lt;div class=&quot;top color1&quot;&gt;&lt;/div&gt;\n    &lt;!--中部--&gt;\n    &lt;div class=&quot;middle&quot;&gt;\n        &lt;!--左--&gt;\n        &lt;div&gt;&lt;/div&gt;\n        &lt;!--中--&gt;\n        &lt;div&gt;&lt;/div&gt;\n        &lt;!--右--&gt;\n        &lt;div&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;!--底部--&gt;\n    &lt;div class=&quot;bottom color1&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"8-3-弹性布局\"><a href=\"#8-3-弹性布局\" class=\"headerlink\" title=\"8.3 弹性布局\"></a>8.3 弹性布局</h2><h4 id=\"8-3-1-传统布局与弹性布局\"><a href=\"#8-3-1-传统布局与弹性布局\" class=\"headerlink\" title=\"8.3.1 传统布局与弹性布局\"></a>8.3.1 传统布局与弹性布局</h4><ol>\n<li>传统布局方法遵循文档流的模式，依赖浮动，相较于一些特殊布局，不容易实现（如：垂直居中效果）</li>\n<li>弹性布局诞生于2009年，弹性布局也称之为flex布局</li>\n<li>弹性布局可以完整的响应式的实现各种页面布局</li>\n</ol>\n<h4 id=\"8-3-2-在使用弹性布局时需要知道的两个概念\"><a href=\"#8-3-2-在使用弹性布局时需要知道的两个概念\" class=\"headerlink\" title=\"8.3.2 在使用弹性布局时需要知道的两个概念\"></a>8.3.2 在使用弹性布局时需要知道的两个概念</h4><ol>\n<li>容器：需要添加弹性布局的父元素</li>\n<li>项目：弹性布局容器中的每一个子元素称之为项目</li>\n</ol>\n<h4 id=\"8-3-3-在使用弹性布局时需要了解的两个基本方向\"><a href=\"#8-3-3-在使用弹性布局时需要了解的两个基本方向\" class=\"headerlink\" title=\"8.3.3 在使用弹性布局时需要了解的两个基本方向\"></a>8.3.3 在使用弹性布局时需要了解的两个基本方向</h4><ol>\n<li>主轴：在弹性布局中，需要通过样式属性去规定水平/垂直方向为主轴</li>\n<li>交叉轴：与主轴垂直的另一个方向称之为交叉轴</li>\n</ol>\n<h4 id=\"8-3-4-弹性布局的使用步骤\"><a href=\"#8-3-4-弹性布局的使用步骤\" class=\"headerlink\" title=\"8.3.4 弹性布局的使用步骤\"></a>8.3.4 弹性布局的使用步骤</h4><ol>\n<li>给父元素添加display:flex/inline-flex来规定该容器为弹性布局显示，而不遵循常规的文档流模式</li>\n<li>添加弹性布局的相关属性样式</li>\n<li>注：当元素采用了弹性布局后，子元素的浮动会失效</li>\n<li>入门</li>\n</ol>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            background-color: aqua;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>配合display:flex使用的12个属性（6个容器属性，6个项目属性）</p>\n<h4 id=\"6个容器属性\"><a href=\"#6个容器属性\" class=\"headerlink\" title=\"6个容器属性\"></a>6个容器属性</h4><ol>\n<li><ol>\n<li>flex-direction  改属性决定主轴的方向（表示在容器中项目的排列方向）</li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>方向</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>row   默认值</td>\n<td>主轴为水平方向，从父容器的左部开始渲染显示</td>\n</tr>\n<tr>\n<td>row-reverse</td>\n<td>主轴为水平方向，从父容器的右部开始渲染显示</td>\n</tr>\n<tr>\n<td>column</td>\n<td>主轴为垂直方向，从父容器的左上部开始渲染显示</td>\n</tr>\n<tr>\n<td>column-reverse</td>\n<td>主轴为垂直方向，从父容器的左下部开始渲染显示</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            background-color: aqua;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>b. flex-wrap   项目的排列方式（默认情况下，所有项目都排列在一条轴线上）</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nowrap</td>\n<td>不换行，当容器的宽度不够时，容器中的每个项目将会被挤压</td>\n</tr>\n<tr>\n<td>wrap</td>\n<td>换行，按项目的实际宽度执行排列，当容器宽度不够时自动换行，并且第一行在容器的最上方</td>\n</tr>\n<tr>\n<td>wrap-reverse</td>\n<td>换行，第一行在容器的最下方</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>c.  flex-flow:flex-direction  flex-wrap</p>\n<p>默认值为  flex-flow:row  wrap</p>\n<p>d.  justify-content   定义了项目在主轴方向的对齐方式</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-start</td>\n<td>项目位于主轴的起点</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>项目位于主轴的终点</td>\n</tr>\n<tr>\n<td>center</td>\n<td>居中对齐</td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边没有间隔</td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边有一定的间隔</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>e.  align-items  交叉轴对齐方式</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-start</td>\n<td>交叉轴起点对齐</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>交叉轴终点对齐</td>\n</tr>\n<tr>\n<td>center</td>\n<td>居中对齐</td>\n</tr>\n<tr>\n<td>baseline</td>\n<td>以项目的第一行文字为基线对齐，文字的行高，字体大小会直接影响后边的项目对齐</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>如果项目没有设置高度，则添加该属性后项目会占满整个容器</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: center;\n            /*align-items: flex-end;*/\n            /*align-items: stretch;*/\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: stretch;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            /*没有高度*/\n            background-color: red;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 100px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*交叉轴对齐方式*/\n            align-items: baseline;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50%;\n            background-color: red;\n        &#125;\n        .big&#123;\n            font-size: 30px;\n            line-height: 50px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;big&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>f.  align-content 定义多根轴线的对齐方式，如果定义一根轴线则该属性不生效（不推荐出现多根轴线）</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flex-start</td>\n<td>与交叉轴的起点对齐</td>\n</tr>\n<tr>\n<td>flex-end</td>\n<td>与交叉轴的终点对齐</td>\n</tr>\n<tr>\n<td>center</td>\n<td>与交叉轴的中点对齐</td>\n</tr>\n<tr>\n<td>space-between</td>\n<td>与交叉轴的两端对齐，轴线之间的间隔平均分布，开头和结束项目与容器没间隔</td>\n</tr>\n<tr>\n<td>space-around</td>\n<td>与交叉轴的两端对齐，轴线之间的间隔都相等</td>\n</tr>\n<tr>\n<td>stretch</td>\n<td>轴线占满整个交叉轴</td>\n</tr>\n</tbody></table>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .big&#123;\n            font-size: 30px;\n            line-height: 50px;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;big&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div&gt;7&lt;/div&gt;\n        &lt;div&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"6个项目属性\"><a href=\"#6个项目属性\" class=\"headerlink\" title=\"6个项目属性\"></a>6个项目属性</h4><ol>\n<li><ol>\n<li>order 定义项目排列的顺序，数值越小，排列越靠前，默认值为0，当添加了大于0的值后，该项目则不遵循文档流的排列方式</li>\n</ol>\n</li>\n</ol>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .big&#123;\n            font-size: 30px;\n            line-height: 50px;\n        &#125;\n        .orderStyle&#123;\n            order: 5;\n        &#125;\n        .orderStyle1&#123;\n            order: 7;\n        &#125;\n        .orderStyle2&#123;\n            order: 6;\n        &#125;\n        .orderStyle3&#123;\n            order: 4;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;big orderStyle&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div class=&quot;orderStyle1&quot;&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div class=&quot;orderStyle2&quot;&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div&gt;7&lt;/div&gt;\n        &lt;div class=&quot;orderStyle3&quot;&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>b. flex-grow 用来定义项目的放大比例，默认为0，在为0的情况下，即使容器还有空间，项目也不会放大，当值大于零时容器还有空间余量的话则添加了该属性的项目会放大</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            /*flex-wrap: nowrap;*/\n            flex-wrap: wrap;\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .big&#123;\n            font-size: 30px;\n            line-height: 50px;\n        &#125;\n        .orderStyle&#123;\n            order: 5;\n            flex-grow: 2;\n        &#125;\n        .orderStyle1&#123;\n            order: 7;\n            flex-grow: 2;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;big orderStyle&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div class=&quot;orderStyle1&quot;&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>c. flex-shrink  定义项目是否可压缩，默认值为1，若空间不够，该项目将被缩小，如果其中某一个项目的值被设置为0，则它的空间不会被压缩</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .fs&#123;\n            flex-shrink: 0;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;fs&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div&gt;7&lt;/div&gt;\n        &lt;div&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n        &lt;div&gt;11&lt;/div&gt;\n        &lt;div&gt;12&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>d. flex-basis  定义了项目占据主轴的空间（设置项目的宽度，当项目添加了该属性后，width会失效）</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            /*多根轴线与交叉轴的对齐方式*/\n            /*align-content: center;*/\n            align-content: space-between;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .fs&#123;\n            flex-shrink: 0;\n            flex-basis: 50%;\n        &#125;\n\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;fs&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div&gt;7&lt;/div&gt;\n        &lt;div&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n        &lt;div&gt;11&lt;/div&gt;\n        &lt;div&gt;12&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>e. align-self  设置某个项目在交叉轴上的对齐方式，其参数和align-items一致，当某个项目添加了该属性后，则会覆盖父容器上的align-itmes属性，其默认值为auto（表示继承父容器的align-itmes值）</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        .box&#123;\n            width: 100%;\n            height: 300px;\n            /*规定容器*/\n            display: flex;\n            /*主轴*/\n            flex-direction: row;\n            /*flex-direction: row-reverse;*/\n            /*flex-direction: column;*/\n            /*flex-direction: column-reverse;*/\n            /*排列方式*/\n            flex-wrap: nowrap;\n            /*flex-wrap: wrap;*/\n            /*flex-wrap: wrap-reverse;*/\n            background-color: aqua;\n            /*主轴对齐方式*/\n            /*justify-content: flex-start;*/\n            /*justify-content: flex-end;*/\n            /*justify-content: space-around;*/\n            justify-content: space-between;\n            align-items: center;\n        &#125;\n        .box div&#123;\n            width: 20%;\n            height: 50px;\n            background-color: red;\n        &#125;\n        .fs&#123;\n            flex-shrink: 0;\n            flex-basis: 50%;\n            align-self: flex-end;\n        &#125;\n        .as&#123;\n            align-self: flex-start;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=&quot;box&quot;&gt;\n        &lt;div class=&quot;fs&quot;&gt;1&lt;/div&gt;\n        &lt;div&gt;2&lt;/div&gt;\n        &lt;div&gt;3&lt;/div&gt;\n        &lt;div&gt;4&lt;/div&gt;\n        &lt;div&gt;5&lt;/div&gt;\n        &lt;div&gt;6&lt;/div&gt;\n        &lt;div class=&quot;as&quot;&gt;7&lt;/div&gt;\n        &lt;div&gt;8&lt;/div&gt;\n        &lt;div&gt;9&lt;/div&gt;\n        &lt;div&gt;10&lt;/div&gt;\n        &lt;div&gt;11&lt;/div&gt;\n        &lt;div&gt;12&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>f. flex属性，该属性相当于flex-grow，flex-shrink，flex-basis的简写，默认值0,1 auto</p>"},{"title":"(十二)JavaScript BOM与DOM","date":"2022-07-08T12:50:16.000Z","cover":"https://tse3-mm.cn.bing.net/th/id/OIP-C.W1LAyJAcbJobV0FBqPu-wwHaD4?pid=ImgDet&rs=1","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"(十二)JavaScript BOM与DOM\n<!--more-->\n\n# 第十二章 JavaScript BOM与DOM\n\n## BOM（borwser object Model）\n\n#### 浏览器对象模型\n\n- - 使用对象描述浏览器的各个部分\n  - BOM提供与浏览器窗口交互的对象\n  - BOM主要用于管理窗口与窗口之间的通讯，所以核心对象是窗口（window）\n\n- BOM里有什么\n\n- - 图示\n\n    ![img](https://files.catbox.moe/ccpeyl.png)\n\n- - 与浏览器进行交互的一些对象\n\n- - - 移动，调整浏览器大小的window对象\n    - 用于导航的location对象history\n    - 获取浏览器，用户屏幕信息的navigator与screen对象\n\n##### window对象\n\n- - open()方法用于打开一个新窗口或查找一个窗口\n- - - 语法\n    - window.open(url,name,feature,replace)\n\n| 参数    | 描述                                                         |\n| ------- | ------------------------------------------------------------ |\n| url     | 声明要在新窗口中显示文档的url                                |\n| name    | 该字符声明了新窗口的名称。这个名称可以用作标记 和的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。 |\n| feature | 声明了新窗口要显示的标准浏览器的特征                         |\n| replace | 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目。false - URL 在浏览历史中创建新的条目。 |\n\n- 案例 打开新窗口控制其外观样式\n\n  ![img](https://files.catbox.moe/9cmg9b.png)\n\n- 窗口特征表\n\n| channelmode=yes\\|no\\|1\\|0 | 是否使用剧院模式显示窗口。默认为 no。                        |\n| ------------------------- | ------------------------------------------------------------ |\n| directories=yes\\|no\\|1\\|0 | 是否添加目录按钮。默认为 yes。                               |\n| fullscreen=yes\\|no\\|1\\|0  | 是否使用全屏模式显示浏览器。默认是 no。处于全屏模式的窗口必须同时处于剧院模式。 |\n| height=pixels             | 窗口文档显示区的高度。以像素计。                             |\n| left=pixels               | 窗口的 x 坐标。以像素计。                                    |\n| location=yes\\|no\\|1\\|0    | 是否显示地址字段。默认是 yes。                               |\n| menubar=yes\\|no\\|1\\|0     | 是否显示菜单栏。默认是 yes。                                 |\n| resizable=yes\\|no\\|1\\|0   | 窗口是否可调节尺寸。默认是 yes。                             |\n| scrollbars=yes\\|no\\|1\\|0  | 是否显示滚动条。默认是 yes。                                 |\n| status=yes\\|no\\|1\\|0      | 是否添加状态栏。默认是 yes。                                 |\n| titlebar=yes\\|no\\|1\\|0    | 是否显示标题栏。默认是 yes。                                 |\n| toolbar=yes\\|no\\|1\\|0     | 是否显示浏览器的工具栏。默认是 yes。                         |\n| top=pixels                | 窗口的 y 坐标。                                              |\n| width=pixels              | 窗口的文档显示区的宽度。以像素计。                           |\n\n- setInterval()每隔指定的毫秒运行指定的代码/函数\n\n- 案例\n\n  ![img](https://files.catbox.moe/gezs9p.png)\n\n- setTimeout()经过指定毫秒数运行一次指定的代码/函数\n\n- 案例\n\n  ![img](https://files.catbox.moe/r0dclo.png)\n\n- location地址栏对象\n\n- - href：设置或获取整个URL为字符串\n\n- 案例\n\n  ![img](https://files.catbox.moe/rk4u5p.png)\n\n- reload()：重新加载\n\n- replace():用新文档替换当前文档\n\n- 案例\n\n  ![img](https://files.catbox.moe/e2r3lh.png)\n\n##### 屏幕对象（Screen）用来获取电脑屏幕的一些数据\n\n- - availHeight：获取系统屏幕的工作区高度（浏览器的页面高度）\n\n- - 案例\n\n    ![img](https://files.catbox.moe/k600si.png)\n\n- availWidth：获取系统屏幕的工作区宽度（浏览器页面宽度）\n\n- height：获取屏幕的垂直分辨率\n\n- width：获取屏幕的水平分辨率\n\n- - 案例\n\n    ![img](https://files.catbox.moe/oxiqgh.png)\n\n## DOM编程\n\n#### 文档对象模型（document）\n\n- 当一个html页面加载到浏览器的时候，那么浏览器会为每个标签都创建一个对应的对象，描述该标签的所有信息\n- 我们此时所看到的网页信息实际上就是看到了这些标签的对象信息，如果我们需要操作页面的数据，我们就可以通过这些标签对象进行操作\n- 图例\n- ![img](https://files.catbox.moe/29phbz.png)\n\n#### 用来获取页面节点的方法\n\n- 获取页面的所有节点：document.all；\n\n- nodeName:节点名字\n\n  ```\n  var    elements =document.all;\n  alert(elements);\n  for(var index = 0;index<elements.length;index++){\n     alert(\"节点名：\"+elements[index].nodeName);\n  }\n  ```\n\n  \n\n- 通过标签属性找节点\n\n- - document.getElementById(“标签属性id”);\n\n  - 例\n\n    ```\n    <div id=\"test\">\n    window.onload=function(){\n        var    a = document.getElementById(\"test\");\n        alert(a);\n    };\n    ```\n\n    \n\n- 通过标签名获取节点\n\n- - document.getElementsByTagName(标签名);\n\n  - 注：返回的是一个数组\n\n  - 例\n\n    ```\n    <div></div>\n    window.onload=function(){\n         var    a = document.getElementsByName(\"div\");\n         alert(a);\n    };\n    ```\n\n    \n\n- 通过标签的Name属性获取节点\n\n- - document.getElementByName(“标签的name属性值”);\n\n  - 注：返回的是一个数组\n\n  - 例\n\n    ```\n    <div name=\"ElName\"></div>\n    window.onload=function(){\n        var    a = document.getElementsByName(\"ElName\");\n        alert(a);\n    };\n    ```\n\n    \n\n- 通过关系找节点\n\n- - document可以通过一个节点，找到与它有关的节点\n\n- - - parentNode：获取当前元素的父节点\n\n    - 例\n\n      ```\n      window.onload=function(){\n          var    a = document.getElementById(\"test\");\n          var    f = a.parentNode;\n          alert(f);\n          f.innerHTML=\"找到我了\";\n      };\n      ```\n\n      \n\n- childNodes：获取当前元素的所有下一级子元素\n\n  ```\n  window.onload=function(){\n  var    a = document.getElementById(\"test\");\n  var    all = a.childNodes;\n  for(var    index = 0;index<all.length;index++){\n      alert(all[index].nodeName);\n      if(all[index].nodeType==1){\n         all[index].style.background=\"red\";\n      }\n   }\n  };\n  ```\n\n| **类型**                         | **nodeType常数值** | **描述**                             |\n| -------------------------------- | ------------------ | ------------------------------------ |\n| Node.ELEMENT_NODE                | 1                  | 元素节点                             |\n| Node.ATTRIBUTE_NODE              | 2                  | 属性节点                             |\n| Node.TEXT_NODE                   | 3                  | 文本节点                             |\n| Node.CDATA_SECTION_NODE          | 4                  | 字符数据节点（文本不会被解析器解析） |\n| Node.ENTITY_REFERENCE_NODE       | 5                  | 实体引用节点                         |\n| Node.ENTITY_NODE                 | 6                  | 实体节点                             |\n| Node.PROCESSING_INSTRUCTION_NODE | 7                  | 处理指令节点                         |\n| Node.COMMENT_NODE                | 8                  | 注释节点                             |\n| Node.DOCUMENT_NODE               | 9                  | 文档节点（DOM树的根节点）            |\n| Node.DOCUMENT_TYPE_NODE          | 10                 | 向为文档定义的实体提供接口           |\n| Node.DOCUMENT_FRAGMENT_NODE      | 11                 | 表示邻接节点和它们的子树。           |\n| Node.NOTATION_NODE               | 12                 | 代表一个符号在DTD中的声明            |\n\n- firstChild：获取当前节点的第一个子节点\n\n- lastChild：获取当前节点的最后一个字节点\n\n- nextElementSibling：获取当前节点的下一个节点（兄弟节点）\n\n- previousElementSibling：获取当前节点的上一个节点（兄弟节点）\n\n- 创建，删除，插入节点\n\n- - - 创建：var 节点 = document.creatElement(“标签名”);创建新元素节点\n    - 节点 .setAttribute(“属性名”,”属性值”);\n    - 节点.appendChild(e);将某个节点添加到该节点的最后位置\n    - 节点.insertBefore(e,child);将某个新节点添加到该节点中，某个子节点之前\n    - 节点.removeChild(要删除的子节点)；删除指定的直接点\n\n- - - - 节点必须为直接父节点\n\n- - - 例\n\n      ```\n      var    trNode = document.createElement(\"tr\");\n      var tdNode = document.createElement(\"td\");\n      trNode.appendChild(tdNode);\n      ```\n\n- 利用节点操作css\n\n- - 我们可以通过上边获取节点的方式获取到节点，我们可以通过节点对象去操作标签的的样式\n  - 语法\n\n- - - 节点.style.要操作的样式=”值”;\n\n#### JavaScript中常用的事件\n\n- js有可以通过某些方式触发函数的执行，我们把这种方式称之为事件\n\n- 点击事件（onclick()）\n\n- - 案例\n\n    ```\n    <script>\n    function    sp(elementid){\n    var    a = document.getElementById(elementid);\n    a.style.background=\"red\";\n    }\n    </script>\n    <title>无标题文档</title>\n    </head>\n     \n    <body>\n    <div    id=\"test\" nzmd=\"ElName\"    style=\"height:100px;\">\n                   <p    id=\"elp\" onclick=\"sp('elp')\">1</p>\n            <a id=\"ela\"    onclick=\"sp('ela')\">2</a>\n        </div>\n    </body>\n    ```\n\n    \n\n- 鼠标进入事件（onmouseover(),onmousemove()）\n\n- 鼠标离开事件（onmouseout()）\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n      .box{\n        width: 200px;\n        height: 500px;\n        display: none;\n      }\n      .boxOne{\n        background-color: red;\n      }\n      .boxTwo{\n        background-color: aqua;\n      }\n    </style>\n    <script>\n      function show(idName) {\n        //根据id获取要显示的元素\n        var el = document.getElementById(idName);\n        el.style.display = \"block\";\n      }\n      function hide(idName) {\n        var el = document.getElementById(idName);\n        el.style.display = \"none\";\n      }\n    </script>\n  </head>\n  <body>\n    <!--悬停事件：鼠标进入元素后触发-->\n    <!--鼠标离开事件：鼠标离开元素后触发-->\n    <nav>\n      <a href=\"#\" onmousemove=\"show('one')\" onmouseout=\"hide('one')\">导航一</a>\n      <a href=\"#\" onmousemove=\"show('two')\" onmouseout=\"hide('two')\">导航二</a>\n    </nav>\n    <div class=\"box boxOne\" onmousemove=\"show('one')\" onmouseout=\"hide('one')\" id=\"one\"></div>\n    <div class=\"box boxTwo\" onmousemove=\"show('two')\" onmouseout=\"hide('two')\" id=\"two\"></div>\n  </body>\n</html>\n```\n\n- 获取焦点（onfocus()）\n\n- 失去焦点（onblur()）\n\n- - 案例\n\n    ```\n    <script>\n    function    of(){\n    var    a = document.getElementById(\"eli\");\n       a.value=\"\";\n    }\n    function    ob(){\n    var    a = document.getElementById(\"eli\");\n       a.value=\"有字\";\n    }\n    </script>\n    <title>无标题文档</title>\n    </head>\n     \n    <body>\n    <input    type=\"text\" onfocus=\"of()\" onblur=\"ob()\"    id=\"eli\"/>\n    </body>\n    <script>\n    window.onload=function(){\n        var    a = document.getElementById(\"eli\");\n        a.onfocus=function(){\n            a.placeholder=\"\";\n       }\n      a.onblur=function(){\n          a.placeholder=\"有字\";\n      }\n    }\n    </script>\n    <title>无标题文档</title>\n    </head>\n     \n    <body>\n    <input    type=\"text\" id=\"eli\" placeholder=\"hello\"/>\n    </body>\n    ```\n\n- 滚动事件(onscroll())\n\n- - 案例\n\n    ```\n    <style>\n                   #test{\n    width:100%;\n    height:100px;\n    overflow:scroll;\n    border:1px    solid black;\n    }\n        </style>\n    <script>\n    window.onload=function(){\n    var    a = document.getElementById(\"test\");\n    a.onscroll=function(){\n    a.innerHTML=\"aaaaaa\";\n    };\n    };\n    </script>\n    <title>无标题文档</title>\n    </head>\n     \n    <body>\n    <div    id=\"test\" >\n                   啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊\n        </div>\n    ```\n\n- 键盘按下并松开（onkeypress()）\n\n- 键盘按下事件（onkeydown()）\n\n- - onkeypress 和 onkeydown 是有区别，下面将讲解 onkeypress 与 onkeydown 事件的区别。\n  - onkeypress 事件在用户按下并放开任何字母数字键时发生。但是系统按钮（例如：箭头键、功能键）无法得到识别。\n  - onkeydown 事件在用户按下任何键盘键（包括系统按钮）时发生。\n  - 具体区别：\n  - \\1. 一个放开一个没有放开，onkeydown 先于 onkeypress 发生。\n  - 2.onkeypress 无法识别系统按钮。\n  - 2.onkeydown 捕获的 keyCode 不区分字母大小，而 onkeypress 区分。\n\n- 键盘抬起事件（onkeyup()）\n\n- - 案例\n\n    ```\n    <body>\n    <input type=\"text\" id=\"txt\">\n    <script>\n        document.getElementById(\"txt\").onkeydown = function () {\n            console.log(\"键盘按下了\");\n        };\n        document.getElementById(\"txt\").onkeyup = function () {\n            console.log(\"键盘抬起了\");\n        };\n    </script>\n    </body>\n    ```\n\n    \n\n- keyCode获取按下的键\n\n| **数字值** | **实际键值**          |\n| ---------- | --------------------- |\n| 48到57     | 0到9                  |\n| 65到90     | a到z（A到Z）          |\n| 112到135   | F1到F12               |\n| 8          | BackSpace（退格）     |\n| 9          | Tab                   |\n| 13         | Enter（回车）         |\n| 20         | Caps_Lock（大写锁定） |\n| 32         | Space（空格键）       |\n| 37         | Left（左箭头）        |\n| 38         | Up（上箭头）          |\n| 39         | Right（右箭头）       |\n| 40         | Down（下箭头）        |\n\n- 案例\n\n  ```\n  <script>\n      //页面的任何的位置.按下键盘,获取按键的值\n      document.onkeydown = function (e) {\n          switch (e.keyCode) {\n              case 81:\n                  console.log(\"您按下的是Q\");\n                  break;\n              case 87:\n                  console.log(\"您按下的是W\");\n                  break;\n              case 69:\n                  console.log(\"您按下的是E\");\n                  break;\n              case 82:\n                  console.log(\"您按下的是R\");\n                  break;\n          }\n      };\n  </script>\n  ```\n\n  \n\n- onmousedown / onmouseup 鼠标按下/抬起事件\n\n- - 当鼠标左键或右键按下或者抬起的时候触发\n  - 按下或抬起滚动轮也会触发，滑动滚动轮不能触发\n  - 如果鼠标比较高级，有其他按键的情况下，按下或抬起也会触发\n  - 案例\n\n```\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        div {\n            width: 50px;\n            height: 50px;\n            background-color: pink;\n        }\n    </style>\n</head>\n<body>\n<div id=\"dv\"></div>\n<script>\n    document.getElementById(\"dv\").onmousedown = function () {\n        console.log(\"鼠标按下了\");\n    };\n    document.getElementById(\"dv\").onmouseup = function () {\n        console.log(\"鼠标抬起了\");\n    };\n</script>\n</body>\n```\n\n","source":"_posts/十二-JavaScript-BOM与DOM.md","raw":"---\ntitle: (十二)JavaScript BOM与DOM\ndate: 2022-07-08 20:50:16\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://tse3-mm.cn.bing.net/th/id/OIP-C.W1LAyJAcbJobV0FBqPu-wwHaD4?pid=ImgDet&rs=1\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\n(十二)JavaScript BOM与DOM\n<!--more-->\n\n# 第十二章 JavaScript BOM与DOM\n\n## BOM（borwser object Model）\n\n#### 浏览器对象模型\n\n- - 使用对象描述浏览器的各个部分\n  - BOM提供与浏览器窗口交互的对象\n  - BOM主要用于管理窗口与窗口之间的通讯，所以核心对象是窗口（window）\n\n- BOM里有什么\n\n- - 图示\n\n    ![img](https://files.catbox.moe/ccpeyl.png)\n\n- - 与浏览器进行交互的一些对象\n\n- - - 移动，调整浏览器大小的window对象\n    - 用于导航的location对象history\n    - 获取浏览器，用户屏幕信息的navigator与screen对象\n\n##### window对象\n\n- - open()方法用于打开一个新窗口或查找一个窗口\n- - - 语法\n    - window.open(url,name,feature,replace)\n\n| 参数    | 描述                                                         |\n| ------- | ------------------------------------------------------------ |\n| url     | 声明要在新窗口中显示文档的url                                |\n| name    | 该字符声明了新窗口的名称。这个名称可以用作标记 和的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。 |\n| feature | 声明了新窗口要显示的标准浏览器的特征                         |\n| replace | 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目。false - URL 在浏览历史中创建新的条目。 |\n\n- 案例 打开新窗口控制其外观样式\n\n  ![img](https://files.catbox.moe/9cmg9b.png)\n\n- 窗口特征表\n\n| channelmode=yes\\|no\\|1\\|0 | 是否使用剧院模式显示窗口。默认为 no。                        |\n| ------------------------- | ------------------------------------------------------------ |\n| directories=yes\\|no\\|1\\|0 | 是否添加目录按钮。默认为 yes。                               |\n| fullscreen=yes\\|no\\|1\\|0  | 是否使用全屏模式显示浏览器。默认是 no。处于全屏模式的窗口必须同时处于剧院模式。 |\n| height=pixels             | 窗口文档显示区的高度。以像素计。                             |\n| left=pixels               | 窗口的 x 坐标。以像素计。                                    |\n| location=yes\\|no\\|1\\|0    | 是否显示地址字段。默认是 yes。                               |\n| menubar=yes\\|no\\|1\\|0     | 是否显示菜单栏。默认是 yes。                                 |\n| resizable=yes\\|no\\|1\\|0   | 窗口是否可调节尺寸。默认是 yes。                             |\n| scrollbars=yes\\|no\\|1\\|0  | 是否显示滚动条。默认是 yes。                                 |\n| status=yes\\|no\\|1\\|0      | 是否添加状态栏。默认是 yes。                                 |\n| titlebar=yes\\|no\\|1\\|0    | 是否显示标题栏。默认是 yes。                                 |\n| toolbar=yes\\|no\\|1\\|0     | 是否显示浏览器的工具栏。默认是 yes。                         |\n| top=pixels                | 窗口的 y 坐标。                                              |\n| width=pixels              | 窗口的文档显示区的宽度。以像素计。                           |\n\n- setInterval()每隔指定的毫秒运行指定的代码/函数\n\n- 案例\n\n  ![img](https://files.catbox.moe/gezs9p.png)\n\n- setTimeout()经过指定毫秒数运行一次指定的代码/函数\n\n- 案例\n\n  ![img](https://files.catbox.moe/r0dclo.png)\n\n- location地址栏对象\n\n- - href：设置或获取整个URL为字符串\n\n- 案例\n\n  ![img](https://files.catbox.moe/rk4u5p.png)\n\n- reload()：重新加载\n\n- replace():用新文档替换当前文档\n\n- 案例\n\n  ![img](https://files.catbox.moe/e2r3lh.png)\n\n##### 屏幕对象（Screen）用来获取电脑屏幕的一些数据\n\n- - availHeight：获取系统屏幕的工作区高度（浏览器的页面高度）\n\n- - 案例\n\n    ![img](https://files.catbox.moe/k600si.png)\n\n- availWidth：获取系统屏幕的工作区宽度（浏览器页面宽度）\n\n- height：获取屏幕的垂直分辨率\n\n- width：获取屏幕的水平分辨率\n\n- - 案例\n\n    ![img](https://files.catbox.moe/oxiqgh.png)\n\n## DOM编程\n\n#### 文档对象模型（document）\n\n- 当一个html页面加载到浏览器的时候，那么浏览器会为每个标签都创建一个对应的对象，描述该标签的所有信息\n- 我们此时所看到的网页信息实际上就是看到了这些标签的对象信息，如果我们需要操作页面的数据，我们就可以通过这些标签对象进行操作\n- 图例\n- ![img](https://files.catbox.moe/29phbz.png)\n\n#### 用来获取页面节点的方法\n\n- 获取页面的所有节点：document.all；\n\n- nodeName:节点名字\n\n  ```\n  var    elements =document.all;\n  alert(elements);\n  for(var index = 0;index<elements.length;index++){\n     alert(\"节点名：\"+elements[index].nodeName);\n  }\n  ```\n\n  \n\n- 通过标签属性找节点\n\n- - document.getElementById(“标签属性id”);\n\n  - 例\n\n    ```\n    <div id=\"test\">\n    window.onload=function(){\n        var    a = document.getElementById(\"test\");\n        alert(a);\n    };\n    ```\n\n    \n\n- 通过标签名获取节点\n\n- - document.getElementsByTagName(标签名);\n\n  - 注：返回的是一个数组\n\n  - 例\n\n    ```\n    <div></div>\n    window.onload=function(){\n         var    a = document.getElementsByName(\"div\");\n         alert(a);\n    };\n    ```\n\n    \n\n- 通过标签的Name属性获取节点\n\n- - document.getElementByName(“标签的name属性值”);\n\n  - 注：返回的是一个数组\n\n  - 例\n\n    ```\n    <div name=\"ElName\"></div>\n    window.onload=function(){\n        var    a = document.getElementsByName(\"ElName\");\n        alert(a);\n    };\n    ```\n\n    \n\n- 通过关系找节点\n\n- - document可以通过一个节点，找到与它有关的节点\n\n- - - parentNode：获取当前元素的父节点\n\n    - 例\n\n      ```\n      window.onload=function(){\n          var    a = document.getElementById(\"test\");\n          var    f = a.parentNode;\n          alert(f);\n          f.innerHTML=\"找到我了\";\n      };\n      ```\n\n      \n\n- childNodes：获取当前元素的所有下一级子元素\n\n  ```\n  window.onload=function(){\n  var    a = document.getElementById(\"test\");\n  var    all = a.childNodes;\n  for(var    index = 0;index<all.length;index++){\n      alert(all[index].nodeName);\n      if(all[index].nodeType==1){\n         all[index].style.background=\"red\";\n      }\n   }\n  };\n  ```\n\n| **类型**                         | **nodeType常数值** | **描述**                             |\n| -------------------------------- | ------------------ | ------------------------------------ |\n| Node.ELEMENT_NODE                | 1                  | 元素节点                             |\n| Node.ATTRIBUTE_NODE              | 2                  | 属性节点                             |\n| Node.TEXT_NODE                   | 3                  | 文本节点                             |\n| Node.CDATA_SECTION_NODE          | 4                  | 字符数据节点（文本不会被解析器解析） |\n| Node.ENTITY_REFERENCE_NODE       | 5                  | 实体引用节点                         |\n| Node.ENTITY_NODE                 | 6                  | 实体节点                             |\n| Node.PROCESSING_INSTRUCTION_NODE | 7                  | 处理指令节点                         |\n| Node.COMMENT_NODE                | 8                  | 注释节点                             |\n| Node.DOCUMENT_NODE               | 9                  | 文档节点（DOM树的根节点）            |\n| Node.DOCUMENT_TYPE_NODE          | 10                 | 向为文档定义的实体提供接口           |\n| Node.DOCUMENT_FRAGMENT_NODE      | 11                 | 表示邻接节点和它们的子树。           |\n| Node.NOTATION_NODE               | 12                 | 代表一个符号在DTD中的声明            |\n\n- firstChild：获取当前节点的第一个子节点\n\n- lastChild：获取当前节点的最后一个字节点\n\n- nextElementSibling：获取当前节点的下一个节点（兄弟节点）\n\n- previousElementSibling：获取当前节点的上一个节点（兄弟节点）\n\n- 创建，删除，插入节点\n\n- - - 创建：var 节点 = document.creatElement(“标签名”);创建新元素节点\n    - 节点 .setAttribute(“属性名”,”属性值”);\n    - 节点.appendChild(e);将某个节点添加到该节点的最后位置\n    - 节点.insertBefore(e,child);将某个新节点添加到该节点中，某个子节点之前\n    - 节点.removeChild(要删除的子节点)；删除指定的直接点\n\n- - - - 节点必须为直接父节点\n\n- - - 例\n\n      ```\n      var    trNode = document.createElement(\"tr\");\n      var tdNode = document.createElement(\"td\");\n      trNode.appendChild(tdNode);\n      ```\n\n- 利用节点操作css\n\n- - 我们可以通过上边获取节点的方式获取到节点，我们可以通过节点对象去操作标签的的样式\n  - 语法\n\n- - - 节点.style.要操作的样式=”值”;\n\n#### JavaScript中常用的事件\n\n- js有可以通过某些方式触发函数的执行，我们把这种方式称之为事件\n\n- 点击事件（onclick()）\n\n- - 案例\n\n    ```\n    <script>\n    function    sp(elementid){\n    var    a = document.getElementById(elementid);\n    a.style.background=\"red\";\n    }\n    </script>\n    <title>无标题文档</title>\n    </head>\n     \n    <body>\n    <div    id=\"test\" nzmd=\"ElName\"    style=\"height:100px;\">\n                   <p    id=\"elp\" onclick=\"sp('elp')\">1</p>\n            <a id=\"ela\"    onclick=\"sp('ela')\">2</a>\n        </div>\n    </body>\n    ```\n\n    \n\n- 鼠标进入事件（onmouseover(),onmousemove()）\n\n- 鼠标离开事件（onmouseout()）\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n      .box{\n        width: 200px;\n        height: 500px;\n        display: none;\n      }\n      .boxOne{\n        background-color: red;\n      }\n      .boxTwo{\n        background-color: aqua;\n      }\n    </style>\n    <script>\n      function show(idName) {\n        //根据id获取要显示的元素\n        var el = document.getElementById(idName);\n        el.style.display = \"block\";\n      }\n      function hide(idName) {\n        var el = document.getElementById(idName);\n        el.style.display = \"none\";\n      }\n    </script>\n  </head>\n  <body>\n    <!--悬停事件：鼠标进入元素后触发-->\n    <!--鼠标离开事件：鼠标离开元素后触发-->\n    <nav>\n      <a href=\"#\" onmousemove=\"show('one')\" onmouseout=\"hide('one')\">导航一</a>\n      <a href=\"#\" onmousemove=\"show('two')\" onmouseout=\"hide('two')\">导航二</a>\n    </nav>\n    <div class=\"box boxOne\" onmousemove=\"show('one')\" onmouseout=\"hide('one')\" id=\"one\"></div>\n    <div class=\"box boxTwo\" onmousemove=\"show('two')\" onmouseout=\"hide('two')\" id=\"two\"></div>\n  </body>\n</html>\n```\n\n- 获取焦点（onfocus()）\n\n- 失去焦点（onblur()）\n\n- - 案例\n\n    ```\n    <script>\n    function    of(){\n    var    a = document.getElementById(\"eli\");\n       a.value=\"\";\n    }\n    function    ob(){\n    var    a = document.getElementById(\"eli\");\n       a.value=\"有字\";\n    }\n    </script>\n    <title>无标题文档</title>\n    </head>\n     \n    <body>\n    <input    type=\"text\" onfocus=\"of()\" onblur=\"ob()\"    id=\"eli\"/>\n    </body>\n    <script>\n    window.onload=function(){\n        var    a = document.getElementById(\"eli\");\n        a.onfocus=function(){\n            a.placeholder=\"\";\n       }\n      a.onblur=function(){\n          a.placeholder=\"有字\";\n      }\n    }\n    </script>\n    <title>无标题文档</title>\n    </head>\n     \n    <body>\n    <input    type=\"text\" id=\"eli\" placeholder=\"hello\"/>\n    </body>\n    ```\n\n- 滚动事件(onscroll())\n\n- - 案例\n\n    ```\n    <style>\n                   #test{\n    width:100%;\n    height:100px;\n    overflow:scroll;\n    border:1px    solid black;\n    }\n        </style>\n    <script>\n    window.onload=function(){\n    var    a = document.getElementById(\"test\");\n    a.onscroll=function(){\n    a.innerHTML=\"aaaaaa\";\n    };\n    };\n    </script>\n    <title>无标题文档</title>\n    </head>\n     \n    <body>\n    <div    id=\"test\" >\n                   啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊\n        </div>\n    ```\n\n- 键盘按下并松开（onkeypress()）\n\n- 键盘按下事件（onkeydown()）\n\n- - onkeypress 和 onkeydown 是有区别，下面将讲解 onkeypress 与 onkeydown 事件的区别。\n  - onkeypress 事件在用户按下并放开任何字母数字键时发生。但是系统按钮（例如：箭头键、功能键）无法得到识别。\n  - onkeydown 事件在用户按下任何键盘键（包括系统按钮）时发生。\n  - 具体区别：\n  - \\1. 一个放开一个没有放开，onkeydown 先于 onkeypress 发生。\n  - 2.onkeypress 无法识别系统按钮。\n  - 2.onkeydown 捕获的 keyCode 不区分字母大小，而 onkeypress 区分。\n\n- 键盘抬起事件（onkeyup()）\n\n- - 案例\n\n    ```\n    <body>\n    <input type=\"text\" id=\"txt\">\n    <script>\n        document.getElementById(\"txt\").onkeydown = function () {\n            console.log(\"键盘按下了\");\n        };\n        document.getElementById(\"txt\").onkeyup = function () {\n            console.log(\"键盘抬起了\");\n        };\n    </script>\n    </body>\n    ```\n\n    \n\n- keyCode获取按下的键\n\n| **数字值** | **实际键值**          |\n| ---------- | --------------------- |\n| 48到57     | 0到9                  |\n| 65到90     | a到z（A到Z）          |\n| 112到135   | F1到F12               |\n| 8          | BackSpace（退格）     |\n| 9          | Tab                   |\n| 13         | Enter（回车）         |\n| 20         | Caps_Lock（大写锁定） |\n| 32         | Space（空格键）       |\n| 37         | Left（左箭头）        |\n| 38         | Up（上箭头）          |\n| 39         | Right（右箭头）       |\n| 40         | Down（下箭头）        |\n\n- 案例\n\n  ```\n  <script>\n      //页面的任何的位置.按下键盘,获取按键的值\n      document.onkeydown = function (e) {\n          switch (e.keyCode) {\n              case 81:\n                  console.log(\"您按下的是Q\");\n                  break;\n              case 87:\n                  console.log(\"您按下的是W\");\n                  break;\n              case 69:\n                  console.log(\"您按下的是E\");\n                  break;\n              case 82:\n                  console.log(\"您按下的是R\");\n                  break;\n          }\n      };\n  </script>\n  ```\n\n  \n\n- onmousedown / onmouseup 鼠标按下/抬起事件\n\n- - 当鼠标左键或右键按下或者抬起的时候触发\n  - 按下或抬起滚动轮也会触发，滑动滚动轮不能触发\n  - 如果鼠标比较高级，有其他按键的情况下，按下或抬起也会触发\n  - 案例\n\n```\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        div {\n            width: 50px;\n            height: 50px;\n            background-color: pink;\n        }\n    </style>\n</head>\n<body>\n<div id=\"dv\"></div>\n<script>\n    document.getElementById(\"dv\").onmousedown = function () {\n        console.log(\"鼠标按下了\");\n    };\n    document.getElementById(\"dv\").onmouseup = function () {\n        console.log(\"鼠标抬起了\");\n    };\n</script>\n</body>\n```\n\n","slug":"十二-JavaScript-BOM与DOM","published":1,"updated":"2022-07-19T02:18:23.592Z","_id":"cl5hmbtm3001c2cuj2xti1kbk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(十二)JavaScript BOM与DOM</p>\n<span id=\"more\"></span>\n\n<h1 id=\"第十二章-JavaScript-BOM与DOM\"><a href=\"#第十二章-JavaScript-BOM与DOM\" class=\"headerlink\" title=\"第十二章 JavaScript BOM与DOM\"></a>第十二章 JavaScript BOM与DOM</h1><h2 id=\"BOM（borwser-object-Model）\"><a href=\"#BOM（borwser-object-Model）\" class=\"headerlink\" title=\"BOM（borwser object Model）\"></a>BOM（borwser object Model）</h2><h4 id=\"浏览器对象模型\"><a href=\"#浏览器对象模型\" class=\"headerlink\" title=\"浏览器对象模型\"></a>浏览器对象模型</h4><ul>\n<li><ul>\n<li>使用对象描述浏览器的各个部分</li>\n<li>BOM提供与浏览器窗口交互的对象</li>\n<li>BOM主要用于管理窗口与窗口之间的通讯，所以核心对象是窗口（window）</li>\n</ul>\n</li>\n<li><p>BOM里有什么</p>\n</li>\n<li><ul>\n<li><p>图示</p>\n<p><img src=\"https://files.catbox.moe/ccpeyl.png\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>与浏览器进行交互的一些对象</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>移动，调整浏览器大小的window对象</li>\n<li>用于导航的location对象history</li>\n<li>获取浏览器，用户屏幕信息的navigator与screen对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h5><ul>\n<li><ul>\n<li>open()方法用于打开一个新窗口或查找一个窗口</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>语法</li>\n<li>window.open(url,name,feature,replace)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>url</td>\n<td>声明要在新窗口中显示文档的url</td>\n</tr>\n<tr>\n<td>name</td>\n<td>该字符声明了新窗口的名称。这个名称可以用作标记 和的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</td>\n</tr>\n<tr>\n<td>feature</td>\n<td>声明了新窗口要显示的标准浏览器的特征</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目。false - URL 在浏览历史中创建新的条目。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>案例 打开新窗口控制其外观样式</p>\n<p><img src=\"https://files.catbox.moe/9cmg9b.png\" alt=\"img\"></p>\n</li>\n<li><p>窗口特征表</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>channelmode=yes|no|1|0</th>\n<th>是否使用剧院模式显示窗口。默认为 no。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>directories=yes|no|1|0</td>\n<td>是否添加目录按钮。默认为 yes。</td>\n</tr>\n<tr>\n<td>fullscreen=yes|no|1|0</td>\n<td>是否使用全屏模式显示浏览器。默认是 no。处于全屏模式的窗口必须同时处于剧院模式。</td>\n</tr>\n<tr>\n<td>height=pixels</td>\n<td>窗口文档显示区的高度。以像素计。</td>\n</tr>\n<tr>\n<td>left=pixels</td>\n<td>窗口的 x 坐标。以像素计。</td>\n</tr>\n<tr>\n<td>location=yes|no|1|0</td>\n<td>是否显示地址字段。默认是 yes。</td>\n</tr>\n<tr>\n<td>menubar=yes|no|1|0</td>\n<td>是否显示菜单栏。默认是 yes。</td>\n</tr>\n<tr>\n<td>resizable=yes|no|1|0</td>\n<td>窗口是否可调节尺寸。默认是 yes。</td>\n</tr>\n<tr>\n<td>scrollbars=yes|no|1|0</td>\n<td>是否显示滚动条。默认是 yes。</td>\n</tr>\n<tr>\n<td>status=yes|no|1|0</td>\n<td>是否添加状态栏。默认是 yes。</td>\n</tr>\n<tr>\n<td>titlebar=yes|no|1|0</td>\n<td>是否显示标题栏。默认是 yes。</td>\n</tr>\n<tr>\n<td>toolbar=yes|no|1|0</td>\n<td>是否显示浏览器的工具栏。默认是 yes。</td>\n</tr>\n<tr>\n<td>top=pixels</td>\n<td>窗口的 y 坐标。</td>\n</tr>\n<tr>\n<td>width=pixels</td>\n<td>窗口的文档显示区的宽度。以像素计。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>setInterval()每隔指定的毫秒运行指定的代码/函数</p>\n</li>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/gezs9p.png\" alt=\"img\"></p>\n</li>\n<li><p>setTimeout()经过指定毫秒数运行一次指定的代码/函数</p>\n</li>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/r0dclo.png\" alt=\"img\"></p>\n</li>\n<li><p>location地址栏对象</p>\n</li>\n<li><ul>\n<li>href：设置或获取整个URL为字符串</li>\n</ul>\n</li>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/rk4u5p.png\" alt=\"img\"></p>\n</li>\n<li><p>reload()：重新加载</p>\n</li>\n<li><p>replace():用新文档替换当前文档</p>\n</li>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/e2r3lh.png\" alt=\"img\"></p>\n</li>\n</ul>\n<h5 id=\"屏幕对象（Screen）用来获取电脑屏幕的一些数据\"><a href=\"#屏幕对象（Screen）用来获取电脑屏幕的一些数据\" class=\"headerlink\" title=\"屏幕对象（Screen）用来获取电脑屏幕的一些数据\"></a>屏幕对象（Screen）用来获取电脑屏幕的一些数据</h5><ul>\n<li><ul>\n<li>availHeight：获取系统屏幕的工作区高度（浏览器的页面高度）</li>\n</ul>\n</li>\n<li><ul>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/k600si.png\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n<li><p>availWidth：获取系统屏幕的工作区宽度（浏览器页面宽度）</p>\n</li>\n<li><p>height：获取屏幕的垂直分辨率</p>\n</li>\n<li><p>width：获取屏幕的水平分辨率</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/oxiqgh.png\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DOM编程\"><a href=\"#DOM编程\" class=\"headerlink\" title=\"DOM编程\"></a>DOM编程</h2><h4 id=\"文档对象模型（document）\"><a href=\"#文档对象模型（document）\" class=\"headerlink\" title=\"文档对象模型（document）\"></a>文档对象模型（document）</h4><ul>\n<li>当一个html页面加载到浏览器的时候，那么浏览器会为每个标签都创建一个对应的对象，描述该标签的所有信息</li>\n<li>我们此时所看到的网页信息实际上就是看到了这些标签的对象信息，如果我们需要操作页面的数据，我们就可以通过这些标签对象进行操作</li>\n<li>图例</li>\n<li><img src=\"https://files.catbox.moe/29phbz.png\" alt=\"img\"></li>\n</ul>\n<h4 id=\"用来获取页面节点的方法\"><a href=\"#用来获取页面节点的方法\" class=\"headerlink\" title=\"用来获取页面节点的方法\"></a>用来获取页面节点的方法</h4><ul>\n<li><p>获取页面的所有节点：document.all；</p>\n</li>\n<li><p>nodeName:节点名字</p>\n<pre><code>var    elements =document.all;\nalert(elements);\nfor(var index = 0;index&lt;elements.length;index++)&#123;\n   alert(&quot;节点名：&quot;+elements[index].nodeName);\n&#125;\n</code></pre>\n</li>\n<li><p>通过标签属性找节点</p>\n</li>\n<li><ul>\n<li><p>document.getElementById(“标签属性id”);</p>\n</li>\n<li><p>例</p>\n<pre><code>&lt;div id=&quot;test&quot;&gt;\nwindow.onload=function()&#123;\n    var    a = document.getElementById(&quot;test&quot;);\n    alert(a);\n&#125;;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>通过标签名获取节点</p>\n</li>\n<li><ul>\n<li><p>document.getElementsByTagName(标签名);</p>\n</li>\n<li><p>注：返回的是一个数组</p>\n</li>\n<li><p>例</p>\n<pre><code>&lt;div&gt;&lt;/div&gt;\nwindow.onload=function()&#123;\n     var    a = document.getElementsByName(&quot;div&quot;);\n     alert(a);\n&#125;;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>通过标签的Name属性获取节点</p>\n</li>\n<li><ul>\n<li><p>document.getElementByName(“标签的name属性值”);</p>\n</li>\n<li><p>注：返回的是一个数组</p>\n</li>\n<li><p>例</p>\n<pre><code>&lt;div name=&quot;ElName&quot;&gt;&lt;/div&gt;\nwindow.onload=function()&#123;\n    var    a = document.getElementsByName(&quot;ElName&quot;);\n    alert(a);\n&#125;;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>通过关系找节点</p>\n</li>\n<li><ul>\n<li>document可以通过一个节点，找到与它有关的节点</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p>parentNode：获取当前元素的父节点</p>\n</li>\n<li><p>例</p>\n<pre><code>window.onload=function()&#123;\n    var    a = document.getElementById(&quot;test&quot;);\n    var    f = a.parentNode;\n    alert(f);\n    f.innerHTML=&quot;找到我了&quot;;\n&#125;;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>childNodes：获取当前元素的所有下一级子元素</p>\n<pre><code>window.onload=function()&#123;\nvar    a = document.getElementById(&quot;test&quot;);\nvar    all = a.childNodes;\nfor(var    index = 0;index&lt;all.length;index++)&#123;\n    alert(all[index].nodeName);\n    if(all[index].nodeType==1)&#123;\n       all[index].style.background=&quot;red&quot;;\n    &#125;\n &#125;\n&#125;;\n</code></pre>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>类型</strong></th>\n<th><strong>nodeType常数值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Node.ELEMENT_NODE</td>\n<td>1</td>\n<td>元素节点</td>\n</tr>\n<tr>\n<td>Node.ATTRIBUTE_NODE</td>\n<td>2</td>\n<td>属性节点</td>\n</tr>\n<tr>\n<td>Node.TEXT_NODE</td>\n<td>3</td>\n<td>文本节点</td>\n</tr>\n<tr>\n<td>Node.CDATA_SECTION_NODE</td>\n<td>4</td>\n<td>字符数据节点（文本不会被解析器解析）</td>\n</tr>\n<tr>\n<td>Node.ENTITY_REFERENCE_NODE</td>\n<td>5</td>\n<td>实体引用节点</td>\n</tr>\n<tr>\n<td>Node.ENTITY_NODE</td>\n<td>6</td>\n<td>实体节点</td>\n</tr>\n<tr>\n<td>Node.PROCESSING_INSTRUCTION_NODE</td>\n<td>7</td>\n<td>处理指令节点</td>\n</tr>\n<tr>\n<td>Node.COMMENT_NODE</td>\n<td>8</td>\n<td>注释节点</td>\n</tr>\n<tr>\n<td>Node.DOCUMENT_NODE</td>\n<td>9</td>\n<td>文档节点（DOM树的根节点）</td>\n</tr>\n<tr>\n<td>Node.DOCUMENT_TYPE_NODE</td>\n<td>10</td>\n<td>向为文档定义的实体提供接口</td>\n</tr>\n<tr>\n<td>Node.DOCUMENT_FRAGMENT_NODE</td>\n<td>11</td>\n<td>表示邻接节点和它们的子树。</td>\n</tr>\n<tr>\n<td>Node.NOTATION_NODE</td>\n<td>12</td>\n<td>代表一个符号在DTD中的声明</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>firstChild：获取当前节点的第一个子节点</p>\n</li>\n<li><p>lastChild：获取当前节点的最后一个字节点</p>\n</li>\n<li><p>nextElementSibling：获取当前节点的下一个节点（兄弟节点）</p>\n</li>\n<li><p>previousElementSibling：获取当前节点的上一个节点（兄弟节点）</p>\n</li>\n<li><p>创建，删除，插入节点</p>\n</li>\n<li><ul>\n<li><ul>\n<li>创建：var 节点 = document.creatElement(“标签名”);创建新元素节点</li>\n<li>节点 .setAttribute(“属性名”,”属性值”);</li>\n<li>节点.appendChild(e);将某个节点添加到该节点的最后位置</li>\n<li>节点.insertBefore(e,child);将某个新节点添加到该节点中，某个子节点之前</li>\n<li>节点.removeChild(要删除的子节点)；删除指定的直接点</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>节点必须为直接父节点</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p>例</p>\n<pre><code>var    trNode = document.createElement(&quot;tr&quot;);\nvar tdNode = document.createElement(&quot;td&quot;);\ntrNode.appendChild(tdNode);\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>利用节点操作css</p>\n</li>\n<li><ul>\n<li>我们可以通过上边获取节点的方式获取到节点，我们可以通过节点对象去操作标签的的样式</li>\n<li>语法</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>节点.style.要操作的样式=”值”;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"JavaScript中常用的事件\"><a href=\"#JavaScript中常用的事件\" class=\"headerlink\" title=\"JavaScript中常用的事件\"></a>JavaScript中常用的事件</h4><ul>\n<li><p>js有可以通过某些方式触发函数的执行，我们把这种方式称之为事件</p>\n</li>\n<li><p>点击事件（onclick()）</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<pre><code>&lt;script&gt;\nfunction    sp(elementid)&#123;\nvar    a = document.getElementById(elementid);\na.style.background=&quot;red&quot;;\n&#125;\n&lt;/script&gt;\n&lt;title&gt;无标题文档&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n&lt;div    id=&quot;test&quot; nzmd=&quot;ElName&quot;    style=&quot;height:100px;&quot;&gt;\n               &lt;p    id=&quot;elp&quot; onclick=&quot;sp(&#39;elp&#39;)&quot;&gt;1&lt;/p&gt;\n        &lt;a id=&quot;ela&quot;    onclick=&quot;sp(&#39;ela&#39;)&quot;&gt;2&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>鼠标进入事件（onmouseover(),onmousemove()）</p>\n</li>\n<li><p>鼠标离开事件（onmouseout()）</p>\n</li>\n</ul>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n      .box&#123;\n        width: 200px;\n        height: 500px;\n        display: none;\n      &#125;\n      .boxOne&#123;\n        background-color: red;\n      &#125;\n      .boxTwo&#123;\n        background-color: aqua;\n      &#125;\n    &lt;/style&gt;\n    &lt;script&gt;\n      function show(idName) &#123;\n        //根据id获取要显示的元素\n        var el = document.getElementById(idName);\n        el.style.display = &quot;block&quot;;\n      &#125;\n      function hide(idName) &#123;\n        var el = document.getElementById(idName);\n        el.style.display = &quot;none&quot;;\n      &#125;\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!--悬停事件：鼠标进入元素后触发--&gt;\n    &lt;!--鼠标离开事件：鼠标离开元素后触发--&gt;\n    &lt;nav&gt;\n      &lt;a href=&quot;#&quot; onmousemove=&quot;show(&#39;one&#39;)&quot; onmouseout=&quot;hide(&#39;one&#39;)&quot;&gt;导航一&lt;/a&gt;\n      &lt;a href=&quot;#&quot; onmousemove=&quot;show(&#39;two&#39;)&quot; onmouseout=&quot;hide(&#39;two&#39;)&quot;&gt;导航二&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;div class=&quot;box boxOne&quot; onmousemove=&quot;show(&#39;one&#39;)&quot; onmouseout=&quot;hide(&#39;one&#39;)&quot; id=&quot;one&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box boxTwo&quot; onmousemove=&quot;show(&#39;two&#39;)&quot; onmouseout=&quot;hide(&#39;two&#39;)&quot; id=&quot;two&quot;&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>获取焦点（onfocus()）</p>\n</li>\n<li><p>失去焦点（onblur()）</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<pre><code>&lt;script&gt;\nfunction    of()&#123;\nvar    a = document.getElementById(&quot;eli&quot;);\n   a.value=&quot;&quot;;\n&#125;\nfunction    ob()&#123;\nvar    a = document.getElementById(&quot;eli&quot;);\n   a.value=&quot;有字&quot;;\n&#125;\n&lt;/script&gt;\n&lt;title&gt;无标题文档&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n&lt;input    type=&quot;text&quot; onfocus=&quot;of()&quot; onblur=&quot;ob()&quot;    id=&quot;eli&quot;/&gt;\n&lt;/body&gt;\n&lt;script&gt;\nwindow.onload=function()&#123;\n    var    a = document.getElementById(&quot;eli&quot;);\n    a.onfocus=function()&#123;\n        a.placeholder=&quot;&quot;;\n   &#125;\n  a.onblur=function()&#123;\n      a.placeholder=&quot;有字&quot;;\n  &#125;\n&#125;\n&lt;/script&gt;\n&lt;title&gt;无标题文档&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n&lt;input    type=&quot;text&quot; id=&quot;eli&quot; placeholder=&quot;hello&quot;/&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>滚动事件(onscroll())</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<pre><code>&lt;style&gt;\n               #test&#123;\nwidth:100%;\nheight:100px;\noverflow:scroll;\nborder:1px    solid black;\n&#125;\n    &lt;/style&gt;\n&lt;script&gt;\nwindow.onload=function()&#123;\nvar    a = document.getElementById(&quot;test&quot;);\na.onscroll=function()&#123;\na.innerHTML=&quot;aaaaaa&quot;;\n&#125;;\n&#125;;\n&lt;/script&gt;\n&lt;title&gt;无标题文档&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n&lt;div    id=&quot;test&quot; &gt;\n               啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊\n    &lt;/div&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>键盘按下并松开（onkeypress()）</p>\n</li>\n<li><p>键盘按下事件（onkeydown()）</p>\n</li>\n<li><ul>\n<li>onkeypress 和 onkeydown 是有区别，下面将讲解 onkeypress 与 onkeydown 事件的区别。</li>\n<li>onkeypress 事件在用户按下并放开任何字母数字键时发生。但是系统按钮（例如：箭头键、功能键）无法得到识别。</li>\n<li>onkeydown 事件在用户按下任何键盘键（包括系统按钮）时发生。</li>\n<li>具体区别：</li>\n<li>\\1. 一个放开一个没有放开，onkeydown 先于 onkeypress 发生。</li>\n<li>2.onkeypress 无法识别系统按钮。</li>\n<li>2.onkeydown 捕获的 keyCode 不区分字母大小，而 onkeypress 区分。</li>\n</ul>\n</li>\n<li><p>键盘抬起事件（onkeyup()）</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<pre><code>&lt;body&gt;\n&lt;input type=&quot;text&quot; id=&quot;txt&quot;&gt;\n&lt;script&gt;\n    document.getElementById(&quot;txt&quot;).onkeydown = function () &#123;\n        console.log(&quot;键盘按下了&quot;);\n    &#125;;\n    document.getElementById(&quot;txt&quot;).onkeyup = function () &#123;\n        console.log(&quot;键盘抬起了&quot;);\n    &#125;;\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>keyCode获取按下的键</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>数字值</strong></th>\n<th><strong>实际键值</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>48到57</td>\n<td>0到9</td>\n</tr>\n<tr>\n<td>65到90</td>\n<td>a到z（A到Z）</td>\n</tr>\n<tr>\n<td>112到135</td>\n<td>F1到F12</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BackSpace（退格）</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Tab</td>\n</tr>\n<tr>\n<td>13</td>\n<td>Enter（回车）</td>\n</tr>\n<tr>\n<td>20</td>\n<td>Caps_Lock（大写锁定）</td>\n</tr>\n<tr>\n<td>32</td>\n<td>Space（空格键）</td>\n</tr>\n<tr>\n<td>37</td>\n<td>Left（左箭头）</td>\n</tr>\n<tr>\n<td>38</td>\n<td>Up（上箭头）</td>\n</tr>\n<tr>\n<td>39</td>\n<td>Right（右箭头）</td>\n</tr>\n<tr>\n<td>40</td>\n<td>Down（下箭头）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>案例</p>\n<pre><code>&lt;script&gt;\n    //页面的任何的位置.按下键盘,获取按键的值\n    document.onkeydown = function (e) &#123;\n        switch (e.keyCode) &#123;\n            case 81:\n                console.log(&quot;您按下的是Q&quot;);\n                break;\n            case 87:\n                console.log(&quot;您按下的是W&quot;);\n                break;\n            case 69:\n                console.log(&quot;您按下的是E&quot;);\n                break;\n            case 82:\n                console.log(&quot;您按下的是R&quot;);\n                break;\n        &#125;\n    &#125;;\n&lt;/script&gt;\n</code></pre>\n</li>\n<li><p>onmousedown / onmouseup 鼠标按下/抬起事件</p>\n</li>\n<li><ul>\n<li>当鼠标左键或右键按下或者抬起的时候触发</li>\n<li>按下或抬起滚动轮也会触发，滑动滚动轮不能触发</li>\n<li>如果鼠标比较高级，有其他按键的情况下，按下或抬起也会触发</li>\n<li>案例</li>\n</ul>\n</li>\n</ul>\n<pre><code>&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        div &#123;\n            width: 50px;\n            height: 50px;\n            background-color: pink;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=&quot;dv&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\n    document.getElementById(&quot;dv&quot;).onmousedown = function () &#123;\n        console.log(&quot;鼠标按下了&quot;);\n    &#125;;\n    document.getElementById(&quot;dv&quot;).onmouseup = function () &#123;\n        console.log(&quot;鼠标抬起了&quot;);\n    &#125;;\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>(十二)JavaScript BOM与DOM</p>","more":"<h1 id=\"第十二章-JavaScript-BOM与DOM\"><a href=\"#第十二章-JavaScript-BOM与DOM\" class=\"headerlink\" title=\"第十二章 JavaScript BOM与DOM\"></a>第十二章 JavaScript BOM与DOM</h1><h2 id=\"BOM（borwser-object-Model）\"><a href=\"#BOM（borwser-object-Model）\" class=\"headerlink\" title=\"BOM（borwser object Model）\"></a>BOM（borwser object Model）</h2><h4 id=\"浏览器对象模型\"><a href=\"#浏览器对象模型\" class=\"headerlink\" title=\"浏览器对象模型\"></a>浏览器对象模型</h4><ul>\n<li><ul>\n<li>使用对象描述浏览器的各个部分</li>\n<li>BOM提供与浏览器窗口交互的对象</li>\n<li>BOM主要用于管理窗口与窗口之间的通讯，所以核心对象是窗口（window）</li>\n</ul>\n</li>\n<li><p>BOM里有什么</p>\n</li>\n<li><ul>\n<li><p>图示</p>\n<p><img src=\"https://files.catbox.moe/ccpeyl.png\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>与浏览器进行交互的一些对象</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>移动，调整浏览器大小的window对象</li>\n<li>用于导航的location对象history</li>\n<li>获取浏览器，用户屏幕信息的navigator与screen对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h5><ul>\n<li><ul>\n<li>open()方法用于打开一个新窗口或查找一个窗口</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>语法</li>\n<li>window.open(url,name,feature,replace)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>url</td>\n<td>声明要在新窗口中显示文档的url</td>\n</tr>\n<tr>\n<td>name</td>\n<td>该字符声明了新窗口的名称。这个名称可以用作标记 和的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</td>\n</tr>\n<tr>\n<td>feature</td>\n<td>声明了新窗口要显示的标准浏览器的特征</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目。false - URL 在浏览历史中创建新的条目。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>案例 打开新窗口控制其外观样式</p>\n<p><img src=\"https://files.catbox.moe/9cmg9b.png\" alt=\"img\"></p>\n</li>\n<li><p>窗口特征表</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>channelmode=yes|no|1|0</th>\n<th>是否使用剧院模式显示窗口。默认为 no。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>directories=yes|no|1|0</td>\n<td>是否添加目录按钮。默认为 yes。</td>\n</tr>\n<tr>\n<td>fullscreen=yes|no|1|0</td>\n<td>是否使用全屏模式显示浏览器。默认是 no。处于全屏模式的窗口必须同时处于剧院模式。</td>\n</tr>\n<tr>\n<td>height=pixels</td>\n<td>窗口文档显示区的高度。以像素计。</td>\n</tr>\n<tr>\n<td>left=pixels</td>\n<td>窗口的 x 坐标。以像素计。</td>\n</tr>\n<tr>\n<td>location=yes|no|1|0</td>\n<td>是否显示地址字段。默认是 yes。</td>\n</tr>\n<tr>\n<td>menubar=yes|no|1|0</td>\n<td>是否显示菜单栏。默认是 yes。</td>\n</tr>\n<tr>\n<td>resizable=yes|no|1|0</td>\n<td>窗口是否可调节尺寸。默认是 yes。</td>\n</tr>\n<tr>\n<td>scrollbars=yes|no|1|0</td>\n<td>是否显示滚动条。默认是 yes。</td>\n</tr>\n<tr>\n<td>status=yes|no|1|0</td>\n<td>是否添加状态栏。默认是 yes。</td>\n</tr>\n<tr>\n<td>titlebar=yes|no|1|0</td>\n<td>是否显示标题栏。默认是 yes。</td>\n</tr>\n<tr>\n<td>toolbar=yes|no|1|0</td>\n<td>是否显示浏览器的工具栏。默认是 yes。</td>\n</tr>\n<tr>\n<td>top=pixels</td>\n<td>窗口的 y 坐标。</td>\n</tr>\n<tr>\n<td>width=pixels</td>\n<td>窗口的文档显示区的宽度。以像素计。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>setInterval()每隔指定的毫秒运行指定的代码/函数</p>\n</li>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/gezs9p.png\" alt=\"img\"></p>\n</li>\n<li><p>setTimeout()经过指定毫秒数运行一次指定的代码/函数</p>\n</li>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/r0dclo.png\" alt=\"img\"></p>\n</li>\n<li><p>location地址栏对象</p>\n</li>\n<li><ul>\n<li>href：设置或获取整个URL为字符串</li>\n</ul>\n</li>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/rk4u5p.png\" alt=\"img\"></p>\n</li>\n<li><p>reload()：重新加载</p>\n</li>\n<li><p>replace():用新文档替换当前文档</p>\n</li>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/e2r3lh.png\" alt=\"img\"></p>\n</li>\n</ul>\n<h5 id=\"屏幕对象（Screen）用来获取电脑屏幕的一些数据\"><a href=\"#屏幕对象（Screen）用来获取电脑屏幕的一些数据\" class=\"headerlink\" title=\"屏幕对象（Screen）用来获取电脑屏幕的一些数据\"></a>屏幕对象（Screen）用来获取电脑屏幕的一些数据</h5><ul>\n<li><ul>\n<li>availHeight：获取系统屏幕的工作区高度（浏览器的页面高度）</li>\n</ul>\n</li>\n<li><ul>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/k600si.png\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n<li><p>availWidth：获取系统屏幕的工作区宽度（浏览器页面宽度）</p>\n</li>\n<li><p>height：获取屏幕的垂直分辨率</p>\n</li>\n<li><p>width：获取屏幕的水平分辨率</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<p><img src=\"https://files.catbox.moe/oxiqgh.png\" alt=\"img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DOM编程\"><a href=\"#DOM编程\" class=\"headerlink\" title=\"DOM编程\"></a>DOM编程</h2><h4 id=\"文档对象模型（document）\"><a href=\"#文档对象模型（document）\" class=\"headerlink\" title=\"文档对象模型（document）\"></a>文档对象模型（document）</h4><ul>\n<li>当一个html页面加载到浏览器的时候，那么浏览器会为每个标签都创建一个对应的对象，描述该标签的所有信息</li>\n<li>我们此时所看到的网页信息实际上就是看到了这些标签的对象信息，如果我们需要操作页面的数据，我们就可以通过这些标签对象进行操作</li>\n<li>图例</li>\n<li><img src=\"https://files.catbox.moe/29phbz.png\" alt=\"img\"></li>\n</ul>\n<h4 id=\"用来获取页面节点的方法\"><a href=\"#用来获取页面节点的方法\" class=\"headerlink\" title=\"用来获取页面节点的方法\"></a>用来获取页面节点的方法</h4><ul>\n<li><p>获取页面的所有节点：document.all；</p>\n</li>\n<li><p>nodeName:节点名字</p>\n<pre><code>var    elements =document.all;\nalert(elements);\nfor(var index = 0;index&lt;elements.length;index++)&#123;\n   alert(&quot;节点名：&quot;+elements[index].nodeName);\n&#125;\n</code></pre>\n</li>\n<li><p>通过标签属性找节点</p>\n</li>\n<li><ul>\n<li><p>document.getElementById(“标签属性id”);</p>\n</li>\n<li><p>例</p>\n<pre><code>&lt;div id=&quot;test&quot;&gt;\nwindow.onload=function()&#123;\n    var    a = document.getElementById(&quot;test&quot;);\n    alert(a);\n&#125;;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>通过标签名获取节点</p>\n</li>\n<li><ul>\n<li><p>document.getElementsByTagName(标签名);</p>\n</li>\n<li><p>注：返回的是一个数组</p>\n</li>\n<li><p>例</p>\n<pre><code>&lt;div&gt;&lt;/div&gt;\nwindow.onload=function()&#123;\n     var    a = document.getElementsByName(&quot;div&quot;);\n     alert(a);\n&#125;;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>通过标签的Name属性获取节点</p>\n</li>\n<li><ul>\n<li><p>document.getElementByName(“标签的name属性值”);</p>\n</li>\n<li><p>注：返回的是一个数组</p>\n</li>\n<li><p>例</p>\n<pre><code>&lt;div name=&quot;ElName&quot;&gt;&lt;/div&gt;\nwindow.onload=function()&#123;\n    var    a = document.getElementsByName(&quot;ElName&quot;);\n    alert(a);\n&#125;;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>通过关系找节点</p>\n</li>\n<li><ul>\n<li>document可以通过一个节点，找到与它有关的节点</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p>parentNode：获取当前元素的父节点</p>\n</li>\n<li><p>例</p>\n<pre><code>window.onload=function()&#123;\n    var    a = document.getElementById(&quot;test&quot;);\n    var    f = a.parentNode;\n    alert(f);\n    f.innerHTML=&quot;找到我了&quot;;\n&#125;;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>childNodes：获取当前元素的所有下一级子元素</p>\n<pre><code>window.onload=function()&#123;\nvar    a = document.getElementById(&quot;test&quot;);\nvar    all = a.childNodes;\nfor(var    index = 0;index&lt;all.length;index++)&#123;\n    alert(all[index].nodeName);\n    if(all[index].nodeType==1)&#123;\n       all[index].style.background=&quot;red&quot;;\n    &#125;\n &#125;\n&#125;;\n</code></pre>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>类型</strong></th>\n<th><strong>nodeType常数值</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Node.ELEMENT_NODE</td>\n<td>1</td>\n<td>元素节点</td>\n</tr>\n<tr>\n<td>Node.ATTRIBUTE_NODE</td>\n<td>2</td>\n<td>属性节点</td>\n</tr>\n<tr>\n<td>Node.TEXT_NODE</td>\n<td>3</td>\n<td>文本节点</td>\n</tr>\n<tr>\n<td>Node.CDATA_SECTION_NODE</td>\n<td>4</td>\n<td>字符数据节点（文本不会被解析器解析）</td>\n</tr>\n<tr>\n<td>Node.ENTITY_REFERENCE_NODE</td>\n<td>5</td>\n<td>实体引用节点</td>\n</tr>\n<tr>\n<td>Node.ENTITY_NODE</td>\n<td>6</td>\n<td>实体节点</td>\n</tr>\n<tr>\n<td>Node.PROCESSING_INSTRUCTION_NODE</td>\n<td>7</td>\n<td>处理指令节点</td>\n</tr>\n<tr>\n<td>Node.COMMENT_NODE</td>\n<td>8</td>\n<td>注释节点</td>\n</tr>\n<tr>\n<td>Node.DOCUMENT_NODE</td>\n<td>9</td>\n<td>文档节点（DOM树的根节点）</td>\n</tr>\n<tr>\n<td>Node.DOCUMENT_TYPE_NODE</td>\n<td>10</td>\n<td>向为文档定义的实体提供接口</td>\n</tr>\n<tr>\n<td>Node.DOCUMENT_FRAGMENT_NODE</td>\n<td>11</td>\n<td>表示邻接节点和它们的子树。</td>\n</tr>\n<tr>\n<td>Node.NOTATION_NODE</td>\n<td>12</td>\n<td>代表一个符号在DTD中的声明</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>firstChild：获取当前节点的第一个子节点</p>\n</li>\n<li><p>lastChild：获取当前节点的最后一个字节点</p>\n</li>\n<li><p>nextElementSibling：获取当前节点的下一个节点（兄弟节点）</p>\n</li>\n<li><p>previousElementSibling：获取当前节点的上一个节点（兄弟节点）</p>\n</li>\n<li><p>创建，删除，插入节点</p>\n</li>\n<li><ul>\n<li><ul>\n<li>创建：var 节点 = document.creatElement(“标签名”);创建新元素节点</li>\n<li>节点 .setAttribute(“属性名”,”属性值”);</li>\n<li>节点.appendChild(e);将某个节点添加到该节点的最后位置</li>\n<li>节点.insertBefore(e,child);将某个新节点添加到该节点中，某个子节点之前</li>\n<li>节点.removeChild(要删除的子节点)；删除指定的直接点</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>节点必须为直接父节点</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><p>例</p>\n<pre><code>var    trNode = document.createElement(&quot;tr&quot;);\nvar tdNode = document.createElement(&quot;td&quot;);\ntrNode.appendChild(tdNode);\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>利用节点操作css</p>\n</li>\n<li><ul>\n<li>我们可以通过上边获取节点的方式获取到节点，我们可以通过节点对象去操作标签的的样式</li>\n<li>语法</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>节点.style.要操作的样式=”值”;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"JavaScript中常用的事件\"><a href=\"#JavaScript中常用的事件\" class=\"headerlink\" title=\"JavaScript中常用的事件\"></a>JavaScript中常用的事件</h4><ul>\n<li><p>js有可以通过某些方式触发函数的执行，我们把这种方式称之为事件</p>\n</li>\n<li><p>点击事件（onclick()）</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<pre><code>&lt;script&gt;\nfunction    sp(elementid)&#123;\nvar    a = document.getElementById(elementid);\na.style.background=&quot;red&quot;;\n&#125;\n&lt;/script&gt;\n&lt;title&gt;无标题文档&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n&lt;div    id=&quot;test&quot; nzmd=&quot;ElName&quot;    style=&quot;height:100px;&quot;&gt;\n               &lt;p    id=&quot;elp&quot; onclick=&quot;sp(&#39;elp&#39;)&quot;&gt;1&lt;/p&gt;\n        &lt;a id=&quot;ela&quot;    onclick=&quot;sp(&#39;ela&#39;)&quot;&gt;2&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>鼠标进入事件（onmouseover(),onmousemove()）</p>\n</li>\n<li><p>鼠标离开事件（onmouseout()）</p>\n</li>\n</ul>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n      .box&#123;\n        width: 200px;\n        height: 500px;\n        display: none;\n      &#125;\n      .boxOne&#123;\n        background-color: red;\n      &#125;\n      .boxTwo&#123;\n        background-color: aqua;\n      &#125;\n    &lt;/style&gt;\n    &lt;script&gt;\n      function show(idName) &#123;\n        //根据id获取要显示的元素\n        var el = document.getElementById(idName);\n        el.style.display = &quot;block&quot;;\n      &#125;\n      function hide(idName) &#123;\n        var el = document.getElementById(idName);\n        el.style.display = &quot;none&quot;;\n      &#125;\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!--悬停事件：鼠标进入元素后触发--&gt;\n    &lt;!--鼠标离开事件：鼠标离开元素后触发--&gt;\n    &lt;nav&gt;\n      &lt;a href=&quot;#&quot; onmousemove=&quot;show(&#39;one&#39;)&quot; onmouseout=&quot;hide(&#39;one&#39;)&quot;&gt;导航一&lt;/a&gt;\n      &lt;a href=&quot;#&quot; onmousemove=&quot;show(&#39;two&#39;)&quot; onmouseout=&quot;hide(&#39;two&#39;)&quot;&gt;导航二&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;div class=&quot;box boxOne&quot; onmousemove=&quot;show(&#39;one&#39;)&quot; onmouseout=&quot;hide(&#39;one&#39;)&quot; id=&quot;one&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box boxTwo&quot; onmousemove=&quot;show(&#39;two&#39;)&quot; onmouseout=&quot;hide(&#39;two&#39;)&quot; id=&quot;two&quot;&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ul>\n<li><p>获取焦点（onfocus()）</p>\n</li>\n<li><p>失去焦点（onblur()）</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<pre><code>&lt;script&gt;\nfunction    of()&#123;\nvar    a = document.getElementById(&quot;eli&quot;);\n   a.value=&quot;&quot;;\n&#125;\nfunction    ob()&#123;\nvar    a = document.getElementById(&quot;eli&quot;);\n   a.value=&quot;有字&quot;;\n&#125;\n&lt;/script&gt;\n&lt;title&gt;无标题文档&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n&lt;input    type=&quot;text&quot; onfocus=&quot;of()&quot; onblur=&quot;ob()&quot;    id=&quot;eli&quot;/&gt;\n&lt;/body&gt;\n&lt;script&gt;\nwindow.onload=function()&#123;\n    var    a = document.getElementById(&quot;eli&quot;);\n    a.onfocus=function()&#123;\n        a.placeholder=&quot;&quot;;\n   &#125;\n  a.onblur=function()&#123;\n      a.placeholder=&quot;有字&quot;;\n  &#125;\n&#125;\n&lt;/script&gt;\n&lt;title&gt;无标题文档&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n&lt;input    type=&quot;text&quot; id=&quot;eli&quot; placeholder=&quot;hello&quot;/&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>滚动事件(onscroll())</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<pre><code>&lt;style&gt;\n               #test&#123;\nwidth:100%;\nheight:100px;\noverflow:scroll;\nborder:1px    solid black;\n&#125;\n    &lt;/style&gt;\n&lt;script&gt;\nwindow.onload=function()&#123;\nvar    a = document.getElementById(&quot;test&quot;);\na.onscroll=function()&#123;\na.innerHTML=&quot;aaaaaa&quot;;\n&#125;;\n&#125;;\n&lt;/script&gt;\n&lt;title&gt;无标题文档&lt;/title&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n&lt;div    id=&quot;test&quot; &gt;\n               啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊\n    &lt;/div&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>键盘按下并松开（onkeypress()）</p>\n</li>\n<li><p>键盘按下事件（onkeydown()）</p>\n</li>\n<li><ul>\n<li>onkeypress 和 onkeydown 是有区别，下面将讲解 onkeypress 与 onkeydown 事件的区别。</li>\n<li>onkeypress 事件在用户按下并放开任何字母数字键时发生。但是系统按钮（例如：箭头键、功能键）无法得到识别。</li>\n<li>onkeydown 事件在用户按下任何键盘键（包括系统按钮）时发生。</li>\n<li>具体区别：</li>\n<li>\\1. 一个放开一个没有放开，onkeydown 先于 onkeypress 发生。</li>\n<li>2.onkeypress 无法识别系统按钮。</li>\n<li>2.onkeydown 捕获的 keyCode 不区分字母大小，而 onkeypress 区分。</li>\n</ul>\n</li>\n<li><p>键盘抬起事件（onkeyup()）</p>\n</li>\n<li><ul>\n<li><p>案例</p>\n<pre><code>&lt;body&gt;\n&lt;input type=&quot;text&quot; id=&quot;txt&quot;&gt;\n&lt;script&gt;\n    document.getElementById(&quot;txt&quot;).onkeydown = function () &#123;\n        console.log(&quot;键盘按下了&quot;);\n    &#125;;\n    document.getElementById(&quot;txt&quot;).onkeyup = function () &#123;\n        console.log(&quot;键盘抬起了&quot;);\n    &#125;;\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>keyCode获取按下的键</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>数字值</strong></th>\n<th><strong>实际键值</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>48到57</td>\n<td>0到9</td>\n</tr>\n<tr>\n<td>65到90</td>\n<td>a到z（A到Z）</td>\n</tr>\n<tr>\n<td>112到135</td>\n<td>F1到F12</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BackSpace（退格）</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Tab</td>\n</tr>\n<tr>\n<td>13</td>\n<td>Enter（回车）</td>\n</tr>\n<tr>\n<td>20</td>\n<td>Caps_Lock（大写锁定）</td>\n</tr>\n<tr>\n<td>32</td>\n<td>Space（空格键）</td>\n</tr>\n<tr>\n<td>37</td>\n<td>Left（左箭头）</td>\n</tr>\n<tr>\n<td>38</td>\n<td>Up（上箭头）</td>\n</tr>\n<tr>\n<td>39</td>\n<td>Right（右箭头）</td>\n</tr>\n<tr>\n<td>40</td>\n<td>Down（下箭头）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>案例</p>\n<pre><code>&lt;script&gt;\n    //页面的任何的位置.按下键盘,获取按键的值\n    document.onkeydown = function (e) &#123;\n        switch (e.keyCode) &#123;\n            case 81:\n                console.log(&quot;您按下的是Q&quot;);\n                break;\n            case 87:\n                console.log(&quot;您按下的是W&quot;);\n                break;\n            case 69:\n                console.log(&quot;您按下的是E&quot;);\n                break;\n            case 82:\n                console.log(&quot;您按下的是R&quot;);\n                break;\n        &#125;\n    &#125;;\n&lt;/script&gt;\n</code></pre>\n</li>\n<li><p>onmousedown / onmouseup 鼠标按下/抬起事件</p>\n</li>\n<li><ul>\n<li>当鼠标左键或右键按下或者抬起的时候触发</li>\n<li>按下或抬起滚动轮也会触发，滑动滚动轮不能触发</li>\n<li>如果鼠标比较高级，有其他按键的情况下，按下或抬起也会触发</li>\n<li>案例</li>\n</ul>\n</li>\n</ul>\n<pre><code>&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;style&gt;\n        div &#123;\n            width: 50px;\n            height: 50px;\n            background-color: pink;\n        &#125;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=&quot;dv&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\n    document.getElementById(&quot;dv&quot;).onmousedown = function () &#123;\n        console.log(&quot;鼠标按下了&quot;);\n    &#125;;\n    document.getElementById(&quot;dv&quot;).onmouseup = function () &#123;\n        console.log(&quot;鼠标抬起了&quot;);\n    &#125;;\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>"},{"title":"(十)JavaScript基础","date":"2022-07-08T12:25:49.000Z","cover":"https://tse4-mm.cn.bing.net/th/id/OIP-C.lNqh_BOnndzbRVu0hCOSIgHaCm?pid=ImgDet&rs=1","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"(十)JavaScript基础\n<!--more-->\n\n## 10.1 概述\n\nJavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。\n\n- 是一种解释性脚本语言（代码不进行预编译）。\n- 主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。\n- 可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。\n- 跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。\n\nJavascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。\n\n## 10.2 JavaScript能做什么\n\n- 使网页具有交互性，例如响应用户点击，给用户提供更好的体验\n- 可以处理表单，检验用户的输入，并提供及时反馈节省用户时间。例如，表单中要你输入电子邮箱而你却输入一个手机号，那么应该给你一个提醒。\n- 还可以根据用户的操作，动态的创建页面。例如，发邮件时，添加附件操作。\n- 设置cookie，cookie是存储在浏览器上的一些临时信息，例如你浏览过的网站地址，使用过的用户名\n- JavaScript 是有规律地重复的HTML元素简化，减少下载时间。\n- 浏览器与服务器进行数据通讯，比如现在最流行的Ajax异步传输；\n\n## 10.3 JavaScript构成\n\n- JavaScript由以下三部分组成：\n\n- - ECMAScript，它用来描述语法和基本对象\n  - 文档对象模型Doucment Object       Model（DOM），用来处理网页内容\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651195487-efff79bc-a3b0-45b8-9a7a-faf1c6d7abda.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 浏览器对象模型Borwser Object Model（BOM），用来处理浏览器交互\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651202360-0b177732-6264-4def-9a1b-fdda98bbc257.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n## 10.4 JavaScript的开发环境与运行环境\n\n- JavaScript为轻型脚本语言，可在任意文本编辑器中编辑\n- 由于JavaScript是内嵌在HTML中执行，所以其运行环境即浏览器\n\n## 10.5 JavaScript的使用\n\n- JavaScript需在HTML中内嵌运行，其内嵌方式有两种：\n\n- - 在网页中创建\\<script>\\</script>,在标签之间写JavaScript代码\n\n```javascript\n<script>\n  \talert(\"hello world\")\n<script>\n```\n\n- - 在外部创建“.js”文件，通过\\<script src=\"文件路径\">引入到HTML文件中执行\n\n```html\n<head>\n\t<script src=\"xxx/xxx.js\"></script>\n</head>\n```\n\n## 10.6 JavaScript基础\n\n- 值\n\n- - 数字类型的值（数字）\n  - 算术值（加减乘除等运算，需要两个或两个以上的数字）\n  - 特殊数字\n\n- - - 在JavaScript中有三个特殊数值，他们被视为数字，但其行为不像普通数字那样\n    - Infinity和-Infinity表示正无穷大和负无穷大\n    - NaN代表不是数字，就是不当的算数运算得到不当的值（比如：0/0或者Infinity-Infinity都会得到这样的值）\n\n- - 字符串（用于表示文本，使用引号引起来即可）\n\n- - - 在字符串中还需要注意\n\n- - - - 在引号中添加特殊字符时比较难加，但是只需要添加反引号”`“就可解决这个问题\n\nconsole.log(`hello my   \"son\"`);\n\n- 转义符（\\）\n\n- - 出现在引用文本中，表示后面有特殊字符\n  - 换行符（\\n）\n  - 制表符（\\t）\n  - 如果希望字符串中的斜杠只是斜杠，可以使用两个斜杠\n\nconsole.log(\"l   input \\\"\\\\n\\\"\");\n\n- 运算符\n\n- - 一元运算符\n\n- - - 在JavaScript中并非所有的运算符都是由符号构成的，还有由单词构成的符号，如：typeof运算符用来生成一个字符串，表示你输入数据的类型\n\nconsole.log(typeof   2.2);console.log(typeof   \"hello\");\n\n- 布尔值\n\n- - 比较运算符（>,<,<=,<=……）\n\n- - - 比较运算符属于二元运算符\n\nconsole.log(1<2)\n\n- 字符串也是可以比较的\n\n| console.log(a>b)                                             |\n| ------------------------------------------------------------ |\n| 字符串在比较时大致时按照字母的顺序比较，而小写字母的大于大写字母，在字符串比较是JavaScript从左道右遍历字符按照字母的unicode编码进行比较 |\n| 注意：在JavaScript中只有一个值不等于它自己，他就是NaN（不是数字）console.log(NaN==NaN)返回false |\n\n- 逻辑运算符（与，或，非）\n\n- - &&:表示逻辑与，表示结果为真才为真\n\n| console.log(true&&false) | false |\n| ------------------------ | ----- |\n| console.log(true&&true)  | true  |\n|                          |       |\n\n- - ||：表示逻辑或，表示一个为真，则为真\n\n| console.log(true\\|\\|false)  | true  |\n| --------------------------- | ----- |\n| console.log(false\\|\\|false) | false |\n\n- - !：表示逻辑非，表示取反\n  - 在上边两种运算符混合使用时需要注意他们的优先级，一般情况下是,||具有最低优先级，然后时&&，然后是比较运算符，再然后时其他运算符\n  - 三元运算符，由问号和冒号写成\n\n| console.log(true?1:2)  |\n| ---------------------- |\n| console.log(false?1:2) |\n\n- 空值\n\n- - 再JavaScript中使用null和undefined表示空值\n\n- 自动类型转换\n\n- - JavaScript的包容性时相当高的，几乎可以接受你给他的任何程序\n  - 当运算符应用不同类型的值时，JavaScript会使用一组规则自动将值转换成所需要的类型供你使用（强制类型转换）\n\n| console.log(8*null)-->0             |\n| ----------------------------------- |\n| console.log(\"3\"-1)-->2              |\n| console.log(\"3\"+1)-->31             |\n| console.log(\"six\"*1)-->NaN          |\n| console.log(false==0)-->true        |\n| console.log(null==undefined)-->true |\n| console.log(null==0)-->false        |\n\n- 表达式\n\n- - 生成值得代码片段称之为表达式\n\nconsole.log(1+1);\n\n- 绑定（变量）\n\n- - ·JavaScript为了让程序中得数据保持提供了一个称为绑定（binding）或变量（variable）得东西\n\n- - - let属于JavaScript关键字表示将定义一个绑定，它得后面是绑定名称，如果我们想给它一个值，则由\"=\"运算符和表达式来完成\n\n| let a =   1*2                         |\n| ------------------------------------- |\n| let num =   10; console.log(num*num); |\n\n- - - 当绑定值指向一个值时并部意味着它永远时该值，\"=\"运算符随时可以更新绑定赋予绑定新值\n\nlet   name=\"张三\";conlose.log(name);name   = \"李四\";console.log(name);\n\n- - - 在JavaScript中不单单可以使用let去做绑定,var和const两个也可以用于绑定\n\n| var   name=\"hello\";console.log(name);                        |\n| ------------------------------------------------------------ |\n| const demo   = \"world\";console.log(demo);                    |\n| console.log(name+demo);                                      |\n| 注：1.var全称(variable)表示变量，多用于以前得JavaScript中声明绑定2.const全称（constant），表示定义一个常量绑定，只要它存在，它就一直指向相同得值 |\n\n- JavaScript语句\n\n- - JavaScript语句是发给浏览器的命令\n  - 这些命令的作用是告诉浏览器要做的事情\n  - 比如\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652275534-6e34e0ea-ce7f-4cb2-b9f5-a303441fbb5b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652282839-d8f3b6f0-bb99-4311-af61-9ec9d1d592a7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| 解析：点击hello world后，触发JavaScript点击事件（onclick点击事件，点击后innerHTML替换标签里的内容，即把”hello world“替换成“世界 你好”） |\n\n- 分号\n\n- - 分号用于分隔JavaScript语句\n  - 通常我们在每条可执行的语句结尾添加分号，代表作一句JavaScript语句的结束\n  - 使用分号的另一个好处就是。。。。能在一行多写点代码嘛\n\n- JavaScript代码\n\n- - JavaScript代码是JavaScript语句的序列\n  - 浏览器按照编写顺序依次执行每条语句\n\n- JavaScript代码块\n\n- - JavaScript可以分批地组合起来\n  - 代码块以左花括号开始，以右花括号结束\n  - 代码块的作用是一并执行语句序列\n\n- 示例\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652313702-584a551d-bd15-4e8c-873f-304b09194343.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652326450-8100dccd-e3b6-4e7d-afbc-1246a23c2fc5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n- JavaScript语句标识符\n\n- - JavaScript语句通常以一个语句标识符为开始，并执行该语句。\n  - 语句标识符是保留关键字不能作为变量名使用\n  - JavaScript语句标识符（关键字）\n\n| 语句       | 描述                                                         |\n| ---------- | ------------------------------------------------------------ |\n| break      | 用于跳出循环                                                 |\n| catch      | 语句块，在try语句块执行出错时执行catch语句块                 |\n| continue   | 跳过循环的一个迭代                                           |\n| do...while | 执行一个语句块，在条件语句为true时继续执行该语句块           |\n| for        | 在条件语句为true时，可以将代码块执行指定的次数               |\n| for...in   | 用于遍历数组或对象的属性（对数组或者对象的属性进行循环操作） |\n| function   | 定义一个函数                                                 |\n| if...else  | 用于基于不同的条件来执行不同的动作                           |\n| return     | 退出函数                                                     |\n| switch     | 用于基于不同条件来执行不同的动作                             |\n| throw      | 抛出错误                                                     |\n| try        | 实现错误处理，与catch一同使用                                |\n| var        | 声明一个变量                                                 |\n| while      | 当条件语句为true时，执行语句块                               |\n\n- 代码折行\n\n| document.write(\"hello   \\ world\")； | 但是不能这么折行document.write\\(\"hello world\")； |\n| ----------------------------------- | ------------------------------------------------ |\n|                                     |                                                  |\n\n## 10.7 JavaScript数据类型\n\n- javascript属于弱语言，它的变量没有明确的数据类型，它的数据类型是由它存储的值自己推断出来的\n- 常见数据类型\n\n| **数据类型** | **具体描述**                   |\n| ------------ | ------------------------------ |\n| number       | 能存储整数和小数类型           |\n| string       | 用单引号或双引号来声明的字符串 |\n| boolean      | 只能是两个值选择：true、false  |\n| undefined    | 变量被声明后，但未被赋值       |\n| object       | javascript中的对象、数组和null |\n\n- 在JavaScript中可以使用typeof()函数来检查变量的返回值类型\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655653508-92e34507-ef26-46c0-92e5-fd7054983ad7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- JavaScript拥有动态类型，这意味着相同的变量可用作不同的类型\n\nvar x；//x为undefinedvar   x = 5；//x为数字var   x = \"hello\";//x为字符串\n\n- JavaScript字符串\n\n- - 字符串是存储字符的变量\n  - 字符串可以是引号中的任意文本。可以使用单引号或者双引号\n\nvar name =   \"tom\";var name =   'tom';\n\n- 也可以在字符串中使用引号，只要不匹配包围字符串的引号即可\n\nvar answer   = \"let'go\";var answer   = \"my name is 'tom' \";\n\n- JavaScript数字\n\n- - JavaScript只有一种数字类型。数字可以带小数点。\n\nvar a = 3;var b =   3.14;\n\n- 极大或极小的数字可以通过科学计数来书写\n\n| var a =   123e5;//12300000 |\n| -------------------------- |\n| var b =   123e-5;//0.00123 |\n\n- JavaScript布尔\n\n- - 布尔（逻辑）只能有两个值：true或false\n\nvar a =   false;var b =   true;\n\n- 布尔常用在条件测试中。这个我们将在之后详解\n- JavaScript数组\n\n- - 详见10.8节\n\n- JavaScript对象\n\n- - 详见10.9节\n  - 对象由花括号分隔。在扩号内部，对象的属性以名称和值对的形式（键值对 name：value）来定义，属性由逗号分隔\n  - 对象有两种寻址方式：\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655910721-0a48b0a7-993c-45ca-a851-9d8a9f0216b6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655916757-28032444-e669-4911-8a08-0adc9bd721a0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- Undefined和Null\n\n- - Undefined表示变量不含值\n  - Null可以通过将变量的值设置为Null来清空变量\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655925751-c01fd5d4-f3f1-4a93-b80f-4aff98f02075.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655944042-42c54dea-cfb9-4ae5-b05b-700a4977857f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- 声明变量类型\n\n- - 当声明新变量时，可以使用关键词“new”来声明其类型\n\nvar   name = new String; var age   = new Number;var   money = new boolean;var   cars = new Arrays;var   person = new Object;\n\n## 10.8 数组\n\n- 什么是数组\n\n- - 数组对象是使用单独的变量名来存储一系列相同类型的值\n  - 数字可以用一个变量名存储所有的值，并且可以用变量名访问任何一个值\n  - 数组中的每个元素都有自己的ID，以便它可以很容易地被访问到\n\n- 创建数组，有几种不同的方式\n\n- - 常规方式\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656318089-149f266a-0657-417b-8911-de077af3a0f9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 简洁方式\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656324807-3401185c-a1b8-4ed5-beb7-cf10312d944f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 字面方式\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656333229-64159517-3a00-411f-9c39-8fd82965fabd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 访问数组\n\n- - 通过上边的几个例子，大家应该能看出来数组是怎么访问的\n  - 语法：数组名[下标] \n\narr[1]\n\n- - 在数组中[0]代表数组的第一个元素，[1]则代表的是第二个元素\n\n- 来个数组式循环弹窗看看\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656416554-a1696c63-5193-447f-8671-1517574a0e6b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_38%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n弹窗完事了，再顺道在页面中把数组里的值打印出来看看![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656471840-ecbb7e13-667b-4345-97a4-60a849ed451e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_37%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 在一个数组中可以有不同的对象\n\n- - 所有的JavaScript变量都是对象，数组元素是对象，函数也是对象\n  - 因此，我们可以在数组中有不同的变量类型\n  - 我们可以在一个数组中包含对象元素，函数，数组\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656507497-a9128903-1f51-48a0-af1b-f9071ff0f389.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 数组方法和属性\n\n- - 使用数组对象预定义属性和方法\n\n| var    a = 数组名.length    //length元素的数量               |\n| ------------------------------------------------------------ |\n| var    b = 数组名.indexOf(\"需要索引的字段\")  //括号里面为索引值 |\n\n- 更多的实例\n\n- - 合并两个数组-concat()\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656639810-73054345-0af6-4c4c-9ba2-fc7620a200bc.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656647809-524de2d0-01a1-475f-8190-1ae2329987a5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- - 合并三个数组-concat()\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656677924-8ac387d8-aeda-4de2-bb7f-a6e719d44605.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656681979-9220fb0b-ae48-4483-b788-aa30761ed63e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- 用数组的元素组合字符串-join()\n\n- - join()方法用于把数组中的所有元素放入一个字符串\n  - 元素是同过指定的分隔符分隔的\n\n| arrayObject.join(separator)                                  |\n| ------------------------------------------------------------ |\n| separator：指定要使用的分隔符，如果省略改参数，则使用逗号作为分隔符 |\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656712682-e75f5712-761e-4ad0-9d2e-e3d46917c3ac.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_19%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| 点击前![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656792868-b57e6395-7e1b-4fe0-bfbf-3097f9045020.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)点击后![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656804077-1e9c4969-4c6a-4c0c-95b2-aece511e9d18.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656829884-022208bc-cf0a-4e17-bc1d-9e3fe8f751f4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656840313-375d5f2a-6526-4cdd-b076-4817ed5fabc0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n- 删除数组的最后一个元素-pop()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656953405-b87be9c8-c90c-445e-8960-44bf3532e01d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 数组的末尾添加新的元素-push()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656962674-6cef5d2d-3acd-464b-b246-c412e5b99bc7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 将一个数组中的元素的顺序反转排序-reverse()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656973478-9c465b63-bed9-4d93-845c-492bcf418b71.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 删除数组的第一个元素-shift()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656988336-96687b65-74b8-49a1-8576-75594e429520.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 从一个数组中选择元素-slice()\n\n- - slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分\n  - 语法\n\nstringObject.slice(start,end)\n\n- - 返回值\n\n- - - 一个新的字符串，包括字符串stratObject从strat开始（包括strat）到end结束（不包括end）为止的所有字符串\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657004800-d8713e65-4d1b-4835-8958-baf47b76d95a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 数组排序（按字母顺序升序）-sort()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657014582-bdb1c470-3355-4e67-ad14-52c659845403.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 数字排序（按数字顺序升序）-sort()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657037116-d77644e4-9970-43ba-8247-14f9811d9daf.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 数字排序（按数字顺序降序）-sort()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657065901-7faa18d1-af03-443f-b5d2-d4c12611b404.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 在数组的第二位置添加一个元素 -splice()\n\n- - - splice()方法用于插入，删除，或者替换数组的元素\n    - 语法\n\narrayObject.splice(index,howmant,element1....,element1)\n\n| 参数     | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| index    | 必需。规定从何处添加/删除元素。该参数是开始插入和(或)删除的数组元素的下标，必需是数字哦 |\n| howmant  | 必需。规定应该删除多少元素。必须是数字，但可以是（0）。如果未规定此参数，则删除从index开始到原数组结尾的所有元素 |\n| element1 | 可选。规定要添加到数组的新元素。从index所指的下标处开始插入  |\n| elementN | 可选。可向数组添加若干元素。                                 |\n\n- - 返回值\n\n- - - 如果从arrayObject中删除了元素，则返回的是含有被删除的元素的数组\n\n- 注意：splice()方法和slice()方法的作用是不同的，splice()方法会直接对数组,行修改。\n- 下边的这个例子就是替换了下标“1”至“3”里面的内容，包含1和3下标的内容，也就是说我把数组里的“33，22，66”替换成了“88,44”。\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657083608-3d4f358b-4c67-4628-b6f0-13a495c3ecd9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 转换数组到字符串 -toString()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657093306-a84ce473-7c65-478f-b512-a6d76c5929ff.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 在数组的开头添加新元素 -unshift()\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657101064-7db40d88-68aa-4bed-98ba-96f27ed56b9b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657111628-83befa05-ad97-4553-952f-75f9d40b5144.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n## 10.9 对象\n\n- JavaScript对象\n\n- - 在JavaScript中，对象是拥有属性和方法的数据。\n\n- - - 属性是与对象相关的值\n    - 方法是能够在对象上执行的动作\n\n- - 对象也是一个变量，但对象可以包含多个值（多个变量）\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657330235-d51b4bdc-70d3-4b9b-977b-a66c32d33174.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 上边这个例子中，三个值（**\"Lamborghini\",999999,\"black\"**）赋予变量car\n  - 三个变量（\"neme\",price,color）赋予变量car\n  - JavaScript对象是变量的容器\n  - 定义JavaScript对象是可以跨越多行，空格跟换行不是必须的\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657337152-f7388e63-dcdc-4916-929a-f6f523d3b3a7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_41%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657359063-4ae2da29-2812-4f6d-9e8f-0f85361ab3d6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n- 对象属性\n\n- - JavaScript对象是变量的容器\n  - JavaScript对象是键值对的容器\n  - 键值对的基本写法为name:value（上边的例子就是喽）\n  - 键值对在JavaScript对象中统称为对象属性。\n  - 访问对象属性\n\n- - - 可以用对象名点属性（如：person.one）\n    - 也可以用对象名[\"属性\"]（如：person[\"one\"]）\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657371647-620ad6cf-4996-4ec9-b676-c8aadde3a394.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657376463-7a710ad9-a526-457b-a68d-f3972c9f4bc4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- 对象方法\n\n- - 对象的方法定义了一个函数，并作为对象的属性存储\n  - 对象方法通过添加()调用（当成函数调用）\n  - 下边的这个例子访问了person对象的all()方法（如果直接访问person对象的all属性，它将作为定义一个函数的字符串返回，也就是说把后边的代码直接返回，并且打印出来）\n\n- - - 访问方法（例：person.all()）\n    - 访问属性（例：person.all）","source":"_posts/十-JavaScript基础.md","raw":"---\ntitle: (十)JavaScript基础\ndate: 2022-07-08 20:25:49\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://tse4-mm.cn.bing.net/th/id/OIP-C.lNqh_BOnndzbRVu0hCOSIgHaCm?pid=ImgDet&rs=1\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom:\n---\n(十)JavaScript基础\n<!--more-->\n\n## 10.1 概述\n\nJavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。\n\n- 是一种解释性脚本语言（代码不进行预编译）。\n- 主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。\n- 可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。\n- 跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。\n\nJavascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。\n\n## 10.2 JavaScript能做什么\n\n- 使网页具有交互性，例如响应用户点击，给用户提供更好的体验\n- 可以处理表单，检验用户的输入，并提供及时反馈节省用户时间。例如，表单中要你输入电子邮箱而你却输入一个手机号，那么应该给你一个提醒。\n- 还可以根据用户的操作，动态的创建页面。例如，发邮件时，添加附件操作。\n- 设置cookie，cookie是存储在浏览器上的一些临时信息，例如你浏览过的网站地址，使用过的用户名\n- JavaScript 是有规律地重复的HTML元素简化，减少下载时间。\n- 浏览器与服务器进行数据通讯，比如现在最流行的Ajax异步传输；\n\n## 10.3 JavaScript构成\n\n- JavaScript由以下三部分组成：\n\n- - ECMAScript，它用来描述语法和基本对象\n  - 文档对象模型Doucment Object       Model（DOM），用来处理网页内容\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651195487-efff79bc-a3b0-45b8-9a7a-faf1c6d7abda.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 浏览器对象模型Borwser Object Model（BOM），用来处理浏览器交互\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651202360-0b177732-6264-4def-9a1b-fdda98bbc257.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n## 10.4 JavaScript的开发环境与运行环境\n\n- JavaScript为轻型脚本语言，可在任意文本编辑器中编辑\n- 由于JavaScript是内嵌在HTML中执行，所以其运行环境即浏览器\n\n## 10.5 JavaScript的使用\n\n- JavaScript需在HTML中内嵌运行，其内嵌方式有两种：\n\n- - 在网页中创建\\<script>\\</script>,在标签之间写JavaScript代码\n\n```javascript\n<script>\n  \talert(\"hello world\")\n<script>\n```\n\n- - 在外部创建“.js”文件，通过\\<script src=\"文件路径\">引入到HTML文件中执行\n\n```html\n<head>\n\t<script src=\"xxx/xxx.js\"></script>\n</head>\n```\n\n## 10.6 JavaScript基础\n\n- 值\n\n- - 数字类型的值（数字）\n  - 算术值（加减乘除等运算，需要两个或两个以上的数字）\n  - 特殊数字\n\n- - - 在JavaScript中有三个特殊数值，他们被视为数字，但其行为不像普通数字那样\n    - Infinity和-Infinity表示正无穷大和负无穷大\n    - NaN代表不是数字，就是不当的算数运算得到不当的值（比如：0/0或者Infinity-Infinity都会得到这样的值）\n\n- - 字符串（用于表示文本，使用引号引起来即可）\n\n- - - 在字符串中还需要注意\n\n- - - - 在引号中添加特殊字符时比较难加，但是只需要添加反引号”`“就可解决这个问题\n\nconsole.log(`hello my   \"son\"`);\n\n- 转义符（\\）\n\n- - 出现在引用文本中，表示后面有特殊字符\n  - 换行符（\\n）\n  - 制表符（\\t）\n  - 如果希望字符串中的斜杠只是斜杠，可以使用两个斜杠\n\nconsole.log(\"l   input \\\"\\\\n\\\"\");\n\n- 运算符\n\n- - 一元运算符\n\n- - - 在JavaScript中并非所有的运算符都是由符号构成的，还有由单词构成的符号，如：typeof运算符用来生成一个字符串，表示你输入数据的类型\n\nconsole.log(typeof   2.2);console.log(typeof   \"hello\");\n\n- 布尔值\n\n- - 比较运算符（>,<,<=,<=……）\n\n- - - 比较运算符属于二元运算符\n\nconsole.log(1<2)\n\n- 字符串也是可以比较的\n\n| console.log(a>b)                                             |\n| ------------------------------------------------------------ |\n| 字符串在比较时大致时按照字母的顺序比较，而小写字母的大于大写字母，在字符串比较是JavaScript从左道右遍历字符按照字母的unicode编码进行比较 |\n| 注意：在JavaScript中只有一个值不等于它自己，他就是NaN（不是数字）console.log(NaN==NaN)返回false |\n\n- 逻辑运算符（与，或，非）\n\n- - &&:表示逻辑与，表示结果为真才为真\n\n| console.log(true&&false) | false |\n| ------------------------ | ----- |\n| console.log(true&&true)  | true  |\n|                          |       |\n\n- - ||：表示逻辑或，表示一个为真，则为真\n\n| console.log(true\\|\\|false)  | true  |\n| --------------------------- | ----- |\n| console.log(false\\|\\|false) | false |\n\n- - !：表示逻辑非，表示取反\n  - 在上边两种运算符混合使用时需要注意他们的优先级，一般情况下是,||具有最低优先级，然后时&&，然后是比较运算符，再然后时其他运算符\n  - 三元运算符，由问号和冒号写成\n\n| console.log(true?1:2)  |\n| ---------------------- |\n| console.log(false?1:2) |\n\n- 空值\n\n- - 再JavaScript中使用null和undefined表示空值\n\n- 自动类型转换\n\n- - JavaScript的包容性时相当高的，几乎可以接受你给他的任何程序\n  - 当运算符应用不同类型的值时，JavaScript会使用一组规则自动将值转换成所需要的类型供你使用（强制类型转换）\n\n| console.log(8*null)-->0             |\n| ----------------------------------- |\n| console.log(\"3\"-1)-->2              |\n| console.log(\"3\"+1)-->31             |\n| console.log(\"six\"*1)-->NaN          |\n| console.log(false==0)-->true        |\n| console.log(null==undefined)-->true |\n| console.log(null==0)-->false        |\n\n- 表达式\n\n- - 生成值得代码片段称之为表达式\n\nconsole.log(1+1);\n\n- 绑定（变量）\n\n- - ·JavaScript为了让程序中得数据保持提供了一个称为绑定（binding）或变量（variable）得东西\n\n- - - let属于JavaScript关键字表示将定义一个绑定，它得后面是绑定名称，如果我们想给它一个值，则由\"=\"运算符和表达式来完成\n\n| let a =   1*2                         |\n| ------------------------------------- |\n| let num =   10; console.log(num*num); |\n\n- - - 当绑定值指向一个值时并部意味着它永远时该值，\"=\"运算符随时可以更新绑定赋予绑定新值\n\nlet   name=\"张三\";conlose.log(name);name   = \"李四\";console.log(name);\n\n- - - 在JavaScript中不单单可以使用let去做绑定,var和const两个也可以用于绑定\n\n| var   name=\"hello\";console.log(name);                        |\n| ------------------------------------------------------------ |\n| const demo   = \"world\";console.log(demo);                    |\n| console.log(name+demo);                                      |\n| 注：1.var全称(variable)表示变量，多用于以前得JavaScript中声明绑定2.const全称（constant），表示定义一个常量绑定，只要它存在，它就一直指向相同得值 |\n\n- JavaScript语句\n\n- - JavaScript语句是发给浏览器的命令\n  - 这些命令的作用是告诉浏览器要做的事情\n  - 比如\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652275534-6e34e0ea-ce7f-4cb2-b9f5-a303441fbb5b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652282839-d8f3b6f0-bb99-4311-af61-9ec9d1d592a7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| 解析：点击hello world后，触发JavaScript点击事件（onclick点击事件，点击后innerHTML替换标签里的内容，即把”hello world“替换成“世界 你好”） |\n\n- 分号\n\n- - 分号用于分隔JavaScript语句\n  - 通常我们在每条可执行的语句结尾添加分号，代表作一句JavaScript语句的结束\n  - 使用分号的另一个好处就是。。。。能在一行多写点代码嘛\n\n- JavaScript代码\n\n- - JavaScript代码是JavaScript语句的序列\n  - 浏览器按照编写顺序依次执行每条语句\n\n- JavaScript代码块\n\n- - JavaScript可以分批地组合起来\n  - 代码块以左花括号开始，以右花括号结束\n  - 代码块的作用是一并执行语句序列\n\n- 示例\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652313702-584a551d-bd15-4e8c-873f-304b09194343.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652326450-8100dccd-e3b6-4e7d-afbc-1246a23c2fc5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n- JavaScript语句标识符\n\n- - JavaScript语句通常以一个语句标识符为开始，并执行该语句。\n  - 语句标识符是保留关键字不能作为变量名使用\n  - JavaScript语句标识符（关键字）\n\n| 语句       | 描述                                                         |\n| ---------- | ------------------------------------------------------------ |\n| break      | 用于跳出循环                                                 |\n| catch      | 语句块，在try语句块执行出错时执行catch语句块                 |\n| continue   | 跳过循环的一个迭代                                           |\n| do...while | 执行一个语句块，在条件语句为true时继续执行该语句块           |\n| for        | 在条件语句为true时，可以将代码块执行指定的次数               |\n| for...in   | 用于遍历数组或对象的属性（对数组或者对象的属性进行循环操作） |\n| function   | 定义一个函数                                                 |\n| if...else  | 用于基于不同的条件来执行不同的动作                           |\n| return     | 退出函数                                                     |\n| switch     | 用于基于不同条件来执行不同的动作                             |\n| throw      | 抛出错误                                                     |\n| try        | 实现错误处理，与catch一同使用                                |\n| var        | 声明一个变量                                                 |\n| while      | 当条件语句为true时，执行语句块                               |\n\n- 代码折行\n\n| document.write(\"hello   \\ world\")； | 但是不能这么折行document.write\\(\"hello world\")； |\n| ----------------------------------- | ------------------------------------------------ |\n|                                     |                                                  |\n\n## 10.7 JavaScript数据类型\n\n- javascript属于弱语言，它的变量没有明确的数据类型，它的数据类型是由它存储的值自己推断出来的\n- 常见数据类型\n\n| **数据类型** | **具体描述**                   |\n| ------------ | ------------------------------ |\n| number       | 能存储整数和小数类型           |\n| string       | 用单引号或双引号来声明的字符串 |\n| boolean      | 只能是两个值选择：true、false  |\n| undefined    | 变量被声明后，但未被赋值       |\n| object       | javascript中的对象、数组和null |\n\n- 在JavaScript中可以使用typeof()函数来检查变量的返回值类型\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655653508-92e34507-ef26-46c0-92e5-fd7054983ad7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- JavaScript拥有动态类型，这意味着相同的变量可用作不同的类型\n\nvar x；//x为undefinedvar   x = 5；//x为数字var   x = \"hello\";//x为字符串\n\n- JavaScript字符串\n\n- - 字符串是存储字符的变量\n  - 字符串可以是引号中的任意文本。可以使用单引号或者双引号\n\nvar name =   \"tom\";var name =   'tom';\n\n- 也可以在字符串中使用引号，只要不匹配包围字符串的引号即可\n\nvar answer   = \"let'go\";var answer   = \"my name is 'tom' \";\n\n- JavaScript数字\n\n- - JavaScript只有一种数字类型。数字可以带小数点。\n\nvar a = 3;var b =   3.14;\n\n- 极大或极小的数字可以通过科学计数来书写\n\n| var a =   123e5;//12300000 |\n| -------------------------- |\n| var b =   123e-5;//0.00123 |\n\n- JavaScript布尔\n\n- - 布尔（逻辑）只能有两个值：true或false\n\nvar a =   false;var b =   true;\n\n- 布尔常用在条件测试中。这个我们将在之后详解\n- JavaScript数组\n\n- - 详见10.8节\n\n- JavaScript对象\n\n- - 详见10.9节\n  - 对象由花括号分隔。在扩号内部，对象的属性以名称和值对的形式（键值对 name：value）来定义，属性由逗号分隔\n  - 对象有两种寻址方式：\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655910721-0a48b0a7-993c-45ca-a851-9d8a9f0216b6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655916757-28032444-e669-4911-8a08-0adc9bd721a0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- Undefined和Null\n\n- - Undefined表示变量不含值\n  - Null可以通过将变量的值设置为Null来清空变量\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655925751-c01fd5d4-f3f1-4a93-b80f-4aff98f02075.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655944042-42c54dea-cfb9-4ae5-b05b-700a4977857f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- 声明变量类型\n\n- - 当声明新变量时，可以使用关键词“new”来声明其类型\n\nvar   name = new String; var age   = new Number;var   money = new boolean;var   cars = new Arrays;var   person = new Object;\n\n## 10.8 数组\n\n- 什么是数组\n\n- - 数组对象是使用单独的变量名来存储一系列相同类型的值\n  - 数字可以用一个变量名存储所有的值，并且可以用变量名访问任何一个值\n  - 数组中的每个元素都有自己的ID，以便它可以很容易地被访问到\n\n- 创建数组，有几种不同的方式\n\n- - 常规方式\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656318089-149f266a-0657-417b-8911-de077af3a0f9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 简洁方式\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656324807-3401185c-a1b8-4ed5-beb7-cf10312d944f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 字面方式\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656333229-64159517-3a00-411f-9c39-8fd82965fabd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 访问数组\n\n- - 通过上边的几个例子，大家应该能看出来数组是怎么访问的\n  - 语法：数组名[下标] \n\narr[1]\n\n- - 在数组中[0]代表数组的第一个元素，[1]则代表的是第二个元素\n\n- 来个数组式循环弹窗看看\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656416554-a1696c63-5193-447f-8671-1517574a0e6b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_38%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n弹窗完事了，再顺道在页面中把数组里的值打印出来看看![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656471840-ecbb7e13-667b-4345-97a4-60a849ed451e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_37%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 在一个数组中可以有不同的对象\n\n- - 所有的JavaScript变量都是对象，数组元素是对象，函数也是对象\n  - 因此，我们可以在数组中有不同的变量类型\n  - 我们可以在一个数组中包含对象元素，函数，数组\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656507497-a9128903-1f51-48a0-af1b-f9071ff0f389.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 数组方法和属性\n\n- - 使用数组对象预定义属性和方法\n\n| var    a = 数组名.length    //length元素的数量               |\n| ------------------------------------------------------------ |\n| var    b = 数组名.indexOf(\"需要索引的字段\")  //括号里面为索引值 |\n\n- 更多的实例\n\n- - 合并两个数组-concat()\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656639810-73054345-0af6-4c4c-9ba2-fc7620a200bc.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656647809-524de2d0-01a1-475f-8190-1ae2329987a5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- - 合并三个数组-concat()\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656677924-8ac387d8-aeda-4de2-bb7f-a6e719d44605.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656681979-9220fb0b-ae48-4483-b788-aa30761ed63e.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- 用数组的元素组合字符串-join()\n\n- - join()方法用于把数组中的所有元素放入一个字符串\n  - 元素是同过指定的分隔符分隔的\n\n| arrayObject.join(separator)                                  |\n| ------------------------------------------------------------ |\n| separator：指定要使用的分隔符，如果省略改参数，则使用逗号作为分隔符 |\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656712682-e75f5712-761e-4ad0-9d2e-e3d46917c3ac.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_19%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| 点击前![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656792868-b57e6395-7e1b-4fe0-bfbf-3097f9045020.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)点击后![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656804077-1e9c4969-4c6a-4c0c-95b2-aece511e9d18.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656829884-022208bc-cf0a-4e17-bc1d-9e3fe8f751f4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656840313-375d5f2a-6526-4cdd-b076-4817ed5fabc0.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n- 删除数组的最后一个元素-pop()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656953405-b87be9c8-c90c-445e-8960-44bf3532e01d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 数组的末尾添加新的元素-push()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656962674-6cef5d2d-3acd-464b-b246-c412e5b99bc7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 将一个数组中的元素的顺序反转排序-reverse()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656973478-9c465b63-bed9-4d93-845c-492bcf418b71.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_22%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 删除数组的第一个元素-shift()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656988336-96687b65-74b8-49a1-8576-75594e429520.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 从一个数组中选择元素-slice()\n\n- - slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分\n  - 语法\n\nstringObject.slice(start,end)\n\n- - 返回值\n\n- - - 一个新的字符串，包括字符串stratObject从strat开始（包括strat）到end结束（不包括end）为止的所有字符串\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657004800-d8713e65-4d1b-4835-8958-baf47b76d95a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 数组排序（按字母顺序升序）-sort()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657014582-bdb1c470-3355-4e67-ad14-52c659845403.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 数字排序（按数字顺序升序）-sort()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657037116-d77644e4-9970-43ba-8247-14f9811d9daf.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 数字排序（按数字顺序降序）-sort()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657065901-7faa18d1-af03-443f-b5d2-d4c12611b404.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 在数组的第二位置添加一个元素 -splice()\n\n- - - splice()方法用于插入，删除，或者替换数组的元素\n    - 语法\n\narrayObject.splice(index,howmant,element1....,element1)\n\n| 参数     | 描述                                                         |\n| -------- | ------------------------------------------------------------ |\n| index    | 必需。规定从何处添加/删除元素。该参数是开始插入和(或)删除的数组元素的下标，必需是数字哦 |\n| howmant  | 必需。规定应该删除多少元素。必须是数字，但可以是（0）。如果未规定此参数，则删除从index开始到原数组结尾的所有元素 |\n| element1 | 可选。规定要添加到数组的新元素。从index所指的下标处开始插入  |\n| elementN | 可选。可向数组添加若干元素。                                 |\n\n- - 返回值\n\n- - - 如果从arrayObject中删除了元素，则返回的是含有被删除的元素的数组\n\n- 注意：splice()方法和slice()方法的作用是不同的，splice()方法会直接对数组,行修改。\n- 下边的这个例子就是替换了下标“1”至“3”里面的内容，包含1和3下标的内容，也就是说我把数组里的“33，22，66”替换成了“88,44”。\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657083608-3d4f358b-4c67-4628-b6f0-13a495c3ecd9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_20%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 转换数组到字符串 -toString()\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657093306-a84ce473-7c65-478f-b512-a6d76c5929ff.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_18%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- 在数组的开头添加新元素 -unshift()\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657101064-7db40d88-68aa-4bed-98ba-96f27ed56b9b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657111628-83befa05-ad97-4553-952f-75f9d40b5144.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n## 10.9 对象\n\n- JavaScript对象\n\n- - 在JavaScript中，对象是拥有属性和方法的数据。\n\n- - - 属性是与对象相关的值\n    - 方法是能够在对象上执行的动作\n\n- - 对象也是一个变量，但对象可以包含多个值（多个变量）\n\n![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657330235-d51b4bdc-70d3-4b9b-977b-a66c32d33174.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n- - 上边这个例子中，三个值（**\"Lamborghini\",999999,\"black\"**）赋予变量car\n  - 三个变量（\"neme\",price,color）赋予变量car\n  - JavaScript对象是变量的容器\n  - 定义JavaScript对象是可以跨越多行，空格跟换行不是必须的\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657337152-f7388e63-dcdc-4916-929a-f6f523d3b3a7.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_41%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ |\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657359063-4ae2da29-2812-4f6d-9e8f-0f85361ab3d6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_12%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n\n- 对象属性\n\n- - JavaScript对象是变量的容器\n  - JavaScript对象是键值对的容器\n  - 键值对的基本写法为name:value（上边的例子就是喽）\n  - 键值对在JavaScript对象中统称为对象属性。\n  - 访问对象属性\n\n- - - 可以用对象名点属性（如：person.one）\n    - 也可以用对象名[\"属性\"]（如：person[\"one\"]）\n\n| ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657371647-620ad6cf-4996-4ec9-b676-c8aadde3a394.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) | ![img](https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657376463-7a710ad9-a526-457b-a68d-f3972c9f4bc4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_11%2Ctext_Qnl0ZeWtpumZog%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n- 对象方法\n\n- - 对象的方法定义了一个函数，并作为对象的属性存储\n  - 对象方法通过添加()调用（当成函数调用）\n  - 下边的这个例子访问了person对象的all()方法（如果直接访问person对象的all属性，它将作为定义一个函数的字符串返回，也就是说把后边的代码直接返回，并且打印出来）\n\n- - - 访问方法（例：person.all()）\n    - 访问属性（例：person.all）","slug":"十-JavaScript基础","published":1,"updated":"2022-07-19T02:27:16.856Z","_id":"cl5hmbtm3001f2cujb8nbh6sy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(十)JavaScript基础</p>\n<span id=\"more\"></span>\n\n<h2 id=\"10-1-概述\"><a href=\"#10-1-概述\" class=\"headerlink\" title=\"10.1 概述\"></a>10.1 概述</h2><p>JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。</p>\n<ul>\n<li>是一种解释性脚本语言（代码不进行预编译）。</li>\n<li>主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。</li>\n<li>可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。</li>\n<li>跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。</li>\n</ul>\n<p>Javascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。</p>\n<h2 id=\"10-2-JavaScript能做什么\"><a href=\"#10-2-JavaScript能做什么\" class=\"headerlink\" title=\"10.2 JavaScript能做什么\"></a>10.2 JavaScript能做什么</h2><ul>\n<li>使网页具有交互性，例如响应用户点击，给用户提供更好的体验</li>\n<li>可以处理表单，检验用户的输入，并提供及时反馈节省用户时间。例如，表单中要你输入电子邮箱而你却输入一个手机号，那么应该给你一个提醒。</li>\n<li>还可以根据用户的操作，动态的创建页面。例如，发邮件时，添加附件操作。</li>\n<li>设置cookie，cookie是存储在浏览器上的一些临时信息，例如你浏览过的网站地址，使用过的用户名</li>\n<li>JavaScript 是有规律地重复的HTML元素简化，减少下载时间。</li>\n<li>浏览器与服务器进行数据通讯，比如现在最流行的Ajax异步传输；</li>\n</ul>\n<h2 id=\"10-3-JavaScript构成\"><a href=\"#10-3-JavaScript构成\" class=\"headerlink\" title=\"10.3 JavaScript构成\"></a>10.3 JavaScript构成</h2><ul>\n<li><p>JavaScript由以下三部分组成：</p>\n</li>\n<li><ul>\n<li>ECMAScript，它用来描述语法和基本对象</li>\n<li>文档对象模型Doucment Object       Model（DOM），用来处理网页内容</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651195487-efff79bc-a3b0-45b8-9a7a-faf1c6d7abda.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>浏览器对象模型Borwser Object Model（BOM），用来处理浏览器交互</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651202360-0b177732-6264-4def-9a1b-fdda98bbc257.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h2 id=\"10-4-JavaScript的开发环境与运行环境\"><a href=\"#10-4-JavaScript的开发环境与运行环境\" class=\"headerlink\" title=\"10.4 JavaScript的开发环境与运行环境\"></a>10.4 JavaScript的开发环境与运行环境</h2><ul>\n<li>JavaScript为轻型脚本语言，可在任意文本编辑器中编辑</li>\n<li>由于JavaScript是内嵌在HTML中执行，所以其运行环境即浏览器</li>\n</ul>\n<h2 id=\"10-5-JavaScript的使用\"><a href=\"#10-5-JavaScript的使用\" class=\"headerlink\" title=\"10.5 JavaScript的使用\"></a>10.5 JavaScript的使用</h2><ul>\n<li><p>JavaScript需在HTML中内嵌运行，其内嵌方式有两种：</p>\n</li>\n<li><ul>\n<li>在网页中创建&lt;script&gt;&lt;/script&gt;,在标签之间写JavaScript代码</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"javascript\">&lt;script&gt;\n      alert(&quot;hello world&quot;)\n&lt;script&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>在外部创建“.js”文件，通过&lt;script src=”文件路径”&gt;引入到HTML文件中执行</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;head&gt;\n    &lt;script src=&quot;xxx/xxx.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n<h2 id=\"10-6-JavaScript基础\"><a href=\"#10-6-JavaScript基础\" class=\"headerlink\" title=\"10.6 JavaScript基础\"></a>10.6 JavaScript基础</h2><ul>\n<li><p>值</p>\n</li>\n<li><ul>\n<li>数字类型的值（数字）</li>\n<li>算术值（加减乘除等运算，需要两个或两个以上的数字）</li>\n<li>特殊数字</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在JavaScript中有三个特殊数值，他们被视为数字，但其行为不像普通数字那样</li>\n<li>Infinity和-Infinity表示正无穷大和负无穷大</li>\n<li>NaN代表不是数字，就是不当的算数运算得到不当的值（比如：0/0或者Infinity-Infinity都会得到这样的值）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>字符串（用于表示文本，使用引号引起来即可）</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在字符串中还需要注意</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>在引号中添加特殊字符时比较难加，但是只需要添加反引号”`“就可解决这个问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>console.log(<code>hello my   &quot;son&quot;</code>);</p>\n<ul>\n<li><p>转义符（\\）</p>\n</li>\n<li><ul>\n<li>出现在引用文本中，表示后面有特殊字符</li>\n<li>换行符（\\n）</li>\n<li>制表符（\\t）</li>\n<li>如果希望字符串中的斜杠只是斜杠，可以使用两个斜杠</li>\n</ul>\n</li>\n</ul>\n<p>console.log(“l   input &quot;\\n&quot;“);</p>\n<ul>\n<li><p>运算符</p>\n</li>\n<li><ul>\n<li>一元运算符</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在JavaScript中并非所有的运算符都是由符号构成的，还有由单词构成的符号，如：typeof运算符用来生成一个字符串，表示你输入数据的类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>console.log(typeof   2.2);console.log(typeof   “hello”);</p>\n<ul>\n<li><p>布尔值</p>\n</li>\n<li><ul>\n<li>比较运算符（&gt;,&lt;,&lt;=,&lt;=……）</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>比较运算符属于二元运算符</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>console.log(1&lt;2)</p>\n<ul>\n<li>字符串也是可以比较的</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(a&gt;b)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字符串在比较时大致时按照字母的顺序比较，而小写字母的大于大写字母，在字符串比较是JavaScript从左道右遍历字符按照字母的unicode编码进行比较</td>\n</tr>\n<tr>\n<td>注意：在JavaScript中只有一个值不等于它自己，他就是NaN（不是数字）console.log(NaN==NaN)返回false</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>逻辑运算符（与，或，非）</p>\n</li>\n<li><ul>\n<li>&amp;&amp;:表示逻辑与，表示结果为真才为真</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(true&amp;&amp;false)</th>\n<th>false</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>console.log(true&amp;&amp;true)</td>\n<td>true</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>||：表示逻辑或，表示一个为真，则为真</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(true||false)</th>\n<th>true</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>console.log(false||false)</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>!：表示逻辑非，表示取反</li>\n<li>在上边两种运算符混合使用时需要注意他们的优先级，一般情况下是,||具有最低优先级，然后时&amp;&amp;，然后是比较运算符，再然后时其他运算符</li>\n<li>三元运算符，由问号和冒号写成</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(true?1:2)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>console.log(false?1:2)</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>空值</p>\n</li>\n<li><ul>\n<li>再JavaScript中使用null和undefined表示空值</li>\n</ul>\n</li>\n<li><p>自动类型转换</p>\n</li>\n<li><ul>\n<li>JavaScript的包容性时相当高的，几乎可以接受你给他的任何程序</li>\n<li>当运算符应用不同类型的值时，JavaScript会使用一组规则自动将值转换成所需要的类型供你使用（强制类型转换）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(8*null)–&gt;0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>console.log(“3”-1)–&gt;2</td>\n</tr>\n<tr>\n<td>console.log(“3”+1)–&gt;31</td>\n</tr>\n<tr>\n<td>console.log(“six”*1)–&gt;NaN</td>\n</tr>\n<tr>\n<td>console.log(false==0)–&gt;true</td>\n</tr>\n<tr>\n<td>console.log(null==undefined)–&gt;true</td>\n</tr>\n<tr>\n<td>console.log(null==0)–&gt;false</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>表达式</p>\n</li>\n<li><ul>\n<li>生成值得代码片段称之为表达式</li>\n</ul>\n</li>\n</ul>\n<p>console.log(1+1);</p>\n<ul>\n<li><p>绑定（变量）</p>\n</li>\n<li><ul>\n<li>·JavaScript为了让程序中得数据保持提供了一个称为绑定（binding）或变量（variable）得东西</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>let属于JavaScript关键字表示将定义一个绑定，它得后面是绑定名称，如果我们想给它一个值，则由”=”运算符和表达式来完成</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>let a =   1*2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>let num =   10; console.log(num*num);</td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li><ul>\n<li>当绑定值指向一个值时并部意味着它永远时该值，”=”运算符随时可以更新绑定赋予绑定新值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>let   name=”张三”;conlose.log(name);name   = “李四”;console.log(name);</p>\n<ul>\n<li><ul>\n<li><ul>\n<li>在JavaScript中不单单可以使用let去做绑定,var和const两个也可以用于绑定</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>var   name=”hello”;console.log(name);</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>const demo   = “world”;console.log(demo);</td>\n</tr>\n<tr>\n<td>console.log(name+demo);</td>\n</tr>\n<tr>\n<td>注：1.var全称(variable)表示变量，多用于以前得JavaScript中声明绑定2.const全称（constant），表示定义一个常量绑定，只要它存在，它就一直指向相同得值</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>JavaScript语句</p>\n</li>\n<li><ul>\n<li>JavaScript语句是发给浏览器的命令</li>\n<li>这些命令的作用是告诉浏览器要做的事情</li>\n<li>比如</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652275534-6e34e0ea-ce7f-4cb2-b9f5-a303441fbb5b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652282839-d8f3b6f0-bb99-4311-af61-9ec9d1d592a7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n<tr>\n<td>解析：点击hello world后，触发JavaScript点击事件（onclick点击事件，点击后innerHTML替换标签里的内容，即把”hello world“替换成“世界 你好”）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>分号</p>\n</li>\n<li><ul>\n<li>分号用于分隔JavaScript语句</li>\n<li>通常我们在每条可执行的语句结尾添加分号，代表作一句JavaScript语句的结束</li>\n<li>使用分号的另一个好处就是。。。。能在一行多写点代码嘛</li>\n</ul>\n</li>\n<li><p>JavaScript代码</p>\n</li>\n<li><ul>\n<li>JavaScript代码是JavaScript语句的序列</li>\n<li>浏览器按照编写顺序依次执行每条语句</li>\n</ul>\n</li>\n<li><p>JavaScript代码块</p>\n</li>\n<li><ul>\n<li>JavaScript可以分批地组合起来</li>\n<li>代码块以左花括号开始，以右花括号结束</li>\n<li>代码块的作用是一并执行语句序列</li>\n</ul>\n</li>\n<li><p>示例</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652313702-584a551d-bd15-4e8c-873f-304b09194343.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652326450-8100dccd-e3b6-4e7d-afbc-1246a23c2fc5.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>JavaScript语句标识符</p>\n</li>\n<li><ul>\n<li>JavaScript语句通常以一个语句标识符为开始，并执行该语句。</li>\n<li>语句标识符是保留关键字不能作为变量名使用</li>\n<li>JavaScript语句标识符（关键字）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语句</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>break</td>\n<td>用于跳出循环</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>语句块，在try语句块执行出错时执行catch语句块</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>跳过循环的一个迭代</td>\n</tr>\n<tr>\n<td>do…while</td>\n<td>执行一个语句块，在条件语句为true时继续执行该语句块</td>\n</tr>\n<tr>\n<td>for</td>\n<td>在条件语句为true时，可以将代码块执行指定的次数</td>\n</tr>\n<tr>\n<td>for…in</td>\n<td>用于遍历数组或对象的属性（对数组或者对象的属性进行循环操作）</td>\n</tr>\n<tr>\n<td>function</td>\n<td>定义一个函数</td>\n</tr>\n<tr>\n<td>if…else</td>\n<td>用于基于不同的条件来执行不同的动作</td>\n</tr>\n<tr>\n<td>return</td>\n<td>退出函数</td>\n</tr>\n<tr>\n<td>switch</td>\n<td>用于基于不同条件来执行不同的动作</td>\n</tr>\n<tr>\n<td>throw</td>\n<td>抛出错误</td>\n</tr>\n<tr>\n<td>try</td>\n<td>实现错误处理，与catch一同使用</td>\n</tr>\n<tr>\n<td>var</td>\n<td>声明一个变量</td>\n</tr>\n<tr>\n<td>while</td>\n<td>当条件语句为true时，执行语句块</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码折行</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>document.write(“hello   \\ world”)；</th>\n<th>但是不能这么折行document.write(“hello world”)；</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"10-7-JavaScript数据类型\"><a href=\"#10-7-JavaScript数据类型\" class=\"headerlink\" title=\"10.7 JavaScript数据类型\"></a>10.7 JavaScript数据类型</h2><ul>\n<li>javascript属于弱语言，它的变量没有明确的数据类型，它的数据类型是由它存储的值自己推断出来的</li>\n<li>常见数据类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>具体描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>number</td>\n<td>能存储整数和小数类型</td>\n</tr>\n<tr>\n<td>string</td>\n<td>用单引号或双引号来声明的字符串</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>只能是两个值选择：true、false</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>变量被声明后，但未被赋值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>javascript中的对象、数组和null</td>\n</tr>\n</tbody></table>\n<ul>\n<li>在JavaScript中可以使用typeof()函数来检查变量的返回值类型</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655653508-92e34507-ef26-46c0-92e5-fd7054983ad7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>JavaScript拥有动态类型，这意味着相同的变量可用作不同的类型</li>\n</ul>\n<p>var x；//x为undefinedvar   x = 5；//x为数字var   x = “hello”;//x为字符串</p>\n<ul>\n<li><p>JavaScript字符串</p>\n</li>\n<li><ul>\n<li>字符串是存储字符的变量</li>\n<li>字符串可以是引号中的任意文本。可以使用单引号或者双引号</li>\n</ul>\n</li>\n</ul>\n<p>var name =   “tom”;var name =   ‘tom’;</p>\n<ul>\n<li>也可以在字符串中使用引号，只要不匹配包围字符串的引号即可</li>\n</ul>\n<p>var answer   = “let’go”;var answer   = “my name is ‘tom’ “;</p>\n<ul>\n<li><p>JavaScript数字</p>\n</li>\n<li><ul>\n<li>JavaScript只有一种数字类型。数字可以带小数点。</li>\n</ul>\n</li>\n</ul>\n<p>var a = 3;var b =   3.14;</p>\n<ul>\n<li>极大或极小的数字可以通过科学计数来书写</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>var a =   123e5;//12300000</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var b =   123e-5;//0.00123</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>JavaScript布尔</p>\n</li>\n<li><ul>\n<li>布尔（逻辑）只能有两个值：true或false</li>\n</ul>\n</li>\n</ul>\n<p>var a =   false;var b =   true;</p>\n<ul>\n<li><p>布尔常用在条件测试中。这个我们将在之后详解</p>\n</li>\n<li><p>JavaScript数组</p>\n</li>\n<li><ul>\n<li>详见10.8节</li>\n</ul>\n</li>\n<li><p>JavaScript对象</p>\n</li>\n<li><ul>\n<li>详见10.9节</li>\n<li>对象由花括号分隔。在扩号内部，对象的属性以名称和值对的形式（键值对 name：value）来定义，属性由逗号分隔</li>\n<li>对象有两种寻址方式：</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655910721-0a48b0a7-993c-45ca-a851-9d8a9f0216b6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655916757-28032444-e669-4911-8a08-0adc9bd721a0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>Undefined和Null</p>\n</li>\n<li><ul>\n<li>Undefined表示变量不含值</li>\n<li>Null可以通过将变量的值设置为Null来清空变量</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655925751-c01fd5d4-f3f1-4a93-b80f-4aff98f02075.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655944042-42c54dea-cfb9-4ae5-b05b-700a4977857f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>声明变量类型</p>\n</li>\n<li><ul>\n<li>当声明新变量时，可以使用关键词“new”来声明其类型</li>\n</ul>\n</li>\n</ul>\n<p>var   name = new String; var age   = new Number;var   money = new boolean;var   cars = new Arrays;var   person = new Object;</p>\n<h2 id=\"10-8-数组\"><a href=\"#10-8-数组\" class=\"headerlink\" title=\"10.8 数组\"></a>10.8 数组</h2><ul>\n<li><p>什么是数组</p>\n</li>\n<li><ul>\n<li>数组对象是使用单独的变量名来存储一系列相同类型的值</li>\n<li>数字可以用一个变量名存储所有的值，并且可以用变量名访问任何一个值</li>\n<li>数组中的每个元素都有自己的ID，以便它可以很容易地被访问到</li>\n</ul>\n</li>\n<li><p>创建数组，有几种不同的方式</p>\n</li>\n<li><ul>\n<li>常规方式</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656318089-149f266a-0657-417b-8911-de077af3a0f9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>简洁方式</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656324807-3401185c-a1b8-4ed5-beb7-cf10312d944f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>字面方式</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656333229-64159517-3a00-411f-9c39-8fd82965fabd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>访问数组</p>\n</li>\n<li><ul>\n<li>通过上边的几个例子，大家应该能看出来数组是怎么访问的</li>\n<li>语法：数组名[下标] </li>\n</ul>\n</li>\n</ul>\n<p>arr[1]</p>\n<ul>\n<li><ul>\n<li>在数组中[0]代表数组的第一个元素，[1]则代表的是第二个元素</li>\n</ul>\n</li>\n<li><p>来个数组式循环弹窗看看</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656416554-a1696c63-5193-447f-8671-1517574a0e6b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_38,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>弹窗完事了，再顺道在页面中把数组里的值打印出来看看<img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656471840-ecbb7e13-667b-4345-97a4-60a849ed451e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_37,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>在一个数组中可以有不同的对象</p>\n</li>\n<li><ul>\n<li>所有的JavaScript变量都是对象，数组元素是对象，函数也是对象</li>\n<li>因此，我们可以在数组中有不同的变量类型</li>\n<li>我们可以在一个数组中包含对象元素，函数，数组</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656507497-a9128903-1f51-48a0-af1b-f9071ff0f389.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>数组方法和属性</p>\n</li>\n<li><ul>\n<li>使用数组对象预定义属性和方法</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>var    a = 数组名.length    //length元素的数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var    b = 数组名.indexOf(“需要索引的字段”)  //括号里面为索引值</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>更多的实例</p>\n</li>\n<li><ul>\n<li>合并两个数组-concat()</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656639810-73054345-0af6-4c4c-9ba2-fc7620a200bc.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656647809-524de2d0-01a1-475f-8190-1ae2329987a5.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>合并三个数组-concat()</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656677924-8ac387d8-aeda-4de2-bb7f-a6e719d44605.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656681979-9220fb0b-ae48-4483-b788-aa30761ed63e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>用数组的元素组合字符串-join()</p>\n</li>\n<li><ul>\n<li>join()方法用于把数组中的所有元素放入一个字符串</li>\n<li>元素是同过指定的分隔符分隔的</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>arrayObject.join(separator)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>separator：指定要使用的分隔符，如果省略改参数，则使用逗号作为分隔符</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656712682-e75f5712-761e-4ad0-9d2e-e3d46917c3ac.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>点击前<img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656792868-b57e6395-7e1b-4fe0-bfbf-3097f9045020.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\">点击后<img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656804077-1e9c4969-4c6a-4c0c-95b2-aece511e9d18.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656829884-022208bc-cf0a-4e17-bc1d-9e3fe8f751f4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656840313-375d5f2a-6526-4cdd-b076-4817ed5fabc0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>删除数组的最后一个元素-pop()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656953405-b87be9c8-c90c-445e-8960-44bf3532e01d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>数组的末尾添加新的元素-push()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656962674-6cef5d2d-3acd-464b-b246-c412e5b99bc7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>将一个数组中的元素的顺序反转排序-reverse()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656973478-9c465b63-bed9-4d93-845c-492bcf418b71.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>删除数组的第一个元素-shift()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656988336-96687b65-74b8-49a1-8576-75594e429520.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>从一个数组中选择元素-slice()</p>\n</li>\n<li><ul>\n<li>slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分</li>\n<li>语法</li>\n</ul>\n</li>\n</ul>\n<p>stringObject.slice(start,end)</p>\n<ul>\n<li><ul>\n<li>返回值</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>一个新的字符串，包括字符串stratObject从strat开始（包括strat）到end结束（不包括end）为止的所有字符串</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657004800-d8713e65-4d1b-4835-8958-baf47b76d95a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>数组排序（按字母顺序升序）-sort()</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657014582-bdb1c470-3355-4e67-ad14-52c659845403.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>数字排序（按数字顺序升序）-sort()</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657037116-d77644e4-9970-43ba-8247-14f9811d9daf.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>数字排序（按数字顺序降序）-sort()</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657065901-7faa18d1-af03-443f-b5d2-d4c12611b404.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>在数组的第二位置添加一个元素 -splice()</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>splice()方法用于插入，删除，或者替换数组的元素</li>\n<li>语法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>arrayObject.splice(index,howmant,element1….,element1)</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index</td>\n<td>必需。规定从何处添加/删除元素。该参数是开始插入和(或)删除的数组元素的下标，必需是数字哦</td>\n</tr>\n<tr>\n<td>howmant</td>\n<td>必需。规定应该删除多少元素。必须是数字，但可以是（0）。如果未规定此参数，则删除从index开始到原数组结尾的所有元素</td>\n</tr>\n<tr>\n<td>element1</td>\n<td>可选。规定要添加到数组的新元素。从index所指的下标处开始插入</td>\n</tr>\n<tr>\n<td>elementN</td>\n<td>可选。可向数组添加若干元素。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>返回值</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>如果从arrayObject中删除了元素，则返回的是含有被删除的元素的数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>注意：splice()方法和slice()方法的作用是不同的，splice()方法会直接对数组,行修改。</p>\n</li>\n<li><p>下边的这个例子就是替换了下标“1”至“3”里面的内容，包含1和3下标的内容，也就是说我把数组里的“33，22，66”替换成了“88,44”。</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657083608-3d4f358b-4c67-4628-b6f0-13a495c3ecd9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>转换数组到字符串 -toString()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657093306-a84ce473-7c65-478f-b512-a6d76c5929ff.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>在数组的开头添加新元素 -unshift()</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657101064-7db40d88-68aa-4bed-98ba-96f27ed56b9b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657111628-83befa05-ad97-4553-952f-75f9d40b5144.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"10-9-对象\"><a href=\"#10-9-对象\" class=\"headerlink\" title=\"10.9 对象\"></a>10.9 对象</h2><ul>\n<li><p>JavaScript对象</p>\n</li>\n<li><ul>\n<li>在JavaScript中，对象是拥有属性和方法的数据。</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>属性是与对象相关的值</li>\n<li>方法是能够在对象上执行的动作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>对象也是一个变量，但对象可以包含多个值（多个变量）</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657330235-d51b4bdc-70d3-4b9b-977b-a66c32d33174.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>上边这个例子中，三个值（**”Lamborghini”,999999,”black”**）赋予变量car</li>\n<li>三个变量（”neme”,price,color）赋予变量car</li>\n<li>JavaScript对象是变量的容器</li>\n<li>定义JavaScript对象是可以跨越多行，空格跟换行不是必须的</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657337152-f7388e63-dcdc-4916-929a-f6f523d3b3a7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_41,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657359063-4ae2da29-2812-4f6d-9e8f-0f85361ab3d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>对象属性</p>\n</li>\n<li><ul>\n<li>JavaScript对象是变量的容器</li>\n<li>JavaScript对象是键值对的容器</li>\n<li>键值对的基本写法为name:value（上边的例子就是喽）</li>\n<li>键值对在JavaScript对象中统称为对象属性。</li>\n<li>访问对象属性</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>可以用对象名点属性（如：person.one）</li>\n<li>也可以用对象名[“属性”]（如：person[“one”]）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657371647-620ad6cf-4996-4ec9-b676-c8aadde3a394.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657376463-7a710ad9-a526-457b-a68d-f3972c9f4bc4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>对象方法</p>\n</li>\n<li><ul>\n<li>对象的方法定义了一个函数，并作为对象的属性存储</li>\n<li>对象方法通过添加()调用（当成函数调用）</li>\n<li>下边的这个例子访问了person对象的all()方法（如果直接访问person对象的all属性，它将作为定义一个函数的字符串返回，也就是说把后边的代码直接返回，并且打印出来）</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>访问方法（例：person.all()）</li>\n<li>访问属性（例：person.all）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>(十)JavaScript基础</p>","more":"<h2 id=\"10-1-概述\"><a href=\"#10-1-概述\" class=\"headerlink\" title=\"10.1 概述\"></a>10.1 概述</h2><p>JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。</p>\n<ul>\n<li>是一种解释性脚本语言（代码不进行预编译）。</li>\n<li>主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。</li>\n<li>可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。</li>\n<li>跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。</li>\n</ul>\n<p>Javascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。</p>\n<h2 id=\"10-2-JavaScript能做什么\"><a href=\"#10-2-JavaScript能做什么\" class=\"headerlink\" title=\"10.2 JavaScript能做什么\"></a>10.2 JavaScript能做什么</h2><ul>\n<li>使网页具有交互性，例如响应用户点击，给用户提供更好的体验</li>\n<li>可以处理表单，检验用户的输入，并提供及时反馈节省用户时间。例如，表单中要你输入电子邮箱而你却输入一个手机号，那么应该给你一个提醒。</li>\n<li>还可以根据用户的操作，动态的创建页面。例如，发邮件时，添加附件操作。</li>\n<li>设置cookie，cookie是存储在浏览器上的一些临时信息，例如你浏览过的网站地址，使用过的用户名</li>\n<li>JavaScript 是有规律地重复的HTML元素简化，减少下载时间。</li>\n<li>浏览器与服务器进行数据通讯，比如现在最流行的Ajax异步传输；</li>\n</ul>\n<h2 id=\"10-3-JavaScript构成\"><a href=\"#10-3-JavaScript构成\" class=\"headerlink\" title=\"10.3 JavaScript构成\"></a>10.3 JavaScript构成</h2><ul>\n<li><p>JavaScript由以下三部分组成：</p>\n</li>\n<li><ul>\n<li>ECMAScript，它用来描述语法和基本对象</li>\n<li>文档对象模型Doucment Object       Model（DOM），用来处理网页内容</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651195487-efff79bc-a3b0-45b8-9a7a-faf1c6d7abda.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>浏览器对象模型Borwser Object Model（BOM），用来处理浏览器交互</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651202360-0b177732-6264-4def-9a1b-fdda98bbc257.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<h2 id=\"10-4-JavaScript的开发环境与运行环境\"><a href=\"#10-4-JavaScript的开发环境与运行环境\" class=\"headerlink\" title=\"10.4 JavaScript的开发环境与运行环境\"></a>10.4 JavaScript的开发环境与运行环境</h2><ul>\n<li>JavaScript为轻型脚本语言，可在任意文本编辑器中编辑</li>\n<li>由于JavaScript是内嵌在HTML中执行，所以其运行环境即浏览器</li>\n</ul>\n<h2 id=\"10-5-JavaScript的使用\"><a href=\"#10-5-JavaScript的使用\" class=\"headerlink\" title=\"10.5 JavaScript的使用\"></a>10.5 JavaScript的使用</h2><ul>\n<li><p>JavaScript需在HTML中内嵌运行，其内嵌方式有两种：</p>\n</li>\n<li><ul>\n<li>在网页中创建&lt;script&gt;&lt;/script&gt;,在标签之间写JavaScript代码</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"javascript\">&lt;script&gt;\n      alert(&quot;hello world&quot;)\n&lt;script&gt;\n</code></pre>\n<ul>\n<li><ul>\n<li>在外部创建“.js”文件，通过&lt;script src=”文件路径”&gt;引入到HTML文件中执行</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"html\">&lt;head&gt;\n    &lt;script src=&quot;xxx/xxx.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n<h2 id=\"10-6-JavaScript基础\"><a href=\"#10-6-JavaScript基础\" class=\"headerlink\" title=\"10.6 JavaScript基础\"></a>10.6 JavaScript基础</h2><ul>\n<li><p>值</p>\n</li>\n<li><ul>\n<li>数字类型的值（数字）</li>\n<li>算术值（加减乘除等运算，需要两个或两个以上的数字）</li>\n<li>特殊数字</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在JavaScript中有三个特殊数值，他们被视为数字，但其行为不像普通数字那样</li>\n<li>Infinity和-Infinity表示正无穷大和负无穷大</li>\n<li>NaN代表不是数字，就是不当的算数运算得到不当的值（比如：0/0或者Infinity-Infinity都会得到这样的值）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>字符串（用于表示文本，使用引号引起来即可）</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在字符串中还需要注意</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>在引号中添加特殊字符时比较难加，但是只需要添加反引号”`“就可解决这个问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>console.log(<code>hello my   &quot;son&quot;</code>);</p>\n<ul>\n<li><p>转义符（\\）</p>\n</li>\n<li><ul>\n<li>出现在引用文本中，表示后面有特殊字符</li>\n<li>换行符（\\n）</li>\n<li>制表符（\\t）</li>\n<li>如果希望字符串中的斜杠只是斜杠，可以使用两个斜杠</li>\n</ul>\n</li>\n</ul>\n<p>console.log(“l   input &quot;\\n&quot;“);</p>\n<ul>\n<li><p>运算符</p>\n</li>\n<li><ul>\n<li>一元运算符</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>在JavaScript中并非所有的运算符都是由符号构成的，还有由单词构成的符号，如：typeof运算符用来生成一个字符串，表示你输入数据的类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>console.log(typeof   2.2);console.log(typeof   “hello”);</p>\n<ul>\n<li><p>布尔值</p>\n</li>\n<li><ul>\n<li>比较运算符（&gt;,&lt;,&lt;=,&lt;=……）</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>比较运算符属于二元运算符</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>console.log(1&lt;2)</p>\n<ul>\n<li>字符串也是可以比较的</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(a&gt;b)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字符串在比较时大致时按照字母的顺序比较，而小写字母的大于大写字母，在字符串比较是JavaScript从左道右遍历字符按照字母的unicode编码进行比较</td>\n</tr>\n<tr>\n<td>注意：在JavaScript中只有一个值不等于它自己，他就是NaN（不是数字）console.log(NaN==NaN)返回false</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>逻辑运算符（与，或，非）</p>\n</li>\n<li><ul>\n<li>&amp;&amp;:表示逻辑与，表示结果为真才为真</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(true&amp;&amp;false)</th>\n<th>false</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>console.log(true&amp;&amp;true)</td>\n<td>true</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>||：表示逻辑或，表示一个为真，则为真</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(true||false)</th>\n<th>true</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>console.log(false||false)</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>!：表示逻辑非，表示取反</li>\n<li>在上边两种运算符混合使用时需要注意他们的优先级，一般情况下是,||具有最低优先级，然后时&amp;&amp;，然后是比较运算符，再然后时其他运算符</li>\n<li>三元运算符，由问号和冒号写成</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(true?1:2)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>console.log(false?1:2)</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>空值</p>\n</li>\n<li><ul>\n<li>再JavaScript中使用null和undefined表示空值</li>\n</ul>\n</li>\n<li><p>自动类型转换</p>\n</li>\n<li><ul>\n<li>JavaScript的包容性时相当高的，几乎可以接受你给他的任何程序</li>\n<li>当运算符应用不同类型的值时，JavaScript会使用一组规则自动将值转换成所需要的类型供你使用（强制类型转换）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>console.log(8*null)–&gt;0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>console.log(“3”-1)–&gt;2</td>\n</tr>\n<tr>\n<td>console.log(“3”+1)–&gt;31</td>\n</tr>\n<tr>\n<td>console.log(“six”*1)–&gt;NaN</td>\n</tr>\n<tr>\n<td>console.log(false==0)–&gt;true</td>\n</tr>\n<tr>\n<td>console.log(null==undefined)–&gt;true</td>\n</tr>\n<tr>\n<td>console.log(null==0)–&gt;false</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>表达式</p>\n</li>\n<li><ul>\n<li>生成值得代码片段称之为表达式</li>\n</ul>\n</li>\n</ul>\n<p>console.log(1+1);</p>\n<ul>\n<li><p>绑定（变量）</p>\n</li>\n<li><ul>\n<li>·JavaScript为了让程序中得数据保持提供了一个称为绑定（binding）或变量（variable）得东西</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>let属于JavaScript关键字表示将定义一个绑定，它得后面是绑定名称，如果我们想给它一个值，则由”=”运算符和表达式来完成</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>let a =   1*2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>let num =   10; console.log(num*num);</td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li><ul>\n<li>当绑定值指向一个值时并部意味着它永远时该值，”=”运算符随时可以更新绑定赋予绑定新值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>let   name=”张三”;conlose.log(name);name   = “李四”;console.log(name);</p>\n<ul>\n<li><ul>\n<li><ul>\n<li>在JavaScript中不单单可以使用let去做绑定,var和const两个也可以用于绑定</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>var   name=”hello”;console.log(name);</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>const demo   = “world”;console.log(demo);</td>\n</tr>\n<tr>\n<td>console.log(name+demo);</td>\n</tr>\n<tr>\n<td>注：1.var全称(variable)表示变量，多用于以前得JavaScript中声明绑定2.const全称（constant），表示定义一个常量绑定，只要它存在，它就一直指向相同得值</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>JavaScript语句</p>\n</li>\n<li><ul>\n<li>JavaScript语句是发给浏览器的命令</li>\n<li>这些命令的作用是告诉浏览器要做的事情</li>\n<li>比如</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652275534-6e34e0ea-ce7f-4cb2-b9f5-a303441fbb5b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652282839-d8f3b6f0-bb99-4311-af61-9ec9d1d592a7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n<tr>\n<td>解析：点击hello world后，触发JavaScript点击事件（onclick点击事件，点击后innerHTML替换标签里的内容，即把”hello world“替换成“世界 你好”）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>分号</p>\n</li>\n<li><ul>\n<li>分号用于分隔JavaScript语句</li>\n<li>通常我们在每条可执行的语句结尾添加分号，代表作一句JavaScript语句的结束</li>\n<li>使用分号的另一个好处就是。。。。能在一行多写点代码嘛</li>\n</ul>\n</li>\n<li><p>JavaScript代码</p>\n</li>\n<li><ul>\n<li>JavaScript代码是JavaScript语句的序列</li>\n<li>浏览器按照编写顺序依次执行每条语句</li>\n</ul>\n</li>\n<li><p>JavaScript代码块</p>\n</li>\n<li><ul>\n<li>JavaScript可以分批地组合起来</li>\n<li>代码块以左花括号开始，以右花括号结束</li>\n<li>代码块的作用是一并执行语句序列</li>\n</ul>\n</li>\n<li><p>示例</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652313702-584a551d-bd15-4e8c-873f-304b09194343.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652326450-8100dccd-e3b6-4e7d-afbc-1246a23c2fc5.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>JavaScript语句标识符</p>\n</li>\n<li><ul>\n<li>JavaScript语句通常以一个语句标识符为开始，并执行该语句。</li>\n<li>语句标识符是保留关键字不能作为变量名使用</li>\n<li>JavaScript语句标识符（关键字）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语句</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>break</td>\n<td>用于跳出循环</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>语句块，在try语句块执行出错时执行catch语句块</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>跳过循环的一个迭代</td>\n</tr>\n<tr>\n<td>do…while</td>\n<td>执行一个语句块，在条件语句为true时继续执行该语句块</td>\n</tr>\n<tr>\n<td>for</td>\n<td>在条件语句为true时，可以将代码块执行指定的次数</td>\n</tr>\n<tr>\n<td>for…in</td>\n<td>用于遍历数组或对象的属性（对数组或者对象的属性进行循环操作）</td>\n</tr>\n<tr>\n<td>function</td>\n<td>定义一个函数</td>\n</tr>\n<tr>\n<td>if…else</td>\n<td>用于基于不同的条件来执行不同的动作</td>\n</tr>\n<tr>\n<td>return</td>\n<td>退出函数</td>\n</tr>\n<tr>\n<td>switch</td>\n<td>用于基于不同条件来执行不同的动作</td>\n</tr>\n<tr>\n<td>throw</td>\n<td>抛出错误</td>\n</tr>\n<tr>\n<td>try</td>\n<td>实现错误处理，与catch一同使用</td>\n</tr>\n<tr>\n<td>var</td>\n<td>声明一个变量</td>\n</tr>\n<tr>\n<td>while</td>\n<td>当条件语句为true时，执行语句块</td>\n</tr>\n</tbody></table>\n<ul>\n<li>代码折行</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>document.write(“hello   \\ world”)；</th>\n<th>但是不能这么折行document.write(“hello world”)；</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"10-7-JavaScript数据类型\"><a href=\"#10-7-JavaScript数据类型\" class=\"headerlink\" title=\"10.7 JavaScript数据类型\"></a>10.7 JavaScript数据类型</h2><ul>\n<li>javascript属于弱语言，它的变量没有明确的数据类型，它的数据类型是由它存储的值自己推断出来的</li>\n<li>常见数据类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>具体描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>number</td>\n<td>能存储整数和小数类型</td>\n</tr>\n<tr>\n<td>string</td>\n<td>用单引号或双引号来声明的字符串</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>只能是两个值选择：true、false</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>变量被声明后，但未被赋值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>javascript中的对象、数组和null</td>\n</tr>\n</tbody></table>\n<ul>\n<li>在JavaScript中可以使用typeof()函数来检查变量的返回值类型</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655653508-92e34507-ef26-46c0-92e5-fd7054983ad7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>JavaScript拥有动态类型，这意味着相同的变量可用作不同的类型</li>\n</ul>\n<p>var x；//x为undefinedvar   x = 5；//x为数字var   x = “hello”;//x为字符串</p>\n<ul>\n<li><p>JavaScript字符串</p>\n</li>\n<li><ul>\n<li>字符串是存储字符的变量</li>\n<li>字符串可以是引号中的任意文本。可以使用单引号或者双引号</li>\n</ul>\n</li>\n</ul>\n<p>var name =   “tom”;var name =   ‘tom’;</p>\n<ul>\n<li>也可以在字符串中使用引号，只要不匹配包围字符串的引号即可</li>\n</ul>\n<p>var answer   = “let’go”;var answer   = “my name is ‘tom’ “;</p>\n<ul>\n<li><p>JavaScript数字</p>\n</li>\n<li><ul>\n<li>JavaScript只有一种数字类型。数字可以带小数点。</li>\n</ul>\n</li>\n</ul>\n<p>var a = 3;var b =   3.14;</p>\n<ul>\n<li>极大或极小的数字可以通过科学计数来书写</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>var a =   123e5;//12300000</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var b =   123e-5;//0.00123</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>JavaScript布尔</p>\n</li>\n<li><ul>\n<li>布尔（逻辑）只能有两个值：true或false</li>\n</ul>\n</li>\n</ul>\n<p>var a =   false;var b =   true;</p>\n<ul>\n<li><p>布尔常用在条件测试中。这个我们将在之后详解</p>\n</li>\n<li><p>JavaScript数组</p>\n</li>\n<li><ul>\n<li>详见10.8节</li>\n</ul>\n</li>\n<li><p>JavaScript对象</p>\n</li>\n<li><ul>\n<li>详见10.9节</li>\n<li>对象由花括号分隔。在扩号内部，对象的属性以名称和值对的形式（键值对 name：value）来定义，属性由逗号分隔</li>\n<li>对象有两种寻址方式：</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655910721-0a48b0a7-993c-45ca-a851-9d8a9f0216b6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655916757-28032444-e669-4911-8a08-0adc9bd721a0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>Undefined和Null</p>\n</li>\n<li><ul>\n<li>Undefined表示变量不含值</li>\n<li>Null可以通过将变量的值设置为Null来清空变量</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655925751-c01fd5d4-f3f1-4a93-b80f-4aff98f02075.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655944042-42c54dea-cfb9-4ae5-b05b-700a4977857f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>声明变量类型</p>\n</li>\n<li><ul>\n<li>当声明新变量时，可以使用关键词“new”来声明其类型</li>\n</ul>\n</li>\n</ul>\n<p>var   name = new String; var age   = new Number;var   money = new boolean;var   cars = new Arrays;var   person = new Object;</p>\n<h2 id=\"10-8-数组\"><a href=\"#10-8-数组\" class=\"headerlink\" title=\"10.8 数组\"></a>10.8 数组</h2><ul>\n<li><p>什么是数组</p>\n</li>\n<li><ul>\n<li>数组对象是使用单独的变量名来存储一系列相同类型的值</li>\n<li>数字可以用一个变量名存储所有的值，并且可以用变量名访问任何一个值</li>\n<li>数组中的每个元素都有自己的ID，以便它可以很容易地被访问到</li>\n</ul>\n</li>\n<li><p>创建数组，有几种不同的方式</p>\n</li>\n<li><ul>\n<li>常规方式</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656318089-149f266a-0657-417b-8911-de077af3a0f9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>简洁方式</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656324807-3401185c-a1b8-4ed5-beb7-cf10312d944f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>字面方式</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656333229-64159517-3a00-411f-9c39-8fd82965fabd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>访问数组</p>\n</li>\n<li><ul>\n<li>通过上边的几个例子，大家应该能看出来数组是怎么访问的</li>\n<li>语法：数组名[下标] </li>\n</ul>\n</li>\n</ul>\n<p>arr[1]</p>\n<ul>\n<li><ul>\n<li>在数组中[0]代表数组的第一个元素，[1]则代表的是第二个元素</li>\n</ul>\n</li>\n<li><p>来个数组式循环弹窗看看</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656416554-a1696c63-5193-447f-8671-1517574a0e6b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_38,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<p>弹窗完事了，再顺道在页面中把数组里的值打印出来看看<img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656471840-ecbb7e13-667b-4345-97a4-60a849ed451e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_37,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>在一个数组中可以有不同的对象</p>\n</li>\n<li><ul>\n<li>所有的JavaScript变量都是对象，数组元素是对象，函数也是对象</li>\n<li>因此，我们可以在数组中有不同的变量类型</li>\n<li>我们可以在一个数组中包含对象元素，函数，数组</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656507497-a9128903-1f51-48a0-af1b-f9071ff0f389.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>数组方法和属性</p>\n</li>\n<li><ul>\n<li>使用数组对象预定义属性和方法</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>var    a = 数组名.length    //length元素的数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var    b = 数组名.indexOf(“需要索引的字段”)  //括号里面为索引值</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>更多的实例</p>\n</li>\n<li><ul>\n<li>合并两个数组-concat()</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656639810-73054345-0af6-4c4c-9ba2-fc7620a200bc.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656647809-524de2d0-01a1-475f-8190-1ae2329987a5.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>合并三个数组-concat()</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656677924-8ac387d8-aeda-4de2-bb7f-a6e719d44605.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656681979-9220fb0b-ae48-4483-b788-aa30761ed63e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>用数组的元素组合字符串-join()</p>\n</li>\n<li><ul>\n<li>join()方法用于把数组中的所有元素放入一个字符串</li>\n<li>元素是同过指定的分隔符分隔的</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>arrayObject.join(separator)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>separator：指定要使用的分隔符，如果省略改参数，则使用逗号作为分隔符</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656712682-e75f5712-761e-4ad0-9d2e-e3d46917c3ac.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>点击前<img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656792868-b57e6395-7e1b-4fe0-bfbf-3097f9045020.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\">点击后<img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656804077-1e9c4969-4c6a-4c0c-95b2-aece511e9d18.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656829884-022208bc-cf0a-4e17-bc1d-9e3fe8f751f4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656840313-375d5f2a-6526-4cdd-b076-4817ed5fabc0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>删除数组的最后一个元素-pop()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656953405-b87be9c8-c90c-445e-8960-44bf3532e01d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>数组的末尾添加新的元素-push()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656962674-6cef5d2d-3acd-464b-b246-c412e5b99bc7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>将一个数组中的元素的顺序反转排序-reverse()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656973478-9c465b63-bed9-4d93-845c-492bcf418b71.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>删除数组的第一个元素-shift()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656988336-96687b65-74b8-49a1-8576-75594e429520.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><p>从一个数组中选择元素-slice()</p>\n</li>\n<li><ul>\n<li>slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分</li>\n<li>语法</li>\n</ul>\n</li>\n</ul>\n<p>stringObject.slice(start,end)</p>\n<ul>\n<li><ul>\n<li>返回值</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>一个新的字符串，包括字符串stratObject从strat开始（包括strat）到end结束（不包括end）为止的所有字符串</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657004800-d8713e65-4d1b-4835-8958-baf47b76d95a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>数组排序（按字母顺序升序）-sort()</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657014582-bdb1c470-3355-4e67-ad14-52c659845403.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>数字排序（按数字顺序升序）-sort()</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657037116-d77644e4-9970-43ba-8247-14f9811d9daf.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>数字排序（按数字顺序降序）-sort()</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657065901-7faa18d1-af03-443f-b5d2-d4c12611b404.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>在数组的第二位置添加一个元素 -splice()</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>splice()方法用于插入，删除，或者替换数组的元素</li>\n<li>语法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>arrayObject.splice(index,howmant,element1….,element1)</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index</td>\n<td>必需。规定从何处添加/删除元素。该参数是开始插入和(或)删除的数组元素的下标，必需是数字哦</td>\n</tr>\n<tr>\n<td>howmant</td>\n<td>必需。规定应该删除多少元素。必须是数字，但可以是（0）。如果未规定此参数，则删除从index开始到原数组结尾的所有元素</td>\n</tr>\n<tr>\n<td>element1</td>\n<td>可选。规定要添加到数组的新元素。从index所指的下标处开始插入</td>\n</tr>\n<tr>\n<td>elementN</td>\n<td>可选。可向数组添加若干元素。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>返回值</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>如果从arrayObject中删除了元素，则返回的是含有被删除的元素的数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>注意：splice()方法和slice()方法的作用是不同的，splice()方法会直接对数组,行修改。</p>\n</li>\n<li><p>下边的这个例子就是替换了下标“1”至“3”里面的内容，包含1和3下标的内容，也就是说我把数组里的“33，22，66”替换成了“88,44”。</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657083608-3d4f358b-4c67-4628-b6f0-13a495c3ecd9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>转换数组到字符串 -toString()</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657093306-a84ce473-7c65-478f-b512-a6d76c5929ff.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li>在数组的开头添加新元素 -unshift()</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657101064-7db40d88-68aa-4bed-98ba-96f27ed56b9b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657111628-83befa05-ad97-4553-952f-75f9d40b5144.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"10-9-对象\"><a href=\"#10-9-对象\" class=\"headerlink\" title=\"10.9 对象\"></a>10.9 对象</h2><ul>\n<li><p>JavaScript对象</p>\n</li>\n<li><ul>\n<li>在JavaScript中，对象是拥有属性和方法的数据。</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>属性是与对象相关的值</li>\n<li>方法是能够在对象上执行的动作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>对象也是一个变量，但对象可以包含多个值（多个变量）</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657330235-d51b4bdc-70d3-4b9b-977b-a66c32d33174.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<ul>\n<li><ul>\n<li>上边这个例子中，三个值（**”Lamborghini”,999999,”black”**）赋予变量car</li>\n<li>三个变量（”neme”,price,color）赋予变量car</li>\n<li>JavaScript对象是变量的容器</li>\n<li>定义JavaScript对象是可以跨越多行，空格跟换行不是必须的</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657337152-f7388e63-dcdc-4916-929a-f6f523d3b3a7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_41,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657359063-4ae2da29-2812-4f6d-9e8f-0f85361ab3d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>对象属性</p>\n</li>\n<li><ul>\n<li>JavaScript对象是变量的容器</li>\n<li>JavaScript对象是键值对的容器</li>\n<li>键值对的基本写法为name:value（上边的例子就是喽）</li>\n<li>键值对在JavaScript对象中统称为对象属性。</li>\n<li>访问对象属性</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>可以用对象名点属性（如：person.one）</li>\n<li>也可以用对象名[“属性”]（如：person[“one”]）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657371647-620ad6cf-4996-4ec9-b676-c8aadde3a394.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n<th><img src=\"https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657376463-7a710ad9-a526-457b-a68d-f3972c9f4bc4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>对象方法</p>\n</li>\n<li><ul>\n<li>对象的方法定义了一个函数，并作为对象的属性存储</li>\n<li>对象方法通过添加()调用（当成函数调用）</li>\n<li>下边的这个例子访问了person对象的all()方法（如果直接访问person对象的all属性，它将作为定义一个函数的字符串返回，也就是说把后边的代码直接返回，并且打印出来）</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>访问方法（例：person.all()）</li>\n<li>访问属性（例：person.all）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"(四)CSS3概述","date":"2022-07-08T11:41:48.000Z","cover":"https://tse4-mm.cn.bing.net/th/id/OIP-C.rEFlZf2xiI2BUY6BCII6QgHaEL?pid=ImgDet&rs=1","coverWidth":730,"coverHeight":312,"author":"xiguayaaaaa","from":null,"_content":"(四)CSS3概述\n<!--more-->\n\n## 4.1 CSS概述\n\n####  4.1.1 CSS 是什么\n\nCSS全称 Cascading Style Sheets层叠样式表，是一种用来表现文件样式的计算机语言。\n1.CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。\n2.CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式。\n3.CSS拥有对网页对象和模型样式编辑的能力。\n4.在主页制作时采用CSS技术，可以有效地对页面的布局、字体、颜色等效果实现更加精确的控制。\n\n#### 4.1.2 CSS历史\n\n接下来，我们从总体上看一下CSS的发展历史。\n\nCSS 1。\n\n1996年12月，CSS 1(Cascading Style Sheets,level 1)正式推出。在这个版本中，已经包含了font的相关属性、颜色与背景的相关属性、文字的相关属性、box的相关属性等。\n\nCSS 2。\n\n1998年5月，CSS 2(Cascading Style Sheets,level 2)正式推出。在这个版本中开始使用样式表结构。\n\nCSS 2.1。\n\n2004年2月，CSS 2.1(Cascading Style Sheets,level 2 revision 1)正式推出。它在CSS 2的基础上略微做了改动，删除了许多诸如text-shadow等不被浏览器所支持的属性。\n\n现在所使用的CSS基本上是在1998年推出的CSS 2的基础上发展而来的。10年前在Internet刚开始普及的时候，就能够使用样式表来对网页进行视觉效果的统一编辑，确实是一件可喜的事情。但是在这10年间CSS可以说是基本上没有什么很大的变化，一直到2010年终于推出了一个全新的版本———CSS 3。\n\n## 4.2 使用CSS能做什么\n\n#### 4.2.1 模块与模块化结构\n\n在CSS中，采用分工协作的模块化结构，如下表\n\n| 模块名称                          | 功能描述                                                     |\n| --------------------------------- | ------------------------------------------------------------ |\n| basic box model                   | 定义各种与盒相关的样式                                       |\n| Line                              | 定义各种与直线相关的样式                                     |\n| Lists                             | 定义各种与列表相关的样式                                     |\n| Hyperlink Presentation            | 定义各种与超链接相关的样式。訾如锚的显示方式、激活时的视觉效果等 |\n| Presentation Levels               | 定义页面中元素的不同的样式级别                               |\n| Speech                            | 定义各种与语音相关的样式。譬如音量、音速、说话间歇时间等属性 |\n| Background and border             | 定义各种与背景和边框相关的样式                               |\n| Text                              | 定义各种与文字相关的样式                                     |\n| Color                             | 定义各种与颜色相关的样式                                     |\n| Font                              | 定义各种与字体相关的样式                                     |\n| Paged Media                       | 定义各种页眉、页脚、页数等页面元数据的样式                   |\n| Cascading and inheritance         | 定义怎样对属性进行赋值                                       |\n| Value and Units                   | 将页面上各种各样的值与单位进行统一定义，以供其他模块使用     |\n| Image Values                      | 定义对image元素的赋值方式                                    |\n| 2D Transforms                     | 在页面中实现2维空间上的变形效果                              |\n| 3D Transforms                     | 在页面中实现3维空间上的变形效果                              |\n| Transitions                       | 在页面中实现平滑过渡的视觉效果                               |\n| Animations                        | 在页面中实现动画                                             |\n| CSSOM View                        | 查看管理页面或页面的视觉效果，处理元素的位置信息             |\n| Syntax                            | 定义CSS样式表的基本结构、样式表中的-一些语法细节、浏览器对于样式表的分析规则 |\n| Generated and Replaced Content    | 定义怎样在元素中插入内容                                     |\n| Marquee                           | 定义当一些元素的内容太大，超出了指定的元素尺寸时，是否以及怎样显示溢出部分 |\n| Ruby                              | 定义页面中ruby元素（用于显示拼音文字)的样式                  |\n| Writing Modes                     | 定义页面中文本数据的布局方式                                 |\n| Basic User Interface              | 定义在屏幕、纸张上进行输出时页面的渲染方式                   |\n| Namespaces                        | 定义使用命名空间时的语法                                     |\n| Media Queries                     | 根据媒体类型来实现不同的样式                                 |\n| ‘Reader’Media Type                | 定义用于屏幕阅读器之类的阅读程序时的样式                     |\n| Multi-column Layout               | 在页面中使用多栏布局方式                                     |\n| Template Layout                   | 在页面中使用特殊布局方式                                     |\n| Flexible Box Layout               | 创建自适应浏览器窗口的流动布局或自适应字体大小的弹性布局     |\n| Grid Position                     | 在页面中使用网格布局方                                       |\n| Generated Content for Paged Media | 在页面中使用印刷时使用的布局方式                             |","source":"_posts/四-CSS3概述.md","raw":"---\ntitle: (四)CSS3概述\ndate: 2022-07-08 19:41:48\ntags:\n- 知识\ncategories:\n- 前端组\ncover: https://tse4-mm.cn.bing.net/th/id/OIP-C.rEFlZf2xiI2BUY6BCII6QgHaEL?pid=ImgDet&rs=1\ncoverWidth: 730\ncoverHeight: 312\nauthor: xiguayaaaaa\nfrom:\n---\n(四)CSS3概述\n<!--more-->\n\n## 4.1 CSS概述\n\n####  4.1.1 CSS 是什么\n\nCSS全称 Cascading Style Sheets层叠样式表，是一种用来表现文件样式的计算机语言。\n1.CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。\n2.CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式。\n3.CSS拥有对网页对象和模型样式编辑的能力。\n4.在主页制作时采用CSS技术，可以有效地对页面的布局、字体、颜色等效果实现更加精确的控制。\n\n#### 4.1.2 CSS历史\n\n接下来，我们从总体上看一下CSS的发展历史。\n\nCSS 1。\n\n1996年12月，CSS 1(Cascading Style Sheets,level 1)正式推出。在这个版本中，已经包含了font的相关属性、颜色与背景的相关属性、文字的相关属性、box的相关属性等。\n\nCSS 2。\n\n1998年5月，CSS 2(Cascading Style Sheets,level 2)正式推出。在这个版本中开始使用样式表结构。\n\nCSS 2.1。\n\n2004年2月，CSS 2.1(Cascading Style Sheets,level 2 revision 1)正式推出。它在CSS 2的基础上略微做了改动，删除了许多诸如text-shadow等不被浏览器所支持的属性。\n\n现在所使用的CSS基本上是在1998年推出的CSS 2的基础上发展而来的。10年前在Internet刚开始普及的时候，就能够使用样式表来对网页进行视觉效果的统一编辑，确实是一件可喜的事情。但是在这10年间CSS可以说是基本上没有什么很大的变化，一直到2010年终于推出了一个全新的版本———CSS 3。\n\n## 4.2 使用CSS能做什么\n\n#### 4.2.1 模块与模块化结构\n\n在CSS中，采用分工协作的模块化结构，如下表\n\n| 模块名称                          | 功能描述                                                     |\n| --------------------------------- | ------------------------------------------------------------ |\n| basic box model                   | 定义各种与盒相关的样式                                       |\n| Line                              | 定义各种与直线相关的样式                                     |\n| Lists                             | 定义各种与列表相关的样式                                     |\n| Hyperlink Presentation            | 定义各种与超链接相关的样式。訾如锚的显示方式、激活时的视觉效果等 |\n| Presentation Levels               | 定义页面中元素的不同的样式级别                               |\n| Speech                            | 定义各种与语音相关的样式。譬如音量、音速、说话间歇时间等属性 |\n| Background and border             | 定义各种与背景和边框相关的样式                               |\n| Text                              | 定义各种与文字相关的样式                                     |\n| Color                             | 定义各种与颜色相关的样式                                     |\n| Font                              | 定义各种与字体相关的样式                                     |\n| Paged Media                       | 定义各种页眉、页脚、页数等页面元数据的样式                   |\n| Cascading and inheritance         | 定义怎样对属性进行赋值                                       |\n| Value and Units                   | 将页面上各种各样的值与单位进行统一定义，以供其他模块使用     |\n| Image Values                      | 定义对image元素的赋值方式                                    |\n| 2D Transforms                     | 在页面中实现2维空间上的变形效果                              |\n| 3D Transforms                     | 在页面中实现3维空间上的变形效果                              |\n| Transitions                       | 在页面中实现平滑过渡的视觉效果                               |\n| Animations                        | 在页面中实现动画                                             |\n| CSSOM View                        | 查看管理页面或页面的视觉效果，处理元素的位置信息             |\n| Syntax                            | 定义CSS样式表的基本结构、样式表中的-一些语法细节、浏览器对于样式表的分析规则 |\n| Generated and Replaced Content    | 定义怎样在元素中插入内容                                     |\n| Marquee                           | 定义当一些元素的内容太大，超出了指定的元素尺寸时，是否以及怎样显示溢出部分 |\n| Ruby                              | 定义页面中ruby元素（用于显示拼音文字)的样式                  |\n| Writing Modes                     | 定义页面中文本数据的布局方式                                 |\n| Basic User Interface              | 定义在屏幕、纸张上进行输出时页面的渲染方式                   |\n| Namespaces                        | 定义使用命名空间时的语法                                     |\n| Media Queries                     | 根据媒体类型来实现不同的样式                                 |\n| ‘Reader’Media Type                | 定义用于屏幕阅读器之类的阅读程序时的样式                     |\n| Multi-column Layout               | 在页面中使用多栏布局方式                                     |\n| Template Layout                   | 在页面中使用特殊布局方式                                     |\n| Flexible Box Layout               | 创建自适应浏览器窗口的流动布局或自适应字体大小的弹性布局     |\n| Grid Position                     | 在页面中使用网格布局方                                       |\n| Generated Content for Paged Media | 在页面中使用印刷时使用的布局方式                             |","slug":"四-CSS3概述","published":1,"updated":"2022-07-19T02:38:48.765Z","_id":"cl5hmbtm4001j2cuj7vec3n89","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(四)CSS3概述</p>\n<span id=\"more\"></span>\n\n<h2 id=\"4-1-CSS概述\"><a href=\"#4-1-CSS概述\" class=\"headerlink\" title=\"4.1 CSS概述\"></a>4.1 CSS概述</h2><h4 id=\"4-1-1-CSS-是什么\"><a href=\"#4-1-1-CSS-是什么\" class=\"headerlink\" title=\"4.1.1 CSS 是什么\"></a>4.1.1 CSS 是什么</h4><p>CSS全称 Cascading Style Sheets层叠样式表，是一种用来表现文件样式的计算机语言。<br>1.CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。<br>2.CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式。<br>3.CSS拥有对网页对象和模型样式编辑的能力。<br>4.在主页制作时采用CSS技术，可以有效地对页面的布局、字体、颜色等效果实现更加精确的控制。</p>\n<h4 id=\"4-1-2-CSS历史\"><a href=\"#4-1-2-CSS历史\" class=\"headerlink\" title=\"4.1.2 CSS历史\"></a>4.1.2 CSS历史</h4><p>接下来，我们从总体上看一下CSS的发展历史。</p>\n<p>CSS 1。</p>\n<p>1996年12月，CSS 1(Cascading Style Sheets,level 1)正式推出。在这个版本中，已经包含了font的相关属性、颜色与背景的相关属性、文字的相关属性、box的相关属性等。</p>\n<p>CSS 2。</p>\n<p>1998年5月，CSS 2(Cascading Style Sheets,level 2)正式推出。在这个版本中开始使用样式表结构。</p>\n<p>CSS 2.1。</p>\n<p>2004年2月，CSS 2.1(Cascading Style Sheets,level 2 revision 1)正式推出。它在CSS 2的基础上略微做了改动，删除了许多诸如text-shadow等不被浏览器所支持的属性。</p>\n<p>现在所使用的CSS基本上是在1998年推出的CSS 2的基础上发展而来的。10年前在Internet刚开始普及的时候，就能够使用样式表来对网页进行视觉效果的统一编辑，确实是一件可喜的事情。但是在这10年间CSS可以说是基本上没有什么很大的变化，一直到2010年终于推出了一个全新的版本———CSS 3。</p>\n<h2 id=\"4-2-使用CSS能做什么\"><a href=\"#4-2-使用CSS能做什么\" class=\"headerlink\" title=\"4.2 使用CSS能做什么\"></a>4.2 使用CSS能做什么</h2><h4 id=\"4-2-1-模块与模块化结构\"><a href=\"#4-2-1-模块与模块化结构\" class=\"headerlink\" title=\"4.2.1 模块与模块化结构\"></a>4.2.1 模块与模块化结构</h4><p>在CSS中，采用分工协作的模块化结构，如下表</p>\n<table>\n<thead>\n<tr>\n<th>模块名称</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>basic box model</td>\n<td>定义各种与盒相关的样式</td>\n</tr>\n<tr>\n<td>Line</td>\n<td>定义各种与直线相关的样式</td>\n</tr>\n<tr>\n<td>Lists</td>\n<td>定义各种与列表相关的样式</td>\n</tr>\n<tr>\n<td>Hyperlink Presentation</td>\n<td>定义各种与超链接相关的样式。訾如锚的显示方式、激活时的视觉效果等</td>\n</tr>\n<tr>\n<td>Presentation Levels</td>\n<td>定义页面中元素的不同的样式级别</td>\n</tr>\n<tr>\n<td>Speech</td>\n<td>定义各种与语音相关的样式。譬如音量、音速、说话间歇时间等属性</td>\n</tr>\n<tr>\n<td>Background and border</td>\n<td>定义各种与背景和边框相关的样式</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>定义各种与文字相关的样式</td>\n</tr>\n<tr>\n<td>Color</td>\n<td>定义各种与颜色相关的样式</td>\n</tr>\n<tr>\n<td>Font</td>\n<td>定义各种与字体相关的样式</td>\n</tr>\n<tr>\n<td>Paged Media</td>\n<td>定义各种页眉、页脚、页数等页面元数据的样式</td>\n</tr>\n<tr>\n<td>Cascading and inheritance</td>\n<td>定义怎样对属性进行赋值</td>\n</tr>\n<tr>\n<td>Value and Units</td>\n<td>将页面上各种各样的值与单位进行统一定义，以供其他模块使用</td>\n</tr>\n<tr>\n<td>Image Values</td>\n<td>定义对image元素的赋值方式</td>\n</tr>\n<tr>\n<td>2D Transforms</td>\n<td>在页面中实现2维空间上的变形效果</td>\n</tr>\n<tr>\n<td>3D Transforms</td>\n<td>在页面中实现3维空间上的变形效果</td>\n</tr>\n<tr>\n<td>Transitions</td>\n<td>在页面中实现平滑过渡的视觉效果</td>\n</tr>\n<tr>\n<td>Animations</td>\n<td>在页面中实现动画</td>\n</tr>\n<tr>\n<td>CSSOM View</td>\n<td>查看管理页面或页面的视觉效果，处理元素的位置信息</td>\n</tr>\n<tr>\n<td>Syntax</td>\n<td>定义CSS样式表的基本结构、样式表中的-一些语法细节、浏览器对于样式表的分析规则</td>\n</tr>\n<tr>\n<td>Generated and Replaced Content</td>\n<td>定义怎样在元素中插入内容</td>\n</tr>\n<tr>\n<td>Marquee</td>\n<td>定义当一些元素的内容太大，超出了指定的元素尺寸时，是否以及怎样显示溢出部分</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td>定义页面中ruby元素（用于显示拼音文字)的样式</td>\n</tr>\n<tr>\n<td>Writing Modes</td>\n<td>定义页面中文本数据的布局方式</td>\n</tr>\n<tr>\n<td>Basic User Interface</td>\n<td>定义在屏幕、纸张上进行输出时页面的渲染方式</td>\n</tr>\n<tr>\n<td>Namespaces</td>\n<td>定义使用命名空间时的语法</td>\n</tr>\n<tr>\n<td>Media Queries</td>\n<td>根据媒体类型来实现不同的样式</td>\n</tr>\n<tr>\n<td>‘Reader’Media Type</td>\n<td>定义用于屏幕阅读器之类的阅读程序时的样式</td>\n</tr>\n<tr>\n<td>Multi-column Layout</td>\n<td>在页面中使用多栏布局方式</td>\n</tr>\n<tr>\n<td>Template Layout</td>\n<td>在页面中使用特殊布局方式</td>\n</tr>\n<tr>\n<td>Flexible Box Layout</td>\n<td>创建自适应浏览器窗口的流动布局或自适应字体大小的弹性布局</td>\n</tr>\n<tr>\n<td>Grid Position</td>\n<td>在页面中使用网格布局方</td>\n</tr>\n<tr>\n<td>Generated Content for Paged Media</td>\n<td>在页面中使用印刷时使用的布局方式</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>(四)CSS3概述</p>","more":"<h2 id=\"4-1-CSS概述\"><a href=\"#4-1-CSS概述\" class=\"headerlink\" title=\"4.1 CSS概述\"></a>4.1 CSS概述</h2><h4 id=\"4-1-1-CSS-是什么\"><a href=\"#4-1-1-CSS-是什么\" class=\"headerlink\" title=\"4.1.1 CSS 是什么\"></a>4.1.1 CSS 是什么</h4><p>CSS全称 Cascading Style Sheets层叠样式表，是一种用来表现文件样式的计算机语言。<br>1.CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。<br>2.CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式。<br>3.CSS拥有对网页对象和模型样式编辑的能力。<br>4.在主页制作时采用CSS技术，可以有效地对页面的布局、字体、颜色等效果实现更加精确的控制。</p>\n<h4 id=\"4-1-2-CSS历史\"><a href=\"#4-1-2-CSS历史\" class=\"headerlink\" title=\"4.1.2 CSS历史\"></a>4.1.2 CSS历史</h4><p>接下来，我们从总体上看一下CSS的发展历史。</p>\n<p>CSS 1。</p>\n<p>1996年12月，CSS 1(Cascading Style Sheets,level 1)正式推出。在这个版本中，已经包含了font的相关属性、颜色与背景的相关属性、文字的相关属性、box的相关属性等。</p>\n<p>CSS 2。</p>\n<p>1998年5月，CSS 2(Cascading Style Sheets,level 2)正式推出。在这个版本中开始使用样式表结构。</p>\n<p>CSS 2.1。</p>\n<p>2004年2月，CSS 2.1(Cascading Style Sheets,level 2 revision 1)正式推出。它在CSS 2的基础上略微做了改动，删除了许多诸如text-shadow等不被浏览器所支持的属性。</p>\n<p>现在所使用的CSS基本上是在1998年推出的CSS 2的基础上发展而来的。10年前在Internet刚开始普及的时候，就能够使用样式表来对网页进行视觉效果的统一编辑，确实是一件可喜的事情。但是在这10年间CSS可以说是基本上没有什么很大的变化，一直到2010年终于推出了一个全新的版本———CSS 3。</p>\n<h2 id=\"4-2-使用CSS能做什么\"><a href=\"#4-2-使用CSS能做什么\" class=\"headerlink\" title=\"4.2 使用CSS能做什么\"></a>4.2 使用CSS能做什么</h2><h4 id=\"4-2-1-模块与模块化结构\"><a href=\"#4-2-1-模块与模块化结构\" class=\"headerlink\" title=\"4.2.1 模块与模块化结构\"></a>4.2.1 模块与模块化结构</h4><p>在CSS中，采用分工协作的模块化结构，如下表</p>\n<table>\n<thead>\n<tr>\n<th>模块名称</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>basic box model</td>\n<td>定义各种与盒相关的样式</td>\n</tr>\n<tr>\n<td>Line</td>\n<td>定义各种与直线相关的样式</td>\n</tr>\n<tr>\n<td>Lists</td>\n<td>定义各种与列表相关的样式</td>\n</tr>\n<tr>\n<td>Hyperlink Presentation</td>\n<td>定义各种与超链接相关的样式。訾如锚的显示方式、激活时的视觉效果等</td>\n</tr>\n<tr>\n<td>Presentation Levels</td>\n<td>定义页面中元素的不同的样式级别</td>\n</tr>\n<tr>\n<td>Speech</td>\n<td>定义各种与语音相关的样式。譬如音量、音速、说话间歇时间等属性</td>\n</tr>\n<tr>\n<td>Background and border</td>\n<td>定义各种与背景和边框相关的样式</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>定义各种与文字相关的样式</td>\n</tr>\n<tr>\n<td>Color</td>\n<td>定义各种与颜色相关的样式</td>\n</tr>\n<tr>\n<td>Font</td>\n<td>定义各种与字体相关的样式</td>\n</tr>\n<tr>\n<td>Paged Media</td>\n<td>定义各种页眉、页脚、页数等页面元数据的样式</td>\n</tr>\n<tr>\n<td>Cascading and inheritance</td>\n<td>定义怎样对属性进行赋值</td>\n</tr>\n<tr>\n<td>Value and Units</td>\n<td>将页面上各种各样的值与单位进行统一定义，以供其他模块使用</td>\n</tr>\n<tr>\n<td>Image Values</td>\n<td>定义对image元素的赋值方式</td>\n</tr>\n<tr>\n<td>2D Transforms</td>\n<td>在页面中实现2维空间上的变形效果</td>\n</tr>\n<tr>\n<td>3D Transforms</td>\n<td>在页面中实现3维空间上的变形效果</td>\n</tr>\n<tr>\n<td>Transitions</td>\n<td>在页面中实现平滑过渡的视觉效果</td>\n</tr>\n<tr>\n<td>Animations</td>\n<td>在页面中实现动画</td>\n</tr>\n<tr>\n<td>CSSOM View</td>\n<td>查看管理页面或页面的视觉效果，处理元素的位置信息</td>\n</tr>\n<tr>\n<td>Syntax</td>\n<td>定义CSS样式表的基本结构、样式表中的-一些语法细节、浏览器对于样式表的分析规则</td>\n</tr>\n<tr>\n<td>Generated and Replaced Content</td>\n<td>定义怎样在元素中插入内容</td>\n</tr>\n<tr>\n<td>Marquee</td>\n<td>定义当一些元素的内容太大，超出了指定的元素尺寸时，是否以及怎样显示溢出部分</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td>定义页面中ruby元素（用于显示拼音文字)的样式</td>\n</tr>\n<tr>\n<td>Writing Modes</td>\n<td>定义页面中文本数据的布局方式</td>\n</tr>\n<tr>\n<td>Basic User Interface</td>\n<td>定义在屏幕、纸张上进行输出时页面的渲染方式</td>\n</tr>\n<tr>\n<td>Namespaces</td>\n<td>定义使用命名空间时的语法</td>\n</tr>\n<tr>\n<td>Media Queries</td>\n<td>根据媒体类型来实现不同的样式</td>\n</tr>\n<tr>\n<td>‘Reader’Media Type</td>\n<td>定义用于屏幕阅读器之类的阅读程序时的样式</td>\n</tr>\n<tr>\n<td>Multi-column Layout</td>\n<td>在页面中使用多栏布局方式</td>\n</tr>\n<tr>\n<td>Template Layout</td>\n<td>在页面中使用特殊布局方式</td>\n</tr>\n<tr>\n<td>Flexible Box Layout</td>\n<td>创建自适应浏览器窗口的流动布局或自适应字体大小的弹性布局</td>\n</tr>\n<tr>\n<td>Grid Position</td>\n<td>在页面中使用网格布局方</td>\n</tr>\n<tr>\n<td>Generated Content for Paged Media</td>\n<td>在页面中使用印刷时使用的布局方式</td>\n</tr>\n</tbody></table>"},{"title":"Java语言概述","date":"2022-07-19T02:22:19.000Z","cover":"https://pic1.zhimg.com/v2-c6b46c466b7408580ce7469080d6aeed_720w.jpg?source=172ae18b","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":"https://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369 密码：syl5","_content":"Java语言概述\n<!--more-->\n# 第一章 Java语言概述\n\n## Java简介\n\n### Java发展简史\n\nJava是由Sun公司于1995年5月推出的)ava程序设计语言和)ava平台的总称，Java语言是可以编写跨平台，分布式应用软件的面向对象的程序设计语言。\n\n1998年12月Sun公司发布了Java历史上最重要的一个JDK版本：JDK1.2,JSP/Servlet等规范，并且将Java一分为三。 J2M:主要用于移动设备和信息家电等设备的编程 J2SE:Java技术的核心和技术 J2EE:Java技术中应用最广泛的部分\n\n### Java程序运行的机制\n\nC语言在编写完程序后要经过编译以后才能运行，Java也是如此，Java程序要想运行，也需要经过编译的阶段，但是和C语言不同的是Java编译过后，并不会生成特定的平台机器码，而是一种与平台无关的字节码（.class文件），然而这种文件并不能直接执行，而是运行在Java虚拟机中，由Java虚拟机来解释执行。也就是说如果要运行一个Java程序，必须经历以下3个阶段。\n\n![img](https://files.catbox.moe/cf44z5.png)\n\n其中Java源代码编译成字节码的过程由Java编译器完成，生成的是平台无关的字节码。这些字节码并不依赖于特定的平台，只面向Java虚拟机(Java Virtual Mechine,简称JVM,不同平台的JVM是不同的，但是他们都遵循共同的JVM规范。这也是Java跨平台的核心部分，只要为对应平台实现了对应的虚拟机，编译后的字节码就可以在不同的平台上运行。总结起来Jvva跨平台实现的核心原理包括以下两点：1.Java源代码在运行之前会先根据JVM规范生成平台无关的字节码文件，也就是class文件，字节码文件不依赖于任何平台。2.Java为不同平台实现了对应的虚拟机，JVM在加载字节码文件后由WM生成对应平台的计算机指令。\n\n### Java语言的特点\n\n1.简单性：Java在开发时借鉴了C语言的许多语法，并目屏弃了C中不好的设计，如头文件、指针、结构体、多继到等等，并目新增了垃极回收机制使得程序员无需关注内存的分配与释放，把更多的精力放在业务本身。2.面向对象：面向对象是一种编程思想，相对于面向过程来说，具备一定的优越性，简单来说这种思想将重点放在数据和对象的接口上。打个比方，一个建筑师关注的应该是建筑本身，而不是这栋建筑使用的是什么工具和流程制造的。3.分布式：Java提供了JSP/Servleti规范以后，使得Java应用程序能够通过URL打开和访问网络上的对象。4.安全性：由于Java具有分布式的特点，Java在安全方面投入了很大的精力，够防范各种攻击。5.多线程：随着互联网的发展，开发者越来越关注并发性，例如天猫双十一活动每秒的请求量数以百万计算，这不但考验服务器硬件，也考验看服务器编程语言的性能，Jv提供的多线程以及并发偏程，很大程度上解决了局并发存在的问题。6.可移植：正是因为Java提出的跨平台策略使得Java的可移植性具备了操作空间，我们知道Java对于不同的平台开发了对应的JVM,而程序运行前由Java编译器将源代码编译成了平台无关的字节码文件，因此不管是在什么平台开发的源程序，编译后都可以运行在不同平台上的JVM中。\n\n## Java下载与安装\n\nJDK下载地址：http://www.oracle.com/technetwork/java/javase/downloads/index.html\n\n### Java安装目录简介\n\n·bin:该目录下主要存放DK的各种工具命令.·conf:该目录下主要存放JDK的相关配置文件。·include:该目录下主要存放了一些平台的头文件，·jmods:该目录下主要存放了JDK的各种模块。·Iega:该目录下主要存放了JDK各模块的授权文档。·ib:该目录下主要存放了JDK工具的一些补充jar包和源代码。\n\n### Java环境变量配置\n\n开发一个应用需要经历两个步骤：1.编写源代码2.将编写好的源代码进行编译，编译成平台无关的class文件这两个命令对应的就是JDK安装目录中bin目录下的两个应用程序：java.exe,javac.exe,现在如果要去开发一个应用程序，并使得其能正常运行，我们还需要配置环境变量。\n\n配置环境变量的步骤如下：\n\n1.配置JAVA_HOME\n\n在系统环境变量中新建变量名：JAVA_HOME(不区分大小写)，变量值便是jDK的安装路径\n\n2.配置Path\n\n和配置JAVA_HOME一样，新建环境变量PTAH，变量值是JDK安装目录下得bin目录。如果系统变量中已经存在PATH，不要删除PATH中的值，在已有内容的后面添加“；”继续配置Java即可.\n\n3.配置CLASSPATH\n\n在配置好JAVA_HOME和PATH以后，继续配置CLASSPATH，变量值为JDK安装路面下得lib目录。需要注意的是，从JDK 1.5以后，CLASSPATH是可以不配置的。\n\n## HelloWorld\n\n### 记事本编写HelloWorld\n\n1. 在D盘根目录新建一个记事本，命名为hello\n2. 在记事本输入以下代码\n\n```\nclass Hello{\n   public static void main(String[] args){\n     System.out.println(\"Hello World!\");\n   }\n}\n```\n\n1. 保存后关闭文件，并修改文件的拓展名为.java\n2. 打开cmd，进入D盘，hello所在位置\n3. 输入命令对源文件进行编译：javac Hello.java\n4. 输入命令运行Java：java Hello\n\n**注意：此处的命令并不区分大小写，当使用javac编译完程序后使用java命令运行程序，此时我们只写文件名即可，并不需要写扩展名**按照以上步骤操作以后你会看到窗口中打印了Hello World,自此，我们已经开发了自己的第一个Java程序，下面我们对上述代码进行简单的解释：\n\n1.class:是java中的关键字，用于声明一个类，Hello表示是类名2.public static是修饰符3.void表示方法没有返回值\n\n4.main表示方法名，main方法也是程序的入口5.System.out.println表示在控制台打印，其中System首字母大写\n\n### Java源文件命名规则\n\nJava源文件的命名需要遵守以下规则1.文件的扩展名或后缀名必须是java2.文件名必须和类中pulic修饰的类名称相同\n\n### 对Java的认识\n\nJava是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。\n\n### Java的平台无关性是怎么实现的\n\n1.什么是平台无关性\n\n平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行（Write Once ,Run Anywhere）。\n\n也就是说，用Java创建的可执行二进制程序，能够不加改变的运行于多个平台。\n\n平台无关性好处\n\n作为一门平台无关性语言，无论是在自身发展，还是对开发者的友好度上都是很突出的。\n\n因为其平台无关性，所以Java程序可以运行在各种各样的设备上，尤其是一些嵌入式设备，如打印机、扫描仪、传真机等。随着5G时代的来临，也会有更多的终端接入网络，相信平台无关性的Java也能做出一些贡献。\n\n对于Java开发者来说，Java减少了开发和部署到多个平台的成本和时间。真正的做到一次编译，到处运行。2.平台无关性的实现\n\n对于Java的平台无关性的支持，就像对安全性和网络移动性的支持一样，是分布在整个Java体系结构中的。其中扮演者重要的角色的有Java语言规范、Class文件、Java虚拟机（JVM）等。\n\n**Java到底是是如何运行起来的**\n\n在计算机世界中，计算机只认识0和1，所以，真正被计算机执行的其实是由0和1组成的二进制文件。日常开发使用的C、C++、Java、Python等都属于高级语言，而非二进制语言。所以，想要让计算机认识我们写出来的Java代码，那就需要把他”翻译”成由0和1组成的二进制文件。这个过程就叫做编译。负责这一过程的处理的工具叫做编译器。\n\n在Java平台中，想要把Java文件，编译成二进制文件，需要经过两步编译，前端编译和后端编译：\n\n前端编译主要指与源语言有关但与目标机无关的部分。Java中，我们所熟知的javac的编译就是前端编译。除了这种以外，我们使用的很多IDE，如eclipse，idea等，都内置了前端编译器。主要功能就是把.java代码转换成.class代码。这里提到的.class代码，其实就是Class文件。\n\n后端编译主要是将中间代码再翻译成机器语言。Java中，这一步骤就是Java虚拟机来执行的。\n\n**Java虚拟机**\n\n所谓平台无关性，就是说要能够做到可以在多个平台上都能无缝对接。但是，对于不同的平台，硬件和操作系统肯定都是不一样的。\n\n对于不同的硬件和操作系统，最主要的区别就是指令不同。比如同样执行a+b，A操作系统对应的二进制指令可能是10001000，而B操作系统对应的指令可能是11101110。那么，想要做到跨平台，最重要的就是可以根据对应的硬件和操作系统生成对应的二进制指令。\n\n而这一工作，主要由我们的Java虚拟机完成。虽然Java语言是平台无关的，但是JVM确实平台有关的，不同的操作系统上面要安装对应的JVM。Java之所以可以做到跨平台，是因为Java虚拟机充当了桥梁。他扮演了运行时Java程序与其下的硬件和操作系统之间的缓冲角色。\n\n**字节码**\n\n各种不同的平台的虚拟机都使用统一的程序存储格式——字节码（ByteCode）是构成平台无关性的另一个基石。Java虚拟机只与由自己码组成的Class文件进行交互。\n\n我们说Java语言可以Write Once ,Run Anywhere。这里的Write其实指的就是生成Class文件的过程。\n\n因为Java Class文件可以在任何平台创建，也可以被任何平台的Java虚拟机装载并执行，所以才有了Java的平台无关性。\n\n**Java语言规范**\n\n已经有了统一的Class文件，以及可以在不同平台上将Class文件翻译成对应的二进制文件的Java虚拟机，Java就可以彻底实现跨平台了吗？\n\n其实并不是的，Java语言在跨平台方面也是做了一些努力的，这些努力被定义在Java语言规范中。\n\n比如，Java中基本数据类型的值域和行为都是由其自己定义的。而C/C++中，基本数据类型是由它的占位宽度决定的，占位宽度则是由所在平台决定的。所以，在不同的平台中，对于同一个C++程序的编译结果会出现不同的行为。\n\n举一个简单的例子，对于int类型，在Java中，int占4个字节，这是固定的。\n\n但是在C++中却不是固定的了。在16位计算机上，int类型的长度可能为两字节；在32位计算机上，可能为4字节；当64位计算机流行起来后，int类型的长度可能会达到8字节。\n\n通过保证基本数据类型在所有平台的一致性，Java语言为平台无关性提供强了有力的支持。\n\n**Java语言规范**\n\n通过规定Java语言中基本数据类型的取值范围和行为\n\n**Class文件**\n\n所有Java文件要编译成统一的Class文件\n\n**Java虚拟机**\n\n通过Java虚拟机将Class文件转成对应平台的二进制文件等\n\nJava的平台无关性是建立在Java虚拟机的平台有关性基础之上的，是因为Java虚拟机屏蔽了底层操作系统和硬件的差异。","source":"_posts/Java语言概述.md","raw":"---\ntitle: Java语言概述\ndate: 2022-07-19 10:22:19\ntags:\n- Java\ncategories:\n- 后端组\ncover: https://pic1.zhimg.com/v2-c6b46c466b7408580ce7469080d6aeed_720w.jpg?source=172ae18b\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom: https://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369 密码：syl5\n---\nJava语言概述\n<!--more-->\n# 第一章 Java语言概述\n\n## Java简介\n\n### Java发展简史\n\nJava是由Sun公司于1995年5月推出的)ava程序设计语言和)ava平台的总称，Java语言是可以编写跨平台，分布式应用软件的面向对象的程序设计语言。\n\n1998年12月Sun公司发布了Java历史上最重要的一个JDK版本：JDK1.2,JSP/Servlet等规范，并且将Java一分为三。 J2M:主要用于移动设备和信息家电等设备的编程 J2SE:Java技术的核心和技术 J2EE:Java技术中应用最广泛的部分\n\n### Java程序运行的机制\n\nC语言在编写完程序后要经过编译以后才能运行，Java也是如此，Java程序要想运行，也需要经过编译的阶段，但是和C语言不同的是Java编译过后，并不会生成特定的平台机器码，而是一种与平台无关的字节码（.class文件），然而这种文件并不能直接执行，而是运行在Java虚拟机中，由Java虚拟机来解释执行。也就是说如果要运行一个Java程序，必须经历以下3个阶段。\n\n![img](https://files.catbox.moe/cf44z5.png)\n\n其中Java源代码编译成字节码的过程由Java编译器完成，生成的是平台无关的字节码。这些字节码并不依赖于特定的平台，只面向Java虚拟机(Java Virtual Mechine,简称JVM,不同平台的JVM是不同的，但是他们都遵循共同的JVM规范。这也是Java跨平台的核心部分，只要为对应平台实现了对应的虚拟机，编译后的字节码就可以在不同的平台上运行。总结起来Jvva跨平台实现的核心原理包括以下两点：1.Java源代码在运行之前会先根据JVM规范生成平台无关的字节码文件，也就是class文件，字节码文件不依赖于任何平台。2.Java为不同平台实现了对应的虚拟机，JVM在加载字节码文件后由WM生成对应平台的计算机指令。\n\n### Java语言的特点\n\n1.简单性：Java在开发时借鉴了C语言的许多语法，并目屏弃了C中不好的设计，如头文件、指针、结构体、多继到等等，并目新增了垃极回收机制使得程序员无需关注内存的分配与释放，把更多的精力放在业务本身。2.面向对象：面向对象是一种编程思想，相对于面向过程来说，具备一定的优越性，简单来说这种思想将重点放在数据和对象的接口上。打个比方，一个建筑师关注的应该是建筑本身，而不是这栋建筑使用的是什么工具和流程制造的。3.分布式：Java提供了JSP/Servleti规范以后，使得Java应用程序能够通过URL打开和访问网络上的对象。4.安全性：由于Java具有分布式的特点，Java在安全方面投入了很大的精力，够防范各种攻击。5.多线程：随着互联网的发展，开发者越来越关注并发性，例如天猫双十一活动每秒的请求量数以百万计算，这不但考验服务器硬件，也考验看服务器编程语言的性能，Jv提供的多线程以及并发偏程，很大程度上解决了局并发存在的问题。6.可移植：正是因为Java提出的跨平台策略使得Java的可移植性具备了操作空间，我们知道Java对于不同的平台开发了对应的JVM,而程序运行前由Java编译器将源代码编译成了平台无关的字节码文件，因此不管是在什么平台开发的源程序，编译后都可以运行在不同平台上的JVM中。\n\n## Java下载与安装\n\nJDK下载地址：http://www.oracle.com/technetwork/java/javase/downloads/index.html\n\n### Java安装目录简介\n\n·bin:该目录下主要存放DK的各种工具命令.·conf:该目录下主要存放JDK的相关配置文件。·include:该目录下主要存放了一些平台的头文件，·jmods:该目录下主要存放了JDK的各种模块。·Iega:该目录下主要存放了JDK各模块的授权文档。·ib:该目录下主要存放了JDK工具的一些补充jar包和源代码。\n\n### Java环境变量配置\n\n开发一个应用需要经历两个步骤：1.编写源代码2.将编写好的源代码进行编译，编译成平台无关的class文件这两个命令对应的就是JDK安装目录中bin目录下的两个应用程序：java.exe,javac.exe,现在如果要去开发一个应用程序，并使得其能正常运行，我们还需要配置环境变量。\n\n配置环境变量的步骤如下：\n\n1.配置JAVA_HOME\n\n在系统环境变量中新建变量名：JAVA_HOME(不区分大小写)，变量值便是jDK的安装路径\n\n2.配置Path\n\n和配置JAVA_HOME一样，新建环境变量PTAH，变量值是JDK安装目录下得bin目录。如果系统变量中已经存在PATH，不要删除PATH中的值，在已有内容的后面添加“；”继续配置Java即可.\n\n3.配置CLASSPATH\n\n在配置好JAVA_HOME和PATH以后，继续配置CLASSPATH，变量值为JDK安装路面下得lib目录。需要注意的是，从JDK 1.5以后，CLASSPATH是可以不配置的。\n\n## HelloWorld\n\n### 记事本编写HelloWorld\n\n1. 在D盘根目录新建一个记事本，命名为hello\n2. 在记事本输入以下代码\n\n```\nclass Hello{\n   public static void main(String[] args){\n     System.out.println(\"Hello World!\");\n   }\n}\n```\n\n1. 保存后关闭文件，并修改文件的拓展名为.java\n2. 打开cmd，进入D盘，hello所在位置\n3. 输入命令对源文件进行编译：javac Hello.java\n4. 输入命令运行Java：java Hello\n\n**注意：此处的命令并不区分大小写，当使用javac编译完程序后使用java命令运行程序，此时我们只写文件名即可，并不需要写扩展名**按照以上步骤操作以后你会看到窗口中打印了Hello World,自此，我们已经开发了自己的第一个Java程序，下面我们对上述代码进行简单的解释：\n\n1.class:是java中的关键字，用于声明一个类，Hello表示是类名2.public static是修饰符3.void表示方法没有返回值\n\n4.main表示方法名，main方法也是程序的入口5.System.out.println表示在控制台打印，其中System首字母大写\n\n### Java源文件命名规则\n\nJava源文件的命名需要遵守以下规则1.文件的扩展名或后缀名必须是java2.文件名必须和类中pulic修饰的类名称相同\n\n### 对Java的认识\n\nJava是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。\n\n### Java的平台无关性是怎么实现的\n\n1.什么是平台无关性\n\n平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行（Write Once ,Run Anywhere）。\n\n也就是说，用Java创建的可执行二进制程序，能够不加改变的运行于多个平台。\n\n平台无关性好处\n\n作为一门平台无关性语言，无论是在自身发展，还是对开发者的友好度上都是很突出的。\n\n因为其平台无关性，所以Java程序可以运行在各种各样的设备上，尤其是一些嵌入式设备，如打印机、扫描仪、传真机等。随着5G时代的来临，也会有更多的终端接入网络，相信平台无关性的Java也能做出一些贡献。\n\n对于Java开发者来说，Java减少了开发和部署到多个平台的成本和时间。真正的做到一次编译，到处运行。2.平台无关性的实现\n\n对于Java的平台无关性的支持，就像对安全性和网络移动性的支持一样，是分布在整个Java体系结构中的。其中扮演者重要的角色的有Java语言规范、Class文件、Java虚拟机（JVM）等。\n\n**Java到底是是如何运行起来的**\n\n在计算机世界中，计算机只认识0和1，所以，真正被计算机执行的其实是由0和1组成的二进制文件。日常开发使用的C、C++、Java、Python等都属于高级语言，而非二进制语言。所以，想要让计算机认识我们写出来的Java代码，那就需要把他”翻译”成由0和1组成的二进制文件。这个过程就叫做编译。负责这一过程的处理的工具叫做编译器。\n\n在Java平台中，想要把Java文件，编译成二进制文件，需要经过两步编译，前端编译和后端编译：\n\n前端编译主要指与源语言有关但与目标机无关的部分。Java中，我们所熟知的javac的编译就是前端编译。除了这种以外，我们使用的很多IDE，如eclipse，idea等，都内置了前端编译器。主要功能就是把.java代码转换成.class代码。这里提到的.class代码，其实就是Class文件。\n\n后端编译主要是将中间代码再翻译成机器语言。Java中，这一步骤就是Java虚拟机来执行的。\n\n**Java虚拟机**\n\n所谓平台无关性，就是说要能够做到可以在多个平台上都能无缝对接。但是，对于不同的平台，硬件和操作系统肯定都是不一样的。\n\n对于不同的硬件和操作系统，最主要的区别就是指令不同。比如同样执行a+b，A操作系统对应的二进制指令可能是10001000，而B操作系统对应的指令可能是11101110。那么，想要做到跨平台，最重要的就是可以根据对应的硬件和操作系统生成对应的二进制指令。\n\n而这一工作，主要由我们的Java虚拟机完成。虽然Java语言是平台无关的，但是JVM确实平台有关的，不同的操作系统上面要安装对应的JVM。Java之所以可以做到跨平台，是因为Java虚拟机充当了桥梁。他扮演了运行时Java程序与其下的硬件和操作系统之间的缓冲角色。\n\n**字节码**\n\n各种不同的平台的虚拟机都使用统一的程序存储格式——字节码（ByteCode）是构成平台无关性的另一个基石。Java虚拟机只与由自己码组成的Class文件进行交互。\n\n我们说Java语言可以Write Once ,Run Anywhere。这里的Write其实指的就是生成Class文件的过程。\n\n因为Java Class文件可以在任何平台创建，也可以被任何平台的Java虚拟机装载并执行，所以才有了Java的平台无关性。\n\n**Java语言规范**\n\n已经有了统一的Class文件，以及可以在不同平台上将Class文件翻译成对应的二进制文件的Java虚拟机，Java就可以彻底实现跨平台了吗？\n\n其实并不是的，Java语言在跨平台方面也是做了一些努力的，这些努力被定义在Java语言规范中。\n\n比如，Java中基本数据类型的值域和行为都是由其自己定义的。而C/C++中，基本数据类型是由它的占位宽度决定的，占位宽度则是由所在平台决定的。所以，在不同的平台中，对于同一个C++程序的编译结果会出现不同的行为。\n\n举一个简单的例子，对于int类型，在Java中，int占4个字节，这是固定的。\n\n但是在C++中却不是固定的了。在16位计算机上，int类型的长度可能为两字节；在32位计算机上，可能为4字节；当64位计算机流行起来后，int类型的长度可能会达到8字节。\n\n通过保证基本数据类型在所有平台的一致性，Java语言为平台无关性提供强了有力的支持。\n\n**Java语言规范**\n\n通过规定Java语言中基本数据类型的取值范围和行为\n\n**Class文件**\n\n所有Java文件要编译成统一的Class文件\n\n**Java虚拟机**\n\n通过Java虚拟机将Class文件转成对应平台的二进制文件等\n\nJava的平台无关性是建立在Java虚拟机的平台有关性基础之上的，是因为Java虚拟机屏蔽了底层操作系统和硬件的差异。","slug":"Java语言概述","published":1,"updated":"2022-07-19T02:24:17.041Z","_id":"cl5pzwvlb0000j4uj7qsic3je","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Java语言概述</p>\n<span id=\"more\"></span>\n<h1 id=\"第一章-Java语言概述\"><a href=\"#第一章-Java语言概述\" class=\"headerlink\" title=\"第一章 Java语言概述\"></a>第一章 Java语言概述</h1><h2 id=\"Java简介\"><a href=\"#Java简介\" class=\"headerlink\" title=\"Java简介\"></a>Java简介</h2><h3 id=\"Java发展简史\"><a href=\"#Java发展简史\" class=\"headerlink\" title=\"Java发展简史\"></a>Java发展简史</h3><p>Java是由Sun公司于1995年5月推出的)ava程序设计语言和)ava平台的总称，Java语言是可以编写跨平台，分布式应用软件的面向对象的程序设计语言。</p>\n<p>1998年12月Sun公司发布了Java历史上最重要的一个JDK版本：JDK1.2,JSP/Servlet等规范，并且将Java一分为三。 J2M:主要用于移动设备和信息家电等设备的编程 J2SE:Java技术的核心和技术 J2EE:Java技术中应用最广泛的部分</p>\n<h3 id=\"Java程序运行的机制\"><a href=\"#Java程序运行的机制\" class=\"headerlink\" title=\"Java程序运行的机制\"></a>Java程序运行的机制</h3><p>C语言在编写完程序后要经过编译以后才能运行，Java也是如此，Java程序要想运行，也需要经过编译的阶段，但是和C语言不同的是Java编译过后，并不会生成特定的平台机器码，而是一种与平台无关的字节码（.class文件），然而这种文件并不能直接执行，而是运行在Java虚拟机中，由Java虚拟机来解释执行。也就是说如果要运行一个Java程序，必须经历以下3个阶段。</p>\n<p><img src=\"https://files.catbox.moe/cf44z5.png\" alt=\"img\"></p>\n<p>其中Java源代码编译成字节码的过程由Java编译器完成，生成的是平台无关的字节码。这些字节码并不依赖于特定的平台，只面向Java虚拟机(Java Virtual Mechine,简称JVM,不同平台的JVM是不同的，但是他们都遵循共同的JVM规范。这也是Java跨平台的核心部分，只要为对应平台实现了对应的虚拟机，编译后的字节码就可以在不同的平台上运行。总结起来Jvva跨平台实现的核心原理包括以下两点：1.Java源代码在运行之前会先根据JVM规范生成平台无关的字节码文件，也就是class文件，字节码文件不依赖于任何平台。2.Java为不同平台实现了对应的虚拟机，JVM在加载字节码文件后由WM生成对应平台的计算机指令。</p>\n<h3 id=\"Java语言的特点\"><a href=\"#Java语言的特点\" class=\"headerlink\" title=\"Java语言的特点\"></a>Java语言的特点</h3><p>1.简单性：Java在开发时借鉴了C语言的许多语法，并目屏弃了C中不好的设计，如头文件、指针、结构体、多继到等等，并目新增了垃极回收机制使得程序员无需关注内存的分配与释放，把更多的精力放在业务本身。2.面向对象：面向对象是一种编程思想，相对于面向过程来说，具备一定的优越性，简单来说这种思想将重点放在数据和对象的接口上。打个比方，一个建筑师关注的应该是建筑本身，而不是这栋建筑使用的是什么工具和流程制造的。3.分布式：Java提供了JSP/Servleti规范以后，使得Java应用程序能够通过URL打开和访问网络上的对象。4.安全性：由于Java具有分布式的特点，Java在安全方面投入了很大的精力，够防范各种攻击。5.多线程：随着互联网的发展，开发者越来越关注并发性，例如天猫双十一活动每秒的请求量数以百万计算，这不但考验服务器硬件，也考验看服务器编程语言的性能，Jv提供的多线程以及并发偏程，很大程度上解决了局并发存在的问题。6.可移植：正是因为Java提出的跨平台策略使得Java的可移植性具备了操作空间，我们知道Java对于不同的平台开发了对应的JVM,而程序运行前由Java编译器将源代码编译成了平台无关的字节码文件，因此不管是在什么平台开发的源程序，编译后都可以运行在不同平台上的JVM中。</p>\n<h2 id=\"Java下载与安装\"><a href=\"#Java下载与安装\" class=\"headerlink\" title=\"Java下载与安装\"></a>Java下载与安装</h2><p>JDK下载地址：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>\n<h3 id=\"Java安装目录简介\"><a href=\"#Java安装目录简介\" class=\"headerlink\" title=\"Java安装目录简介\"></a>Java安装目录简介</h3><p>·bin:该目录下主要存放DK的各种工具命令.·conf:该目录下主要存放JDK的相关配置文件。·include:该目录下主要存放了一些平台的头文件，·jmods:该目录下主要存放了JDK的各种模块。·Iega:该目录下主要存放了JDK各模块的授权文档。·ib:该目录下主要存放了JDK工具的一些补充jar包和源代码。</p>\n<h3 id=\"Java环境变量配置\"><a href=\"#Java环境变量配置\" class=\"headerlink\" title=\"Java环境变量配置\"></a>Java环境变量配置</h3><p>开发一个应用需要经历两个步骤：1.编写源代码2.将编写好的源代码进行编译，编译成平台无关的class文件这两个命令对应的就是JDK安装目录中bin目录下的两个应用程序：java.exe,javac.exe,现在如果要去开发一个应用程序，并使得其能正常运行，我们还需要配置环境变量。</p>\n<p>配置环境变量的步骤如下：</p>\n<p>1.配置JAVA_HOME</p>\n<p>在系统环境变量中新建变量名：JAVA_HOME(不区分大小写)，变量值便是jDK的安装路径</p>\n<p>2.配置Path</p>\n<p>和配置JAVA_HOME一样，新建环境变量PTAH，变量值是JDK安装目录下得bin目录。如果系统变量中已经存在PATH，不要删除PATH中的值，在已有内容的后面添加“；”继续配置Java即可.</p>\n<p>3.配置CLASSPATH</p>\n<p>在配置好JAVA_HOME和PATH以后，继续配置CLASSPATH，变量值为JDK安装路面下得lib目录。需要注意的是，从JDK 1.5以后，CLASSPATH是可以不配置的。</p>\n<h2 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h2><h3 id=\"记事本编写HelloWorld\"><a href=\"#记事本编写HelloWorld\" class=\"headerlink\" title=\"记事本编写HelloWorld\"></a>记事本编写HelloWorld</h3><ol>\n<li>在D盘根目录新建一个记事本，命名为hello</li>\n<li>在记事本输入以下代码</li>\n</ol>\n<pre><code>class Hello&#123;\n   public static void main(String[] args)&#123;\n     System.out.println(&quot;Hello World!&quot;);\n   &#125;\n&#125;\n</code></pre>\n<ol>\n<li>保存后关闭文件，并修改文件的拓展名为.java</li>\n<li>打开cmd，进入D盘，hello所在位置</li>\n<li>输入命令对源文件进行编译：javac Hello.java</li>\n<li>输入命令运行Java：java Hello</li>\n</ol>\n<p><strong>注意：此处的命令并不区分大小写，当使用javac编译完程序后使用java命令运行程序，此时我们只写文件名即可，并不需要写扩展名</strong>按照以上步骤操作以后你会看到窗口中打印了Hello World,自此，我们已经开发了自己的第一个Java程序，下面我们对上述代码进行简单的解释：</p>\n<p>1.class:是java中的关键字，用于声明一个类，Hello表示是类名2.public static是修饰符3.void表示方法没有返回值</p>\n<p>4.main表示方法名，main方法也是程序的入口5.System.out.println表示在控制台打印，其中System首字母大写</p>\n<h3 id=\"Java源文件命名规则\"><a href=\"#Java源文件命名规则\" class=\"headerlink\" title=\"Java源文件命名规则\"></a>Java源文件命名规则</h3><p>Java源文件的命名需要遵守以下规则1.文件的扩展名或后缀名必须是java2.文件名必须和类中pulic修饰的类名称相同</p>\n<h3 id=\"对Java的认识\"><a href=\"#对Java的认识\" class=\"headerlink\" title=\"对Java的认识\"></a>对Java的认识</h3><p>Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。</p>\n<h3 id=\"Java的平台无关性是怎么实现的\"><a href=\"#Java的平台无关性是怎么实现的\" class=\"headerlink\" title=\"Java的平台无关性是怎么实现的\"></a>Java的平台无关性是怎么实现的</h3><p>1.什么是平台无关性</p>\n<p>平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行（Write Once ,Run Anywhere）。</p>\n<p>也就是说，用Java创建的可执行二进制程序，能够不加改变的运行于多个平台。</p>\n<p>平台无关性好处</p>\n<p>作为一门平台无关性语言，无论是在自身发展，还是对开发者的友好度上都是很突出的。</p>\n<p>因为其平台无关性，所以Java程序可以运行在各种各样的设备上，尤其是一些嵌入式设备，如打印机、扫描仪、传真机等。随着5G时代的来临，也会有更多的终端接入网络，相信平台无关性的Java也能做出一些贡献。</p>\n<p>对于Java开发者来说，Java减少了开发和部署到多个平台的成本和时间。真正的做到一次编译，到处运行。2.平台无关性的实现</p>\n<p>对于Java的平台无关性的支持，就像对安全性和网络移动性的支持一样，是分布在整个Java体系结构中的。其中扮演者重要的角色的有Java语言规范、Class文件、Java虚拟机（JVM）等。</p>\n<p><strong>Java到底是是如何运行起来的</strong></p>\n<p>在计算机世界中，计算机只认识0和1，所以，真正被计算机执行的其实是由0和1组成的二进制文件。日常开发使用的C、C++、Java、Python等都属于高级语言，而非二进制语言。所以，想要让计算机认识我们写出来的Java代码，那就需要把他”翻译”成由0和1组成的二进制文件。这个过程就叫做编译。负责这一过程的处理的工具叫做编译器。</p>\n<p>在Java平台中，想要把Java文件，编译成二进制文件，需要经过两步编译，前端编译和后端编译：</p>\n<p>前端编译主要指与源语言有关但与目标机无关的部分。Java中，我们所熟知的javac的编译就是前端编译。除了这种以外，我们使用的很多IDE，如eclipse，idea等，都内置了前端编译器。主要功能就是把.java代码转换成.class代码。这里提到的.class代码，其实就是Class文件。</p>\n<p>后端编译主要是将中间代码再翻译成机器语言。Java中，这一步骤就是Java虚拟机来执行的。</p>\n<p><strong>Java虚拟机</strong></p>\n<p>所谓平台无关性，就是说要能够做到可以在多个平台上都能无缝对接。但是，对于不同的平台，硬件和操作系统肯定都是不一样的。</p>\n<p>对于不同的硬件和操作系统，最主要的区别就是指令不同。比如同样执行a+b，A操作系统对应的二进制指令可能是10001000，而B操作系统对应的指令可能是11101110。那么，想要做到跨平台，最重要的就是可以根据对应的硬件和操作系统生成对应的二进制指令。</p>\n<p>而这一工作，主要由我们的Java虚拟机完成。虽然Java语言是平台无关的，但是JVM确实平台有关的，不同的操作系统上面要安装对应的JVM。Java之所以可以做到跨平台，是因为Java虚拟机充当了桥梁。他扮演了运行时Java程序与其下的硬件和操作系统之间的缓冲角色。</p>\n<p><strong>字节码</strong></p>\n<p>各种不同的平台的虚拟机都使用统一的程序存储格式——字节码（ByteCode）是构成平台无关性的另一个基石。Java虚拟机只与由自己码组成的Class文件进行交互。</p>\n<p>我们说Java语言可以Write Once ,Run Anywhere。这里的Write其实指的就是生成Class文件的过程。</p>\n<p>因为Java Class文件可以在任何平台创建，也可以被任何平台的Java虚拟机装载并执行，所以才有了Java的平台无关性。</p>\n<p><strong>Java语言规范</strong></p>\n<p>已经有了统一的Class文件，以及可以在不同平台上将Class文件翻译成对应的二进制文件的Java虚拟机，Java就可以彻底实现跨平台了吗？</p>\n<p>其实并不是的，Java语言在跨平台方面也是做了一些努力的，这些努力被定义在Java语言规范中。</p>\n<p>比如，Java中基本数据类型的值域和行为都是由其自己定义的。而C/C++中，基本数据类型是由它的占位宽度决定的，占位宽度则是由所在平台决定的。所以，在不同的平台中，对于同一个C++程序的编译结果会出现不同的行为。</p>\n<p>举一个简单的例子，对于int类型，在Java中，int占4个字节，这是固定的。</p>\n<p>但是在C++中却不是固定的了。在16位计算机上，int类型的长度可能为两字节；在32位计算机上，可能为4字节；当64位计算机流行起来后，int类型的长度可能会达到8字节。</p>\n<p>通过保证基本数据类型在所有平台的一致性，Java语言为平台无关性提供强了有力的支持。</p>\n<p><strong>Java语言规范</strong></p>\n<p>通过规定Java语言中基本数据类型的取值范围和行为</p>\n<p><strong>Class文件</strong></p>\n<p>所有Java文件要编译成统一的Class文件</p>\n<p><strong>Java虚拟机</strong></p>\n<p>通过Java虚拟机将Class文件转成对应平台的二进制文件等</p>\n<p>Java的平台无关性是建立在Java虚拟机的平台有关性基础之上的，是因为Java虚拟机屏蔽了底层操作系统和硬件的差异。</p>\n","site":{"data":{}},"excerpt":"<p>Java语言概述</p>","more":"<h1 id=\"第一章-Java语言概述\"><a href=\"#第一章-Java语言概述\" class=\"headerlink\" title=\"第一章 Java语言概述\"></a>第一章 Java语言概述</h1><h2 id=\"Java简介\"><a href=\"#Java简介\" class=\"headerlink\" title=\"Java简介\"></a>Java简介</h2><h3 id=\"Java发展简史\"><a href=\"#Java发展简史\" class=\"headerlink\" title=\"Java发展简史\"></a>Java发展简史</h3><p>Java是由Sun公司于1995年5月推出的)ava程序设计语言和)ava平台的总称，Java语言是可以编写跨平台，分布式应用软件的面向对象的程序设计语言。</p>\n<p>1998年12月Sun公司发布了Java历史上最重要的一个JDK版本：JDK1.2,JSP/Servlet等规范，并且将Java一分为三。 J2M:主要用于移动设备和信息家电等设备的编程 J2SE:Java技术的核心和技术 J2EE:Java技术中应用最广泛的部分</p>\n<h3 id=\"Java程序运行的机制\"><a href=\"#Java程序运行的机制\" class=\"headerlink\" title=\"Java程序运行的机制\"></a>Java程序运行的机制</h3><p>C语言在编写完程序后要经过编译以后才能运行，Java也是如此，Java程序要想运行，也需要经过编译的阶段，但是和C语言不同的是Java编译过后，并不会生成特定的平台机器码，而是一种与平台无关的字节码（.class文件），然而这种文件并不能直接执行，而是运行在Java虚拟机中，由Java虚拟机来解释执行。也就是说如果要运行一个Java程序，必须经历以下3个阶段。</p>\n<p><img src=\"https://files.catbox.moe/cf44z5.png\" alt=\"img\"></p>\n<p>其中Java源代码编译成字节码的过程由Java编译器完成，生成的是平台无关的字节码。这些字节码并不依赖于特定的平台，只面向Java虚拟机(Java Virtual Mechine,简称JVM,不同平台的JVM是不同的，但是他们都遵循共同的JVM规范。这也是Java跨平台的核心部分，只要为对应平台实现了对应的虚拟机，编译后的字节码就可以在不同的平台上运行。总结起来Jvva跨平台实现的核心原理包括以下两点：1.Java源代码在运行之前会先根据JVM规范生成平台无关的字节码文件，也就是class文件，字节码文件不依赖于任何平台。2.Java为不同平台实现了对应的虚拟机，JVM在加载字节码文件后由WM生成对应平台的计算机指令。</p>\n<h3 id=\"Java语言的特点\"><a href=\"#Java语言的特点\" class=\"headerlink\" title=\"Java语言的特点\"></a>Java语言的特点</h3><p>1.简单性：Java在开发时借鉴了C语言的许多语法，并目屏弃了C中不好的设计，如头文件、指针、结构体、多继到等等，并目新增了垃极回收机制使得程序员无需关注内存的分配与释放，把更多的精力放在业务本身。2.面向对象：面向对象是一种编程思想，相对于面向过程来说，具备一定的优越性，简单来说这种思想将重点放在数据和对象的接口上。打个比方，一个建筑师关注的应该是建筑本身，而不是这栋建筑使用的是什么工具和流程制造的。3.分布式：Java提供了JSP/Servleti规范以后，使得Java应用程序能够通过URL打开和访问网络上的对象。4.安全性：由于Java具有分布式的特点，Java在安全方面投入了很大的精力，够防范各种攻击。5.多线程：随着互联网的发展，开发者越来越关注并发性，例如天猫双十一活动每秒的请求量数以百万计算，这不但考验服务器硬件，也考验看服务器编程语言的性能，Jv提供的多线程以及并发偏程，很大程度上解决了局并发存在的问题。6.可移植：正是因为Java提出的跨平台策略使得Java的可移植性具备了操作空间，我们知道Java对于不同的平台开发了对应的JVM,而程序运行前由Java编译器将源代码编译成了平台无关的字节码文件，因此不管是在什么平台开发的源程序，编译后都可以运行在不同平台上的JVM中。</p>\n<h2 id=\"Java下载与安装\"><a href=\"#Java下载与安装\" class=\"headerlink\" title=\"Java下载与安装\"></a>Java下载与安装</h2><p>JDK下载地址：<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>\n<h3 id=\"Java安装目录简介\"><a href=\"#Java安装目录简介\" class=\"headerlink\" title=\"Java安装目录简介\"></a>Java安装目录简介</h3><p>·bin:该目录下主要存放DK的各种工具命令.·conf:该目录下主要存放JDK的相关配置文件。·include:该目录下主要存放了一些平台的头文件，·jmods:该目录下主要存放了JDK的各种模块。·Iega:该目录下主要存放了JDK各模块的授权文档。·ib:该目录下主要存放了JDK工具的一些补充jar包和源代码。</p>\n<h3 id=\"Java环境变量配置\"><a href=\"#Java环境变量配置\" class=\"headerlink\" title=\"Java环境变量配置\"></a>Java环境变量配置</h3><p>开发一个应用需要经历两个步骤：1.编写源代码2.将编写好的源代码进行编译，编译成平台无关的class文件这两个命令对应的就是JDK安装目录中bin目录下的两个应用程序：java.exe,javac.exe,现在如果要去开发一个应用程序，并使得其能正常运行，我们还需要配置环境变量。</p>\n<p>配置环境变量的步骤如下：</p>\n<p>1.配置JAVA_HOME</p>\n<p>在系统环境变量中新建变量名：JAVA_HOME(不区分大小写)，变量值便是jDK的安装路径</p>\n<p>2.配置Path</p>\n<p>和配置JAVA_HOME一样，新建环境变量PTAH，变量值是JDK安装目录下得bin目录。如果系统变量中已经存在PATH，不要删除PATH中的值，在已有内容的后面添加“；”继续配置Java即可.</p>\n<p>3.配置CLASSPATH</p>\n<p>在配置好JAVA_HOME和PATH以后，继续配置CLASSPATH，变量值为JDK安装路面下得lib目录。需要注意的是，从JDK 1.5以后，CLASSPATH是可以不配置的。</p>\n<h2 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h2><h3 id=\"记事本编写HelloWorld\"><a href=\"#记事本编写HelloWorld\" class=\"headerlink\" title=\"记事本编写HelloWorld\"></a>记事本编写HelloWorld</h3><ol>\n<li>在D盘根目录新建一个记事本，命名为hello</li>\n<li>在记事本输入以下代码</li>\n</ol>\n<pre><code>class Hello&#123;\n   public static void main(String[] args)&#123;\n     System.out.println(&quot;Hello World!&quot;);\n   &#125;\n&#125;\n</code></pre>\n<ol>\n<li>保存后关闭文件，并修改文件的拓展名为.java</li>\n<li>打开cmd，进入D盘，hello所在位置</li>\n<li>输入命令对源文件进行编译：javac Hello.java</li>\n<li>输入命令运行Java：java Hello</li>\n</ol>\n<p><strong>注意：此处的命令并不区分大小写，当使用javac编译完程序后使用java命令运行程序，此时我们只写文件名即可，并不需要写扩展名</strong>按照以上步骤操作以后你会看到窗口中打印了Hello World,自此，我们已经开发了自己的第一个Java程序，下面我们对上述代码进行简单的解释：</p>\n<p>1.class:是java中的关键字，用于声明一个类，Hello表示是类名2.public static是修饰符3.void表示方法没有返回值</p>\n<p>4.main表示方法名，main方法也是程序的入口5.System.out.println表示在控制台打印，其中System首字母大写</p>\n<h3 id=\"Java源文件命名规则\"><a href=\"#Java源文件命名规则\" class=\"headerlink\" title=\"Java源文件命名规则\"></a>Java源文件命名规则</h3><p>Java源文件的命名需要遵守以下规则1.文件的扩展名或后缀名必须是java2.文件名必须和类中pulic修饰的类名称相同</p>\n<h3 id=\"对Java的认识\"><a href=\"#对Java的认识\" class=\"headerlink\" title=\"对Java的认识\"></a>对Java的认识</h3><p>Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。</p>\n<h3 id=\"Java的平台无关性是怎么实现的\"><a href=\"#Java的平台无关性是怎么实现的\" class=\"headerlink\" title=\"Java的平台无关性是怎么实现的\"></a>Java的平台无关性是怎么实现的</h3><p>1.什么是平台无关性</p>\n<p>平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行（Write Once ,Run Anywhere）。</p>\n<p>也就是说，用Java创建的可执行二进制程序，能够不加改变的运行于多个平台。</p>\n<p>平台无关性好处</p>\n<p>作为一门平台无关性语言，无论是在自身发展，还是对开发者的友好度上都是很突出的。</p>\n<p>因为其平台无关性，所以Java程序可以运行在各种各样的设备上，尤其是一些嵌入式设备，如打印机、扫描仪、传真机等。随着5G时代的来临，也会有更多的终端接入网络，相信平台无关性的Java也能做出一些贡献。</p>\n<p>对于Java开发者来说，Java减少了开发和部署到多个平台的成本和时间。真正的做到一次编译，到处运行。2.平台无关性的实现</p>\n<p>对于Java的平台无关性的支持，就像对安全性和网络移动性的支持一样，是分布在整个Java体系结构中的。其中扮演者重要的角色的有Java语言规范、Class文件、Java虚拟机（JVM）等。</p>\n<p><strong>Java到底是是如何运行起来的</strong></p>\n<p>在计算机世界中，计算机只认识0和1，所以，真正被计算机执行的其实是由0和1组成的二进制文件。日常开发使用的C、C++、Java、Python等都属于高级语言，而非二进制语言。所以，想要让计算机认识我们写出来的Java代码，那就需要把他”翻译”成由0和1组成的二进制文件。这个过程就叫做编译。负责这一过程的处理的工具叫做编译器。</p>\n<p>在Java平台中，想要把Java文件，编译成二进制文件，需要经过两步编译，前端编译和后端编译：</p>\n<p>前端编译主要指与源语言有关但与目标机无关的部分。Java中，我们所熟知的javac的编译就是前端编译。除了这种以外，我们使用的很多IDE，如eclipse，idea等，都内置了前端编译器。主要功能就是把.java代码转换成.class代码。这里提到的.class代码，其实就是Class文件。</p>\n<p>后端编译主要是将中间代码再翻译成机器语言。Java中，这一步骤就是Java虚拟机来执行的。</p>\n<p><strong>Java虚拟机</strong></p>\n<p>所谓平台无关性，就是说要能够做到可以在多个平台上都能无缝对接。但是，对于不同的平台，硬件和操作系统肯定都是不一样的。</p>\n<p>对于不同的硬件和操作系统，最主要的区别就是指令不同。比如同样执行a+b，A操作系统对应的二进制指令可能是10001000，而B操作系统对应的指令可能是11101110。那么，想要做到跨平台，最重要的就是可以根据对应的硬件和操作系统生成对应的二进制指令。</p>\n<p>而这一工作，主要由我们的Java虚拟机完成。虽然Java语言是平台无关的，但是JVM确实平台有关的，不同的操作系统上面要安装对应的JVM。Java之所以可以做到跨平台，是因为Java虚拟机充当了桥梁。他扮演了运行时Java程序与其下的硬件和操作系统之间的缓冲角色。</p>\n<p><strong>字节码</strong></p>\n<p>各种不同的平台的虚拟机都使用统一的程序存储格式——字节码（ByteCode）是构成平台无关性的另一个基石。Java虚拟机只与由自己码组成的Class文件进行交互。</p>\n<p>我们说Java语言可以Write Once ,Run Anywhere。这里的Write其实指的就是生成Class文件的过程。</p>\n<p>因为Java Class文件可以在任何平台创建，也可以被任何平台的Java虚拟机装载并执行，所以才有了Java的平台无关性。</p>\n<p><strong>Java语言规范</strong></p>\n<p>已经有了统一的Class文件，以及可以在不同平台上将Class文件翻译成对应的二进制文件的Java虚拟机，Java就可以彻底实现跨平台了吗？</p>\n<p>其实并不是的，Java语言在跨平台方面也是做了一些努力的，这些努力被定义在Java语言规范中。</p>\n<p>比如，Java中基本数据类型的值域和行为都是由其自己定义的。而C/C++中，基本数据类型是由它的占位宽度决定的，占位宽度则是由所在平台决定的。所以，在不同的平台中，对于同一个C++程序的编译结果会出现不同的行为。</p>\n<p>举一个简单的例子，对于int类型，在Java中，int占4个字节，这是固定的。</p>\n<p>但是在C++中却不是固定的了。在16位计算机上，int类型的长度可能为两字节；在32位计算机上，可能为4字节；当64位计算机流行起来后，int类型的长度可能会达到8字节。</p>\n<p>通过保证基本数据类型在所有平台的一致性，Java语言为平台无关性提供强了有力的支持。</p>\n<p><strong>Java语言规范</strong></p>\n<p>通过规定Java语言中基本数据类型的取值范围和行为</p>\n<p><strong>Class文件</strong></p>\n<p>所有Java文件要编译成统一的Class文件</p>\n<p><strong>Java虚拟机</strong></p>\n<p>通过Java虚拟机将Class文件转成对应平台的二进制文件等</p>\n<p>Java的平台无关性是建立在Java虚拟机的平台有关性基础之上的，是因为Java虚拟机屏蔽了底层操作系统和硬件的差异。</p>"},{"title":"Java基础","date":"2022-07-15T10:52:12.000Z","cover":"https://www.itprotoday.com/sites/itprotoday.com/files/styles/article_featured_retina/public/java-logo.png?itok=Ch4V9Is3","coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":"Java基础\n<!--more-->\n\n# 一.Java概述\n\n### Java跨平台实现\n\n1. Java源代码在编写过后，会编译成平台无关的字节码文件，该文件不依赖于任何平台\n2. Java针对不同的平台开发了不同的JVM，当程序运行时由JVM将字节码文件转换成对应平台的指令\n\n### Java的特点\n\n1. 简单性\n2. 跨平台\n3. 分布式\n4. 面向对象\n5. 安全性\n6. 多线程\n\n### Java源代码中注意事项\n\n1. Java源文件的命名和类名一致，并且首字符大写，如果有多个单词，所有单词的首字母均大写。\n2. main()写法固定，public static void main(String[] args);\n3. System中首字母大写\n\n### 技术名词\n\nJDK(Java Develop Kit):Java 开发工具\n\nJRE(Java Runtime Environment)：Java 运行环境\n\nJVM(Java Virtual machine )：Java虚拟机\n\n# 二.Java标识符和运算符\n\nJava是一门强类型语言，所谓的强类型语言，可以理解为包含以下2层含义：\n\n1. 所有的变量都必须先声明，后使用\n2. 变量的类型一旦确定，那么变量的值必须和数据类型相匹配\n\n## Java标识符\n\n标识符：类名、方法名、变量名统称为标识符\n\n1. 可以包含数字、字母、下划线，$，不能以数字开头\n2. 不能包含除了_，$以外的特殊字符。\n3. 不能使用Java关键字\n\n| abstract | continue | for        | new       | switch       |\n| -------- | -------- | ---------- | --------- | ------------ |\n| assert   | default  | if         | package   | synchronized |\n| boolean  | do       | goto       | private   | this         |\n| break    | double   | implements | protected | throws       |\n| byte     | else     | import     | public    | throw        |\n| case     | enum     | instanceof | return    | transient    |\n| catch    | extends  | int        | short     | try          |\n| char     | final    | interface  | static    | void         |\n| class    | finally  | long       | strictfp  | volatile     |\n| const    | float    | native     | super     | while        |\n\n**示例**\n\n```java\n/**\n * 标识符的命名规范\n * 1.\n * 2.不能包含除了$,_以外的字符\n * 3.不能包含关键字\n * @author MR.W\n */\npublic class Identifier {\n\t//错误原因：不能以数字开头\n//\tint 1ab;\n\tint _abc;\n\tint abc_;\n\tint a_bc;\n\tint abc1;\n\tint $abd;\n\tint ab$d;\n\tint abd$;\n\t//错误原因，包含除了$，_以外的特殊符号\n//\tint abc-;\n//\t错误原因，使用了Java关键字\n//\tint instanceof;\n\tpublic void abc() {\n\t}\n}\n```\n\n## Java命名方式\n\n1. 帕斯卡命名法：所有单词首字母均大写。适用于类名，例如：StudentManager\n2. 驼峰命名法：第一个单词的首字母小写，如果有多个但是，其余单词首字母均大写，适用于方法名，变量名。例如：studentAge，studentGender\n\n## Java数据类型\n\n1. 基本类型：byte short int long float double boolean char\n2. 引用类型: 数组， 类，接口\n\n## 变量的声明和初始化\n\n```\n数据类型  变量名 [=值];\n```\n\n## Java数据类型\n\n| 整型  | 字节长度 | 取值范围                                             |\n| ----- | -------- | ---------------------------------------------------- |\n| byte  | 1        | -128~127                                             |\n| short | 2        | -32768~32767                                         |\n| int   | 4        | -2 147 483 648~2 147 483 647                         |\n| long  | 8        | -9 223 372 036 854 775 808~9 223 372 036 854 775 807 |\n\n| 浮点型 | 字节长度 | 取值范围                                         |\n| ------ | -------- | ------------------------------------------------ |\n| float  | 4        | ±3.402 823 47E+38F（有效位数为6-7位）            |\n| double | 8        | ±1.797 693 134 862 315 70E+308（有效位数为15位） |\n\n| 布尔型  | 取值范围   |\n| ------- | ---------- |\n| boolean | true/false |\n\n| 字符型 | 取值范围 |\n| ------ | -------- |\n| char   | 0-65535  |\n\n## 数据类型转换\n\n1. 低类型-->高类型：自动转\n2. 高类型-->低类型：强制转换\n\n```\nint a = 10;\nbyte b = (byte) a;\n```\n\n## 运算符\n\n### 运算符类型\n\n1. 算数运算符\n\n2. 赋值运算符\n\n3. 位运算符\n\n4. 比较运算符\n\n5. 逻辑运算符\n\n### 运算符优先级\n\n| 运算符说明         | Java运算符                              |\n| ------------------ | --------------------------------------- |\n| 分隔符             | , [] () {} . ;                          |\n| 单目运算符         | ++ --  ~  ！                            |\n| 强制类型转换运算符 | (type)                                  |\n| 乘法/除法/求余     | */ %                                    |\n| 加法/减法          | +-                                      |\n| 移位运算符         | << >> >>>                               |\n| 关系运算           | < <= >= > instanceof                    |\n| 等价运算符         | == !=                                   |\n| 按位与             | &                                       |\n| 按位异或           | ^                                       |\n| 按位或             | \\|                                      |\n| 条件与             | &&                                      |\n| 条件或             | \\|\\|                                    |\n| 三目运算符         | ?:                                      |\n| 赋值               | = += -= *= /= &= \\|= ^= %= <<= >>= >>>= |\n\n# 三.流程控制\n\n1. 顺序结构：通常而言，我们的代码，根据书写的顺序在上而下执行。\n2. 分支结构：对多种可能出现的情况进行判断：单分支，双分支，多分支\n3. 循环结构：同一段代码片段多次执行\n\n## 顺序结构\n\n\n\n## 分支结构\n\n### if 单分支\n\n```java\nif(逻辑表达式){\n    //代码\n}\n```\n\n### if 双分支\n\n```\nif(逻辑表达式){\n\t//逻辑表达式结果为true，执行此处的代码\n}else{\n\t//逻辑表达式不成立，则执行此处的代码\n}\n```\n\n### if多分支\n\n```\nif(逻辑表达式){\n\n}else if(逻辑表达式){\n\n}else if(逻辑表达式){\n\n}else{\n\n}\n```\n\n1. 请将101转换成二进制，并将二进制的前3位替换为1，并求出原码\n2. 请输入一个年份，并判断是否是闰年\n3. 请输入一个数，判断是否是质数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369?# 《第1章 Java语言概述》密码：syl5\n\nhttps://www.yuque.com/docs/share/b9feb7da-7c3c-4ccb-8542-52a34ad5d965?# 《第2章 Java数据类型和运算符》密码：ekp0\n\nhttps://www.yuque.com/docs/share/89bb9cac-ccd1-44dd-b2e2-e11933c44c39?# 《第3章 流程控制》密码：zk84\n\nhttps://www.yuque.com/docs/share/5b051183-1e6a-4c80-904f-17070f1c9653?# 《第4章 数组》密码：mg6w","source":"_posts/Java基础.md","raw":"---\ntitle: Java基础\ndate: 2022-07-15 18:52:12\ntags:\n- Java\ncategories:\n- 后端组\ncover: https://www.itprotoday.com/sites/itprotoday.com/files/styles/article_featured_retina/public/java-logo.png?itok=Ch4V9Is3\ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom: \n---\nJava基础\n<!--more-->\n\n# 一.Java概述\n\n### Java跨平台实现\n\n1. Java源代码在编写过后，会编译成平台无关的字节码文件，该文件不依赖于任何平台\n2. Java针对不同的平台开发了不同的JVM，当程序运行时由JVM将字节码文件转换成对应平台的指令\n\n### Java的特点\n\n1. 简单性\n2. 跨平台\n3. 分布式\n4. 面向对象\n5. 安全性\n6. 多线程\n\n### Java源代码中注意事项\n\n1. Java源文件的命名和类名一致，并且首字符大写，如果有多个单词，所有单词的首字母均大写。\n2. main()写法固定，public static void main(String[] args);\n3. System中首字母大写\n\n### 技术名词\n\nJDK(Java Develop Kit):Java 开发工具\n\nJRE(Java Runtime Environment)：Java 运行环境\n\nJVM(Java Virtual machine )：Java虚拟机\n\n# 二.Java标识符和运算符\n\nJava是一门强类型语言，所谓的强类型语言，可以理解为包含以下2层含义：\n\n1. 所有的变量都必须先声明，后使用\n2. 变量的类型一旦确定，那么变量的值必须和数据类型相匹配\n\n## Java标识符\n\n标识符：类名、方法名、变量名统称为标识符\n\n1. 可以包含数字、字母、下划线，$，不能以数字开头\n2. 不能包含除了_，$以外的特殊字符。\n3. 不能使用Java关键字\n\n| abstract | continue | for        | new       | switch       |\n| -------- | -------- | ---------- | --------- | ------------ |\n| assert   | default  | if         | package   | synchronized |\n| boolean  | do       | goto       | private   | this         |\n| break    | double   | implements | protected | throws       |\n| byte     | else     | import     | public    | throw        |\n| case     | enum     | instanceof | return    | transient    |\n| catch    | extends  | int        | short     | try          |\n| char     | final    | interface  | static    | void         |\n| class    | finally  | long       | strictfp  | volatile     |\n| const    | float    | native     | super     | while        |\n\n**示例**\n\n```java\n/**\n * 标识符的命名规范\n * 1.\n * 2.不能包含除了$,_以外的字符\n * 3.不能包含关键字\n * @author MR.W\n */\npublic class Identifier {\n\t//错误原因：不能以数字开头\n//\tint 1ab;\n\tint _abc;\n\tint abc_;\n\tint a_bc;\n\tint abc1;\n\tint $abd;\n\tint ab$d;\n\tint abd$;\n\t//错误原因，包含除了$，_以外的特殊符号\n//\tint abc-;\n//\t错误原因，使用了Java关键字\n//\tint instanceof;\n\tpublic void abc() {\n\t}\n}\n```\n\n## Java命名方式\n\n1. 帕斯卡命名法：所有单词首字母均大写。适用于类名，例如：StudentManager\n2. 驼峰命名法：第一个单词的首字母小写，如果有多个但是，其余单词首字母均大写，适用于方法名，变量名。例如：studentAge，studentGender\n\n## Java数据类型\n\n1. 基本类型：byte short int long float double boolean char\n2. 引用类型: 数组， 类，接口\n\n## 变量的声明和初始化\n\n```\n数据类型  变量名 [=值];\n```\n\n## Java数据类型\n\n| 整型  | 字节长度 | 取值范围                                             |\n| ----- | -------- | ---------------------------------------------------- |\n| byte  | 1        | -128~127                                             |\n| short | 2        | -32768~32767                                         |\n| int   | 4        | -2 147 483 648~2 147 483 647                         |\n| long  | 8        | -9 223 372 036 854 775 808~9 223 372 036 854 775 807 |\n\n| 浮点型 | 字节长度 | 取值范围                                         |\n| ------ | -------- | ------------------------------------------------ |\n| float  | 4        | ±3.402 823 47E+38F（有效位数为6-7位）            |\n| double | 8        | ±1.797 693 134 862 315 70E+308（有效位数为15位） |\n\n| 布尔型  | 取值范围   |\n| ------- | ---------- |\n| boolean | true/false |\n\n| 字符型 | 取值范围 |\n| ------ | -------- |\n| char   | 0-65535  |\n\n## 数据类型转换\n\n1. 低类型-->高类型：自动转\n2. 高类型-->低类型：强制转换\n\n```\nint a = 10;\nbyte b = (byte) a;\n```\n\n## 运算符\n\n### 运算符类型\n\n1. 算数运算符\n\n2. 赋值运算符\n\n3. 位运算符\n\n4. 比较运算符\n\n5. 逻辑运算符\n\n### 运算符优先级\n\n| 运算符说明         | Java运算符                              |\n| ------------------ | --------------------------------------- |\n| 分隔符             | , [] () {} . ;                          |\n| 单目运算符         | ++ --  ~  ！                            |\n| 强制类型转换运算符 | (type)                                  |\n| 乘法/除法/求余     | */ %                                    |\n| 加法/减法          | +-                                      |\n| 移位运算符         | << >> >>>                               |\n| 关系运算           | < <= >= > instanceof                    |\n| 等价运算符         | == !=                                   |\n| 按位与             | &                                       |\n| 按位异或           | ^                                       |\n| 按位或             | \\|                                      |\n| 条件与             | &&                                      |\n| 条件或             | \\|\\|                                    |\n| 三目运算符         | ?:                                      |\n| 赋值               | = += -= *= /= &= \\|= ^= %= <<= >>= >>>= |\n\n# 三.流程控制\n\n1. 顺序结构：通常而言，我们的代码，根据书写的顺序在上而下执行。\n2. 分支结构：对多种可能出现的情况进行判断：单分支，双分支，多分支\n3. 循环结构：同一段代码片段多次执行\n\n## 顺序结构\n\n\n\n## 分支结构\n\n### if 单分支\n\n```java\nif(逻辑表达式){\n    //代码\n}\n```\n\n### if 双分支\n\n```\nif(逻辑表达式){\n\t//逻辑表达式结果为true，执行此处的代码\n}else{\n\t//逻辑表达式不成立，则执行此处的代码\n}\n```\n\n### if多分支\n\n```\nif(逻辑表达式){\n\n}else if(逻辑表达式){\n\n}else if(逻辑表达式){\n\n}else{\n\n}\n```\n\n1. 请将101转换成二进制，并将二进制的前3位替换为1，并求出原码\n2. 请输入一个年份，并判断是否是闰年\n3. 请输入一个数，判断是否是质数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369?# 《第1章 Java语言概述》密码：syl5\n\nhttps://www.yuque.com/docs/share/b9feb7da-7c3c-4ccb-8542-52a34ad5d965?# 《第2章 Java数据类型和运算符》密码：ekp0\n\nhttps://www.yuque.com/docs/share/89bb9cac-ccd1-44dd-b2e2-e11933c44c39?# 《第3章 流程控制》密码：zk84\n\nhttps://www.yuque.com/docs/share/5b051183-1e6a-4c80-904f-17070f1c9653?# 《第4章 数组》密码：mg6w","slug":"Java基础","published":1,"updated":"2022-07-19T12:51:45.524Z","_id":"cl5rjxbao0000lcuj9cpj6w23","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Java基础</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一-Java概述\"><a href=\"#一-Java概述\" class=\"headerlink\" title=\"一.Java概述\"></a>一.Java概述</h1><h3 id=\"Java跨平台实现\"><a href=\"#Java跨平台实现\" class=\"headerlink\" title=\"Java跨平台实现\"></a>Java跨平台实现</h3><ol>\n<li>Java源代码在编写过后，会编译成平台无关的字节码文件，该文件不依赖于任何平台</li>\n<li>Java针对不同的平台开发了不同的JVM，当程序运行时由JVM将字节码文件转换成对应平台的指令</li>\n</ol>\n<h3 id=\"Java的特点\"><a href=\"#Java的特点\" class=\"headerlink\" title=\"Java的特点\"></a>Java的特点</h3><ol>\n<li>简单性</li>\n<li>跨平台</li>\n<li>分布式</li>\n<li>面向对象</li>\n<li>安全性</li>\n<li>多线程</li>\n</ol>\n<h3 id=\"Java源代码中注意事项\"><a href=\"#Java源代码中注意事项\" class=\"headerlink\" title=\"Java源代码中注意事项\"></a>Java源代码中注意事项</h3><ol>\n<li>Java源文件的命名和类名一致，并且首字符大写，如果有多个单词，所有单词的首字母均大写。</li>\n<li>main()写法固定，public static void main(String[] args);</li>\n<li>System中首字母大写</li>\n</ol>\n<h3 id=\"技术名词\"><a href=\"#技术名词\" class=\"headerlink\" title=\"技术名词\"></a>技术名词</h3><p>JDK(Java Develop Kit):Java 开发工具</p>\n<p>JRE(Java Runtime Environment)：Java 运行环境</p>\n<p>JVM(Java Virtual machine )：Java虚拟机</p>\n<h1 id=\"二-Java标识符和运算符\"><a href=\"#二-Java标识符和运算符\" class=\"headerlink\" title=\"二.Java标识符和运算符\"></a>二.Java标识符和运算符</h1><p>Java是一门强类型语言，所谓的强类型语言，可以理解为包含以下2层含义：</p>\n<ol>\n<li>所有的变量都必须先声明，后使用</li>\n<li>变量的类型一旦确定，那么变量的值必须和数据类型相匹配</li>\n</ol>\n<h2 id=\"Java标识符\"><a href=\"#Java标识符\" class=\"headerlink\" title=\"Java标识符\"></a>Java标识符</h2><p>标识符：类名、方法名、变量名统称为标识符</p>\n<ol>\n<li>可以包含数字、字母、下划线，$，不能以数字开头</li>\n<li>不能包含除了_，$以外的特殊字符。</li>\n<li>不能使用Java关键字</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>continue</th>\n<th>for</th>\n<th>new</th>\n<th>switch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>assert</td>\n<td>default</td>\n<td>if</td>\n<td>package</td>\n<td>synchronized</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>do</td>\n<td>goto</td>\n<td>private</td>\n<td>this</td>\n</tr>\n<tr>\n<td>break</td>\n<td>double</td>\n<td>implements</td>\n<td>protected</td>\n<td>throws</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>else</td>\n<td>import</td>\n<td>public</td>\n<td>throw</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>instanceof</td>\n<td>return</td>\n<td>transient</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>extends</td>\n<td>int</td>\n<td>short</td>\n<td>try</td>\n</tr>\n<tr>\n<td>char</td>\n<td>final</td>\n<td>interface</td>\n<td>static</td>\n<td>void</td>\n</tr>\n<tr>\n<td>class</td>\n<td>finally</td>\n<td>long</td>\n<td>strictfp</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const</td>\n<td>float</td>\n<td>native</td>\n<td>super</td>\n<td>while</td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong></p>\n<pre><code class=\"java\">/**\n * 标识符的命名规范\n * 1.\n * 2.不能包含除了$,_以外的字符\n * 3.不能包含关键字\n * @author MR.W\n */\npublic class Identifier &#123;\n    //错误原因：不能以数字开头\n//    int 1ab;\n    int _abc;\n    int abc_;\n    int a_bc;\n    int abc1;\n    int $abd;\n    int ab$d;\n    int abd$;\n    //错误原因，包含除了$，_以外的特殊符号\n//    int abc-;\n//    错误原因，使用了Java关键字\n//    int instanceof;\n    public void abc() &#123;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"Java命名方式\"><a href=\"#Java命名方式\" class=\"headerlink\" title=\"Java命名方式\"></a>Java命名方式</h2><ol>\n<li>帕斯卡命名法：所有单词首字母均大写。适用于类名，例如：StudentManager</li>\n<li>驼峰命名法：第一个单词的首字母小写，如果有多个但是，其余单词首字母均大写，适用于方法名，变量名。例如：studentAge，studentGender</li>\n</ol>\n<h2 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><ol>\n<li>基本类型：byte short int long float double boolean char</li>\n<li>引用类型: 数组， 类，接口</li>\n</ol>\n<h2 id=\"变量的声明和初始化\"><a href=\"#变量的声明和初始化\" class=\"headerlink\" title=\"变量的声明和初始化\"></a>变量的声明和初始化</h2><pre><code>数据类型  变量名 [=值];\n</code></pre>\n<h2 id=\"Java数据类型-1\"><a href=\"#Java数据类型-1\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><table>\n<thead>\n<tr>\n<th>整型</th>\n<th>字节长度</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>1</td>\n<td>-128~127</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>-32768~32767</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>-2 147 483 648~2 147 483 647</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>-9 223 372 036 854 775 808~9 223 372 036 854 775 807</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>浮点型</th>\n<th>字节长度</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>4</td>\n<td>±3.402 823 47E+38F（有效位数为6-7位）</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>±1.797 693 134 862 315 70E+308（有效位数为15位）</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>布尔型</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>boolean</td>\n<td>true/false</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>字符型</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>char</td>\n<td>0-65535</td>\n</tr>\n</tbody></table>\n<h2 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h2><ol>\n<li>低类型–&gt;高类型：自动转</li>\n<li>高类型–&gt;低类型：强制转换</li>\n</ol>\n<pre><code>int a = 10;\nbyte b = (byte) a;\n</code></pre>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"运算符类型\"><a href=\"#运算符类型\" class=\"headerlink\" title=\"运算符类型\"></a>运算符类型</h3><ol>\n<li><p>算数运算符</p>\n</li>\n<li><p>赋值运算符</p>\n</li>\n<li><p>位运算符</p>\n</li>\n<li><p>比较运算符</p>\n</li>\n<li><p>逻辑运算符</p>\n</li>\n</ol>\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><table>\n<thead>\n<tr>\n<th>运算符说明</th>\n<th>Java运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>分隔符</td>\n<td>, [] () {} . ;</td>\n</tr>\n<tr>\n<td>单目运算符</td>\n<td>++ –  ~  ！</td>\n</tr>\n<tr>\n<td>强制类型转换运算符</td>\n<td>(type)</td>\n</tr>\n<tr>\n<td>乘法/除法/求余</td>\n<td>*/ %</td>\n</tr>\n<tr>\n<td>加法/减法</td>\n<td>+-</td>\n</tr>\n<tr>\n<td>移位运算符</td>\n<td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>\n</tr>\n<tr>\n<td>关系运算</td>\n<td>&lt; &lt;= &gt;= &gt; instanceof</td>\n</tr>\n<tr>\n<td>等价运算符</td>\n<td>== !=</td>\n</tr>\n<tr>\n<td>按位与</td>\n<td>&amp;</td>\n</tr>\n<tr>\n<td>按位异或</td>\n<td>^</td>\n</tr>\n<tr>\n<td>按位或</td>\n<td>|</td>\n</tr>\n<tr>\n<td>条件与</td>\n<td>&amp;&amp;</td>\n</tr>\n<tr>\n<td>条件或</td>\n<td>||</td>\n</tr>\n<tr>\n<td>三目运算符</td>\n<td>?:</td>\n</tr>\n<tr>\n<td>赋值</td>\n<td>= += -= *= /= &amp;= |= ^= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td>\n</tr>\n</tbody></table>\n<h1 id=\"三-流程控制\"><a href=\"#三-流程控制\" class=\"headerlink\" title=\"三.流程控制\"></a>三.流程控制</h1><ol>\n<li>顺序结构：通常而言，我们的代码，根据书写的顺序在上而下执行。</li>\n<li>分支结构：对多种可能出现的情况进行判断：单分支，双分支，多分支</li>\n<li>循环结构：同一段代码片段多次执行</li>\n</ol>\n<h2 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h2><h2 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h2><h3 id=\"if-单分支\"><a href=\"#if-单分支\" class=\"headerlink\" title=\"if 单分支\"></a>if 单分支</h3><pre><code class=\"java\">if(逻辑表达式)&#123;\n    //代码\n&#125;\n</code></pre>\n<h3 id=\"if-双分支\"><a href=\"#if-双分支\" class=\"headerlink\" title=\"if 双分支\"></a>if 双分支</h3><pre><code>if(逻辑表达式)&#123;\n    //逻辑表达式结果为true，执行此处的代码\n&#125;else&#123;\n    //逻辑表达式不成立，则执行此处的代码\n&#125;\n</code></pre>\n<h3 id=\"if多分支\"><a href=\"#if多分支\" class=\"headerlink\" title=\"if多分支\"></a>if多分支</h3><pre><code>if(逻辑表达式)&#123;\n\n&#125;else if(逻辑表达式)&#123;\n\n&#125;else if(逻辑表达式)&#123;\n\n&#125;else&#123;\n\n&#125;\n</code></pre>\n<ol>\n<li>请将101转换成二进制，并将二进制的前3位替换为1，并求出原码</li>\n<li>请输入一个年份，并判断是否是闰年</li>\n<li>请输入一个数，判断是否是质数</li>\n</ol>\n<p><a href=\"https://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369#\">https://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369?#</a> 《第1章 Java语言概述》密码：syl5</p>\n<p><a href=\"https://www.yuque.com/docs/share/b9feb7da-7c3c-4ccb-8542-52a34ad5d965#\">https://www.yuque.com/docs/share/b9feb7da-7c3c-4ccb-8542-52a34ad5d965?#</a> 《第2章 Java数据类型和运算符》密码：ekp0</p>\n<p><a href=\"https://www.yuque.com/docs/share/89bb9cac-ccd1-44dd-b2e2-e11933c44c39#\">https://www.yuque.com/docs/share/89bb9cac-ccd1-44dd-b2e2-e11933c44c39?#</a> 《第3章 流程控制》密码：zk84</p>\n<p><a href=\"https://www.yuque.com/docs/share/5b051183-1e6a-4c80-904f-17070f1c9653#\">https://www.yuque.com/docs/share/5b051183-1e6a-4c80-904f-17070f1c9653?#</a> 《第4章 数组》密码：mg6w</p>\n","site":{"data":{}},"excerpt":"<p>Java基础</p>","more":"<h1 id=\"一-Java概述\"><a href=\"#一-Java概述\" class=\"headerlink\" title=\"一.Java概述\"></a>一.Java概述</h1><h3 id=\"Java跨平台实现\"><a href=\"#Java跨平台实现\" class=\"headerlink\" title=\"Java跨平台实现\"></a>Java跨平台实现</h3><ol>\n<li>Java源代码在编写过后，会编译成平台无关的字节码文件，该文件不依赖于任何平台</li>\n<li>Java针对不同的平台开发了不同的JVM，当程序运行时由JVM将字节码文件转换成对应平台的指令</li>\n</ol>\n<h3 id=\"Java的特点\"><a href=\"#Java的特点\" class=\"headerlink\" title=\"Java的特点\"></a>Java的特点</h3><ol>\n<li>简单性</li>\n<li>跨平台</li>\n<li>分布式</li>\n<li>面向对象</li>\n<li>安全性</li>\n<li>多线程</li>\n</ol>\n<h3 id=\"Java源代码中注意事项\"><a href=\"#Java源代码中注意事项\" class=\"headerlink\" title=\"Java源代码中注意事项\"></a>Java源代码中注意事项</h3><ol>\n<li>Java源文件的命名和类名一致，并且首字符大写，如果有多个单词，所有单词的首字母均大写。</li>\n<li>main()写法固定，public static void main(String[] args);</li>\n<li>System中首字母大写</li>\n</ol>\n<h3 id=\"技术名词\"><a href=\"#技术名词\" class=\"headerlink\" title=\"技术名词\"></a>技术名词</h3><p>JDK(Java Develop Kit):Java 开发工具</p>\n<p>JRE(Java Runtime Environment)：Java 运行环境</p>\n<p>JVM(Java Virtual machine )：Java虚拟机</p>\n<h1 id=\"二-Java标识符和运算符\"><a href=\"#二-Java标识符和运算符\" class=\"headerlink\" title=\"二.Java标识符和运算符\"></a>二.Java标识符和运算符</h1><p>Java是一门强类型语言，所谓的强类型语言，可以理解为包含以下2层含义：</p>\n<ol>\n<li>所有的变量都必须先声明，后使用</li>\n<li>变量的类型一旦确定，那么变量的值必须和数据类型相匹配</li>\n</ol>\n<h2 id=\"Java标识符\"><a href=\"#Java标识符\" class=\"headerlink\" title=\"Java标识符\"></a>Java标识符</h2><p>标识符：类名、方法名、变量名统称为标识符</p>\n<ol>\n<li>可以包含数字、字母、下划线，$，不能以数字开头</li>\n<li>不能包含除了_，$以外的特殊字符。</li>\n<li>不能使用Java关键字</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>continue</th>\n<th>for</th>\n<th>new</th>\n<th>switch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>assert</td>\n<td>default</td>\n<td>if</td>\n<td>package</td>\n<td>synchronized</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>do</td>\n<td>goto</td>\n<td>private</td>\n<td>this</td>\n</tr>\n<tr>\n<td>break</td>\n<td>double</td>\n<td>implements</td>\n<td>protected</td>\n<td>throws</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>else</td>\n<td>import</td>\n<td>public</td>\n<td>throw</td>\n</tr>\n<tr>\n<td>case</td>\n<td>enum</td>\n<td>instanceof</td>\n<td>return</td>\n<td>transient</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>extends</td>\n<td>int</td>\n<td>short</td>\n<td>try</td>\n</tr>\n<tr>\n<td>char</td>\n<td>final</td>\n<td>interface</td>\n<td>static</td>\n<td>void</td>\n</tr>\n<tr>\n<td>class</td>\n<td>finally</td>\n<td>long</td>\n<td>strictfp</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>const</td>\n<td>float</td>\n<td>native</td>\n<td>super</td>\n<td>while</td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong></p>\n<pre><code class=\"java\">/**\n * 标识符的命名规范\n * 1.\n * 2.不能包含除了$,_以外的字符\n * 3.不能包含关键字\n * @author MR.W\n */\npublic class Identifier &#123;\n    //错误原因：不能以数字开头\n//    int 1ab;\n    int _abc;\n    int abc_;\n    int a_bc;\n    int abc1;\n    int $abd;\n    int ab$d;\n    int abd$;\n    //错误原因，包含除了$，_以外的特殊符号\n//    int abc-;\n//    错误原因，使用了Java关键字\n//    int instanceof;\n    public void abc() &#123;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"Java命名方式\"><a href=\"#Java命名方式\" class=\"headerlink\" title=\"Java命名方式\"></a>Java命名方式</h2><ol>\n<li>帕斯卡命名法：所有单词首字母均大写。适用于类名，例如：StudentManager</li>\n<li>驼峰命名法：第一个单词的首字母小写，如果有多个但是，其余单词首字母均大写，适用于方法名，变量名。例如：studentAge，studentGender</li>\n</ol>\n<h2 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><ol>\n<li>基本类型：byte short int long float double boolean char</li>\n<li>引用类型: 数组， 类，接口</li>\n</ol>\n<h2 id=\"变量的声明和初始化\"><a href=\"#变量的声明和初始化\" class=\"headerlink\" title=\"变量的声明和初始化\"></a>变量的声明和初始化</h2><pre><code>数据类型  变量名 [=值];\n</code></pre>\n<h2 id=\"Java数据类型-1\"><a href=\"#Java数据类型-1\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><table>\n<thead>\n<tr>\n<th>整型</th>\n<th>字节长度</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>1</td>\n<td>-128~127</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2</td>\n<td>-32768~32767</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4</td>\n<td>-2 147 483 648~2 147 483 647</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8</td>\n<td>-9 223 372 036 854 775 808~9 223 372 036 854 775 807</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>浮点型</th>\n<th>字节长度</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>4</td>\n<td>±3.402 823 47E+38F（有效位数为6-7位）</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8</td>\n<td>±1.797 693 134 862 315 70E+308（有效位数为15位）</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>布尔型</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>boolean</td>\n<td>true/false</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>字符型</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>char</td>\n<td>0-65535</td>\n</tr>\n</tbody></table>\n<h2 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h2><ol>\n<li>低类型–&gt;高类型：自动转</li>\n<li>高类型–&gt;低类型：强制转换</li>\n</ol>\n<pre><code>int a = 10;\nbyte b = (byte) a;\n</code></pre>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"运算符类型\"><a href=\"#运算符类型\" class=\"headerlink\" title=\"运算符类型\"></a>运算符类型</h3><ol>\n<li><p>算数运算符</p>\n</li>\n<li><p>赋值运算符</p>\n</li>\n<li><p>位运算符</p>\n</li>\n<li><p>比较运算符</p>\n</li>\n<li><p>逻辑运算符</p>\n</li>\n</ol>\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><table>\n<thead>\n<tr>\n<th>运算符说明</th>\n<th>Java运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>分隔符</td>\n<td>, [] () {} . ;</td>\n</tr>\n<tr>\n<td>单目运算符</td>\n<td>++ –  ~  ！</td>\n</tr>\n<tr>\n<td>强制类型转换运算符</td>\n<td>(type)</td>\n</tr>\n<tr>\n<td>乘法/除法/求余</td>\n<td>*/ %</td>\n</tr>\n<tr>\n<td>加法/减法</td>\n<td>+-</td>\n</tr>\n<tr>\n<td>移位运算符</td>\n<td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>\n</tr>\n<tr>\n<td>关系运算</td>\n<td>&lt; &lt;= &gt;= &gt; instanceof</td>\n</tr>\n<tr>\n<td>等价运算符</td>\n<td>== !=</td>\n</tr>\n<tr>\n<td>按位与</td>\n<td>&amp;</td>\n</tr>\n<tr>\n<td>按位异或</td>\n<td>^</td>\n</tr>\n<tr>\n<td>按位或</td>\n<td>|</td>\n</tr>\n<tr>\n<td>条件与</td>\n<td>&amp;&amp;</td>\n</tr>\n<tr>\n<td>条件或</td>\n<td>||</td>\n</tr>\n<tr>\n<td>三目运算符</td>\n<td>?:</td>\n</tr>\n<tr>\n<td>赋值</td>\n<td>= += -= *= /= &amp;= |= ^= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td>\n</tr>\n</tbody></table>\n<h1 id=\"三-流程控制\"><a href=\"#三-流程控制\" class=\"headerlink\" title=\"三.流程控制\"></a>三.流程控制</h1><ol>\n<li>顺序结构：通常而言，我们的代码，根据书写的顺序在上而下执行。</li>\n<li>分支结构：对多种可能出现的情况进行判断：单分支，双分支，多分支</li>\n<li>循环结构：同一段代码片段多次执行</li>\n</ol>\n<h2 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h2><h2 id=\"分支结构\"><a href=\"#分支结构\" class=\"headerlink\" title=\"分支结构\"></a>分支结构</h2><h3 id=\"if-单分支\"><a href=\"#if-单分支\" class=\"headerlink\" title=\"if 单分支\"></a>if 单分支</h3><pre><code class=\"java\">if(逻辑表达式)&#123;\n    //代码\n&#125;\n</code></pre>\n<h3 id=\"if-双分支\"><a href=\"#if-双分支\" class=\"headerlink\" title=\"if 双分支\"></a>if 双分支</h3><pre><code>if(逻辑表达式)&#123;\n    //逻辑表达式结果为true，执行此处的代码\n&#125;else&#123;\n    //逻辑表达式不成立，则执行此处的代码\n&#125;\n</code></pre>\n<h3 id=\"if多分支\"><a href=\"#if多分支\" class=\"headerlink\" title=\"if多分支\"></a>if多分支</h3><pre><code>if(逻辑表达式)&#123;\n\n&#125;else if(逻辑表达式)&#123;\n\n&#125;else if(逻辑表达式)&#123;\n\n&#125;else&#123;\n\n&#125;\n</code></pre>\n<ol>\n<li>请将101转换成二进制，并将二进制的前3位替换为1，并求出原码</li>\n<li>请输入一个年份，并判断是否是闰年</li>\n<li>请输入一个数，判断是否是质数</li>\n</ol>\n<p><a href=\"https://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369#\">https://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369?#</a> 《第1章 Java语言概述》密码：syl5</p>\n<p><a href=\"https://www.yuque.com/docs/share/b9feb7da-7c3c-4ccb-8542-52a34ad5d965#\">https://www.yuque.com/docs/share/b9feb7da-7c3c-4ccb-8542-52a34ad5d965?#</a> 《第2章 Java数据类型和运算符》密码：ekp0</p>\n<p><a href=\"https://www.yuque.com/docs/share/89bb9cac-ccd1-44dd-b2e2-e11933c44c39#\">https://www.yuque.com/docs/share/89bb9cac-ccd1-44dd-b2e2-e11933c44c39?#</a> 《第3章 流程控制》密码：zk84</p>\n<p><a href=\"https://www.yuque.com/docs/share/5b051183-1e6a-4c80-904f-17070f1c9653#\">https://www.yuque.com/docs/share/5b051183-1e6a-4c80-904f-17070f1c9653?#</a> 《第4章 数组》密码：mg6w</p>"},{"title":"Java常见的排序算法","date":"2022-07-19T12:48:16.000Z","cover":null,"coverWidth":1200,"coverHeight":320,"author":"xiguayaaaaa","from":null,"_content":" Java常见得的排序算法\n <!--more-->\n# Java常见得的排序算法\n\n## 1.冒泡排序\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n\n2. 对每一对相邻元素放同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n![](https://files.catbox.moe/a0pb5h.gif)\n\n```java\npublic static void main(String[] args) {\n\t\tint[] a = {6,9,7,3,1};\n\t\tfor (int i = 0; i < a.length-1; i++) {\n\t\t\tfor (int j = 0; j < a.length-i-1; j++) {\n\t\t\t\tif(a[j]>a[j+1]) {\n\t\t\t\t\tint temp =a[j];\n\t\t\t\t\ta[j] = a[j+1];\n\t\t\t\t\ta[j+1] =temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(Arrays.toString(a));\n}\n```\n\n## 2.选择排序\n\n1. 在长度为N的无序数组中，第一次遍历-1个数，找到最小的数与第一个元素交换\n2. 第二次遍历-2个数，找到最小的数值与第二个元素交换\n3. 重复以上步骤\n4. 第n-1次遍历，找到最小的数值与第n-1的元素交换，排序完成\n\n![](https://files.catbox.moe/6jqfd2.gif)\n\n```java\npublic static void main(String[] args) {\n\t\tint[] a = {8,2,3,17,23,85,1,9};\n\t\tfor (int i = 0; i < a.length; i++) {\n            //定义此轮循环最小数放置的位置\n            int minIndex = i;\n            //从第2个数依次和后面的数进行对比\n\t\t\tfor (int j = i+1; j < a.length; j++) {\n                //如果minIndex的数比j大则记录j\n\t\t\t\tif(a[minIndex]>a[j]) {\n\t\t\t\t\tminIndex=j;\n\t\t\t\t}\n\t\t\t}\n            if(minIndex!=i){\n                int temp = a[minIndex];\n                a[minIndex] = a[i];\n                a[i] = temp;\n                System.out.println(\"每次结果>>>\"+Arrays.toString(a));\n            }\n\t\t\tSystem.out.println(\"每轮结果===\"+Arrays.toString(a));\n\t\t}\n\t}\n```\n\n## 3.插入排序\n\n1. 在要排序的无序数组中，假定-1个数已经排好序，现在将第个数插入到前面的有序数列中，使得这个个数也是拍好序的，反复循环，直到全部排好顺序。插入排序也可以理解为从第二个数开始，前面的相邻的数依次两两对比，如果后面的数比前面的数小，则交换位置。(如果实在理解不了，可以类比冒泡排序，把插入排序理解为一种特殊的冒泡排序）\n\n![](https://files.catbox.moe/hzemg8.gif)\n\n```java\npublic static void main(String[] args) {\n\t\tint[] a = {87,86,82,10,30};\n\t\tfor (int i = 0; i < a.length-1; i++) {\n\t\t\tfor (int j = i+1; j >0; j--) {\n\t\t\t\tif(a[j]<a[j-1]) {\n\t\t\t\t\tint temp = a[j];\n\t\t\t\t\ta[j] = a[j-1];\n\t\t\t\t\ta[j-1] = temp;\n\t\t\t\t}else{\n                \tbreak;   \n                }\n\t\t\t\tSystem.out.println(\"每次结果===\"+Arrays.toString(a));\n\t\t\t}\n\t\t\tSystem.out.println(\"第\"+(i+1)+\"轮结果>>>\"+Arrays.toString(a));\n\t\t}\n\t}\n```\n\n## 4.快速排序\n\n快速排序有两种实现方式：双边循环法和挖坑法，思路如下：\n\n##### 快速排序\n\n1. 定义左右指针，并选取一个数作为基准（通常选择数组第一个）\n2. 移动右指针，如果右指针的数小于基准数，则停止移动，反之则继续移动\n3. 移动左指针，如果左指针的数大于基准数，则停止移动，反之则继续移动\n4. 当左右指针都停止移动时交换左右指针处的数\n5. 当左右两个指针停在相同位置时，交换指针处的数和基准数的位置\n6. 将数组以左右指针位置处一分为二重复上述步骤。\n\n```Java\npublic class QuickSort {\n\t/**\n\t * 双边循环\n\t * @return\n\t */\n\tpublic static int pivotIndex(int[]ary,int startIndex,int endIndex) {\n\t\t//保存左右两个指针，从第一个元素和最后一个元素开始\n\t\tint left = startIndex;\n\t\tint right = endIndex;\n\t\t//获取基准，一般选择数组第一个数\n\t\tint pivot = ary[startIndex];\n\t\t//大循环，当左右两个指针不相等时，左指针右移，右指针左移\n\t\twhile (left!=right) {\n\t\t\t//右边指针向左移动，当对应元素大于基准数时继续移动，小于基准数时停止移动\n\t\t\twhile(right>left&&ary[right]>=pivot) {\n\t\t\t\tright--;\n\t\t\t}\n\t\t\t//左边指针向右移动，当小于基准数时继续移动，大于基准数时停止移动\n\t\t\twhile (right>left&&ary[left]<=pivot) {\n\t\t\t\tleft++;\n\t\t\t}\n\t\t\t//此时如果左边指针小于右边指针时；左右指针交换元素\n\t\t\tif(left<right) {\n\t\t\t\tint temp = ary[right];\n\t\t\t\tary[right] = ary[left];\n\t\t\t\tary[left] = temp;\n\t\t\t}\n\t\t}\n\t\tint index = left;\n\t\t//如果两个指针相等时,交换基准元素和当前位置的数\n\t\tary[startIndex] = ary[index];\n\t\tary[index] = pivot;\n\t\treturn index;\n\t}\n\tpublic static void qucikSort(int[] ary,int startIndex,int endIndex) {\n\t\tif(startIndex>endIndex) {\n\t\t\treturn;\n\t\t}\n\t\tint index = pivotIndex(ary,startIndex,endIndex);\n\t\tqucikSort(ary, startIndex, index-1);\n\t\tqucikSort(ary, index+1, endIndex);\n\t}\n\tpublic static void main(String[] args) {\n\t\tint[] a= {5,6,1,2,4,9,3};\n\t\tqucikSort(a, 0, a.length-1);\n\t\tSystem.out.println(Arrays.toString(a));\n\t}\n}\n```\n\n##### 挖坑法\n\n1. 选取起始位置作为标记位（也就是坑），选取一个数作为基准，通常是数组第一个\n2. 从数组第二数开始依次和基准数对比，如果比基准数小，则扩大小于基准数的区间，也就是mark++,并将该数与标mark处的数交换\n3. 循环结束后，将mark处的数和基准数进行交换\n4. 以mark为界，将数组一分为二重复上述步骤\n\n![](https://files.catbox.moe/dcwsxe.gif)\n\n```Java\n/**\n * 单边循环\n * @author MR.W\n */\npublic class QucikSort2 {\n\tpublic static int pivotIndex(int[] ary,int startIndex,int endIndex) {\n\t\tint mark = startIndex;\n\t\tint pivot = ary[startIndex];\n\t\tfor (int i = startIndex+1; i <= endIndex; i++) {\n\t\t\t//如果指针指向的元素小于基准元素，干两件事情\n\t\t\t//1.mark+1,扩大小于基准数的区间\n\t\t\t//2.将指针所指向的数和mark位置处的数进行交换\n\t\t\tif(ary[i]<pivot) {\n\t\t\t\tmark++;\n\t\t\t\tint temp = ary[i];\n\t\t\t\tary[i] = ary[mark];\n\t\t\t\tary[mark] = temp;\n\t\t\t}\n\t\t}\n\t\t//当循环结束时将mark位置的数和基准数进行交换\n\t\tary[startIndex]= ary[mark]; \n\t\tary[mark] = pivot;\n\t\treturn mark;\n\t}\n\tpublic static void quickSort(int[] ary,int startIndex,int endIndex) {\n\t\tif(startIndex>endIndex) {\n\t\t\treturn;\n\t\t}\n\t\tint index = pivotIndex(ary, startIndex, endIndex);\n\t\tquickSort(ary, startIndex, index-1);\n\t\tquickSort(ary, index+1, endIndex);\n\t}\n\tpublic static void main(String[] args) {\n\t\tint [] a = {7,9,1,4,8};\n\t\tquickSort(a, 0, a.length-1);\n\t\tSystem.out.println(Arrays.toString(a));\n\t}\n}\n```\n\n```java\npublic static void main(String[] args) {\n\t\t\n\t\tint [] a = {5,1,6,2,3};\n\t\t\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tfor (int j = 0; j < a.length-1; j++) {\n\t\t\t\tint temp;\n\t\t\t\tif(a[i]<a[j]) {\n\t\t\t\t\ttemp = a[j];\n\t\t\t\t\ta[j] = a[i];\n\t\t\t\t\ta[i] = temp;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"每次\"+Arrays.toString(a));\n\t\t\t}\n\t\t\tSystem.out.println(\"每轮\"+Arrays.toString(a));\n\t\t}\n\t\tSystem.out.println(\"最后\"+Arrays.toString(a));\n\t}\n```\n\n","source":"_posts/Java常见的排序算法.md","raw":"---\ntitle: Java常见的排序算法\ndate: 2022-07-19 20:48:16\ntags:\n- Java\ncategories:\n- 后端组\ncover: \ncoverWidth: 1200\ncoverHeight: 320\nauthor: xiguayaaaaa\nfrom: \n---\n Java常见得的排序算法\n <!--more-->\n# Java常见得的排序算法\n\n## 1.冒泡排序\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n\n2. 对每一对相邻元素放同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n![](https://files.catbox.moe/a0pb5h.gif)\n\n```java\npublic static void main(String[] args) {\n\t\tint[] a = {6,9,7,3,1};\n\t\tfor (int i = 0; i < a.length-1; i++) {\n\t\t\tfor (int j = 0; j < a.length-i-1; j++) {\n\t\t\t\tif(a[j]>a[j+1]) {\n\t\t\t\t\tint temp =a[j];\n\t\t\t\t\ta[j] = a[j+1];\n\t\t\t\t\ta[j+1] =temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(Arrays.toString(a));\n}\n```\n\n## 2.选择排序\n\n1. 在长度为N的无序数组中，第一次遍历-1个数，找到最小的数与第一个元素交换\n2. 第二次遍历-2个数，找到最小的数值与第二个元素交换\n3. 重复以上步骤\n4. 第n-1次遍历，找到最小的数值与第n-1的元素交换，排序完成\n\n![](https://files.catbox.moe/6jqfd2.gif)\n\n```java\npublic static void main(String[] args) {\n\t\tint[] a = {8,2,3,17,23,85,1,9};\n\t\tfor (int i = 0; i < a.length; i++) {\n            //定义此轮循环最小数放置的位置\n            int minIndex = i;\n            //从第2个数依次和后面的数进行对比\n\t\t\tfor (int j = i+1; j < a.length; j++) {\n                //如果minIndex的数比j大则记录j\n\t\t\t\tif(a[minIndex]>a[j]) {\n\t\t\t\t\tminIndex=j;\n\t\t\t\t}\n\t\t\t}\n            if(minIndex!=i){\n                int temp = a[minIndex];\n                a[minIndex] = a[i];\n                a[i] = temp;\n                System.out.println(\"每次结果>>>\"+Arrays.toString(a));\n            }\n\t\t\tSystem.out.println(\"每轮结果===\"+Arrays.toString(a));\n\t\t}\n\t}\n```\n\n## 3.插入排序\n\n1. 在要排序的无序数组中，假定-1个数已经排好序，现在将第个数插入到前面的有序数列中，使得这个个数也是拍好序的，反复循环，直到全部排好顺序。插入排序也可以理解为从第二个数开始，前面的相邻的数依次两两对比，如果后面的数比前面的数小，则交换位置。(如果实在理解不了，可以类比冒泡排序，把插入排序理解为一种特殊的冒泡排序）\n\n![](https://files.catbox.moe/hzemg8.gif)\n\n```java\npublic static void main(String[] args) {\n\t\tint[] a = {87,86,82,10,30};\n\t\tfor (int i = 0; i < a.length-1; i++) {\n\t\t\tfor (int j = i+1; j >0; j--) {\n\t\t\t\tif(a[j]<a[j-1]) {\n\t\t\t\t\tint temp = a[j];\n\t\t\t\t\ta[j] = a[j-1];\n\t\t\t\t\ta[j-1] = temp;\n\t\t\t\t}else{\n                \tbreak;   \n                }\n\t\t\t\tSystem.out.println(\"每次结果===\"+Arrays.toString(a));\n\t\t\t}\n\t\t\tSystem.out.println(\"第\"+(i+1)+\"轮结果>>>\"+Arrays.toString(a));\n\t\t}\n\t}\n```\n\n## 4.快速排序\n\n快速排序有两种实现方式：双边循环法和挖坑法，思路如下：\n\n##### 快速排序\n\n1. 定义左右指针，并选取一个数作为基准（通常选择数组第一个）\n2. 移动右指针，如果右指针的数小于基准数，则停止移动，反之则继续移动\n3. 移动左指针，如果左指针的数大于基准数，则停止移动，反之则继续移动\n4. 当左右指针都停止移动时交换左右指针处的数\n5. 当左右两个指针停在相同位置时，交换指针处的数和基准数的位置\n6. 将数组以左右指针位置处一分为二重复上述步骤。\n\n```Java\npublic class QuickSort {\n\t/**\n\t * 双边循环\n\t * @return\n\t */\n\tpublic static int pivotIndex(int[]ary,int startIndex,int endIndex) {\n\t\t//保存左右两个指针，从第一个元素和最后一个元素开始\n\t\tint left = startIndex;\n\t\tint right = endIndex;\n\t\t//获取基准，一般选择数组第一个数\n\t\tint pivot = ary[startIndex];\n\t\t//大循环，当左右两个指针不相等时，左指针右移，右指针左移\n\t\twhile (left!=right) {\n\t\t\t//右边指针向左移动，当对应元素大于基准数时继续移动，小于基准数时停止移动\n\t\t\twhile(right>left&&ary[right]>=pivot) {\n\t\t\t\tright--;\n\t\t\t}\n\t\t\t//左边指针向右移动，当小于基准数时继续移动，大于基准数时停止移动\n\t\t\twhile (right>left&&ary[left]<=pivot) {\n\t\t\t\tleft++;\n\t\t\t}\n\t\t\t//此时如果左边指针小于右边指针时；左右指针交换元素\n\t\t\tif(left<right) {\n\t\t\t\tint temp = ary[right];\n\t\t\t\tary[right] = ary[left];\n\t\t\t\tary[left] = temp;\n\t\t\t}\n\t\t}\n\t\tint index = left;\n\t\t//如果两个指针相等时,交换基准元素和当前位置的数\n\t\tary[startIndex] = ary[index];\n\t\tary[index] = pivot;\n\t\treturn index;\n\t}\n\tpublic static void qucikSort(int[] ary,int startIndex,int endIndex) {\n\t\tif(startIndex>endIndex) {\n\t\t\treturn;\n\t\t}\n\t\tint index = pivotIndex(ary,startIndex,endIndex);\n\t\tqucikSort(ary, startIndex, index-1);\n\t\tqucikSort(ary, index+1, endIndex);\n\t}\n\tpublic static void main(String[] args) {\n\t\tint[] a= {5,6,1,2,4,9,3};\n\t\tqucikSort(a, 0, a.length-1);\n\t\tSystem.out.println(Arrays.toString(a));\n\t}\n}\n```\n\n##### 挖坑法\n\n1. 选取起始位置作为标记位（也就是坑），选取一个数作为基准，通常是数组第一个\n2. 从数组第二数开始依次和基准数对比，如果比基准数小，则扩大小于基准数的区间，也就是mark++,并将该数与标mark处的数交换\n3. 循环结束后，将mark处的数和基准数进行交换\n4. 以mark为界，将数组一分为二重复上述步骤\n\n![](https://files.catbox.moe/dcwsxe.gif)\n\n```Java\n/**\n * 单边循环\n * @author MR.W\n */\npublic class QucikSort2 {\n\tpublic static int pivotIndex(int[] ary,int startIndex,int endIndex) {\n\t\tint mark = startIndex;\n\t\tint pivot = ary[startIndex];\n\t\tfor (int i = startIndex+1; i <= endIndex; i++) {\n\t\t\t//如果指针指向的元素小于基准元素，干两件事情\n\t\t\t//1.mark+1,扩大小于基准数的区间\n\t\t\t//2.将指针所指向的数和mark位置处的数进行交换\n\t\t\tif(ary[i]<pivot) {\n\t\t\t\tmark++;\n\t\t\t\tint temp = ary[i];\n\t\t\t\tary[i] = ary[mark];\n\t\t\t\tary[mark] = temp;\n\t\t\t}\n\t\t}\n\t\t//当循环结束时将mark位置的数和基准数进行交换\n\t\tary[startIndex]= ary[mark]; \n\t\tary[mark] = pivot;\n\t\treturn mark;\n\t}\n\tpublic static void quickSort(int[] ary,int startIndex,int endIndex) {\n\t\tif(startIndex>endIndex) {\n\t\t\treturn;\n\t\t}\n\t\tint index = pivotIndex(ary, startIndex, endIndex);\n\t\tquickSort(ary, startIndex, index-1);\n\t\tquickSort(ary, index+1, endIndex);\n\t}\n\tpublic static void main(String[] args) {\n\t\tint [] a = {7,9,1,4,8};\n\t\tquickSort(a, 0, a.length-1);\n\t\tSystem.out.println(Arrays.toString(a));\n\t}\n}\n```\n\n```java\npublic static void main(String[] args) {\n\t\t\n\t\tint [] a = {5,1,6,2,3};\n\t\t\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tfor (int j = 0; j < a.length-1; j++) {\n\t\t\t\tint temp;\n\t\t\t\tif(a[i]<a[j]) {\n\t\t\t\t\ttemp = a[j];\n\t\t\t\t\ta[j] = a[i];\n\t\t\t\t\ta[i] = temp;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"每次\"+Arrays.toString(a));\n\t\t\t}\n\t\t\tSystem.out.println(\"每轮\"+Arrays.toString(a));\n\t\t}\n\t\tSystem.out.println(\"最后\"+Arrays.toString(a));\n\t}\n```\n\n","slug":"Java常见的排序算法","published":1,"updated":"2022-07-19T12:55:02.508Z","_id":"cl5s6dpfq00009cujb26u6maa","comments":1,"layout":"post","photos":[],"link":"","content":"<p> Java常见得的排序算法<br> <span id=\"more\"></span></p>\n<h1 id=\"Java常见得的排序算法\"><a href=\"#Java常见得的排序算法\" class=\"headerlink\" title=\"Java常见得的排序算法\"></a>Java常见得的排序算法</h1><h2 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1.冒泡排序\"></a>1.冒泡排序</h2><ol>\n<li><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p>\n</li>\n<li><p>对每一对相邻元素放同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p>\n</li>\n<li><p>针对所有的元素重复以上的步骤，除了最后一个。</p>\n</li>\n<li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>\n</li>\n</ol>\n<p><img src=\"https://files.catbox.moe/a0pb5h.gif\"></p>\n<pre><code class=\"java\">public static void main(String[] args) &#123;\n        int[] a = &#123;6,9,7,3,1&#125;;\n        for (int i = 0; i &lt; a.length-1; i++) &#123;\n            for (int j = 0; j &lt; a.length-i-1; j++) &#123;\n                if(a[j]&gt;a[j+1]) &#123;\n                    int temp =a[j];\n                    a[j] = a[j+1];\n                    a[j+1] =temp;\n                &#125;\n            &#125;\n        &#125;\n        System.out.println(Arrays.toString(a));\n&#125;\n</code></pre>\n<h2 id=\"2-选择排序\"><a href=\"#2-选择排序\" class=\"headerlink\" title=\"2.选择排序\"></a>2.选择排序</h2><ol>\n<li>在长度为N的无序数组中，第一次遍历-1个数，找到最小的数与第一个元素交换</li>\n<li>第二次遍历-2个数，找到最小的数值与第二个元素交换</li>\n<li>重复以上步骤</li>\n<li>第n-1次遍历，找到最小的数值与第n-1的元素交换，排序完成</li>\n</ol>\n<p><img src=\"https://files.catbox.moe/6jqfd2.gif\"></p>\n<pre><code class=\"java\">public static void main(String[] args) &#123;\n        int[] a = &#123;8,2,3,17,23,85,1,9&#125;;\n        for (int i = 0; i &lt; a.length; i++) &#123;\n            //定义此轮循环最小数放置的位置\n            int minIndex = i;\n            //从第2个数依次和后面的数进行对比\n            for (int j = i+1; j &lt; a.length; j++) &#123;\n                //如果minIndex的数比j大则记录j\n                if(a[minIndex]&gt;a[j]) &#123;\n                    minIndex=j;\n                &#125;\n            &#125;\n            if(minIndex!=i)&#123;\n                int temp = a[minIndex];\n                a[minIndex] = a[i];\n                a[i] = temp;\n                System.out.println(&quot;每次结果&gt;&gt;&gt;&quot;+Arrays.toString(a));\n            &#125;\n            System.out.println(&quot;每轮结果===&quot;+Arrays.toString(a));\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"3-插入排序\"><a href=\"#3-插入排序\" class=\"headerlink\" title=\"3.插入排序\"></a>3.插入排序</h2><ol>\n<li>在要排序的无序数组中，假定-1个数已经排好序，现在将第个数插入到前面的有序数列中，使得这个个数也是拍好序的，反复循环，直到全部排好顺序。插入排序也可以理解为从第二个数开始，前面的相邻的数依次两两对比，如果后面的数比前面的数小，则交换位置。(如果实在理解不了，可以类比冒泡排序，把插入排序理解为一种特殊的冒泡排序）</li>\n</ol>\n<p><img src=\"https://files.catbox.moe/hzemg8.gif\"></p>\n<pre><code class=\"java\">public static void main(String[] args) &#123;\n        int[] a = &#123;87,86,82,10,30&#125;;\n        for (int i = 0; i &lt; a.length-1; i++) &#123;\n            for (int j = i+1; j &gt;0; j--) &#123;\n                if(a[j]&lt;a[j-1]) &#123;\n                    int temp = a[j];\n                    a[j] = a[j-1];\n                    a[j-1] = temp;\n                &#125;else&#123;\n                    break;   \n                &#125;\n                System.out.println(&quot;每次结果===&quot;+Arrays.toString(a));\n            &#125;\n            System.out.println(&quot;第&quot;+(i+1)+&quot;轮结果&gt;&gt;&gt;&quot;+Arrays.toString(a));\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"4-快速排序\"><a href=\"#4-快速排序\" class=\"headerlink\" title=\"4.快速排序\"></a>4.快速排序</h2><p>快速排序有两种实现方式：双边循环法和挖坑法，思路如下：</p>\n<h5 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h5><ol>\n<li>定义左右指针，并选取一个数作为基准（通常选择数组第一个）</li>\n<li>移动右指针，如果右指针的数小于基准数，则停止移动，反之则继续移动</li>\n<li>移动左指针，如果左指针的数大于基准数，则停止移动，反之则继续移动</li>\n<li>当左右指针都停止移动时交换左右指针处的数</li>\n<li>当左右两个指针停在相同位置时，交换指针处的数和基准数的位置</li>\n<li>将数组以左右指针位置处一分为二重复上述步骤。</li>\n</ol>\n<pre><code class=\"Java\">public class QuickSort &#123;\n    /**\n     * 双边循环\n     * @return\n     */\n    public static int pivotIndex(int[]ary,int startIndex,int endIndex) &#123;\n        //保存左右两个指针，从第一个元素和最后一个元素开始\n        int left = startIndex;\n        int right = endIndex;\n        //获取基准，一般选择数组第一个数\n        int pivot = ary[startIndex];\n        //大循环，当左右两个指针不相等时，左指针右移，右指针左移\n        while (left!=right) &#123;\n            //右边指针向左移动，当对应元素大于基准数时继续移动，小于基准数时停止移动\n            while(right&gt;left&amp;&amp;ary[right]&gt;=pivot) &#123;\n                right--;\n            &#125;\n            //左边指针向右移动，当小于基准数时继续移动，大于基准数时停止移动\n            while (right&gt;left&amp;&amp;ary[left]&lt;=pivot) &#123;\n                left++;\n            &#125;\n            //此时如果左边指针小于右边指针时；左右指针交换元素\n            if(left&lt;right) &#123;\n                int temp = ary[right];\n                ary[right] = ary[left];\n                ary[left] = temp;\n            &#125;\n        &#125;\n        int index = left;\n        //如果两个指针相等时,交换基准元素和当前位置的数\n        ary[startIndex] = ary[index];\n        ary[index] = pivot;\n        return index;\n    &#125;\n    public static void qucikSort(int[] ary,int startIndex,int endIndex) &#123;\n        if(startIndex&gt;endIndex) &#123;\n            return;\n        &#125;\n        int index = pivotIndex(ary,startIndex,endIndex);\n        qucikSort(ary, startIndex, index-1);\n        qucikSort(ary, index+1, endIndex);\n    &#125;\n    public static void main(String[] args) &#123;\n        int[] a= &#123;5,6,1,2,4,9,3&#125;;\n        qucikSort(a, 0, a.length-1);\n        System.out.println(Arrays.toString(a));\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"挖坑法\"><a href=\"#挖坑法\" class=\"headerlink\" title=\"挖坑法\"></a>挖坑法</h5><ol>\n<li>选取起始位置作为标记位（也就是坑），选取一个数作为基准，通常是数组第一个</li>\n<li>从数组第二数开始依次和基准数对比，如果比基准数小，则扩大小于基准数的区间，也就是mark++,并将该数与标mark处的数交换</li>\n<li>循环结束后，将mark处的数和基准数进行交换</li>\n<li>以mark为界，将数组一分为二重复上述步骤</li>\n</ol>\n<p><img src=\"https://files.catbox.moe/dcwsxe.gif\"></p>\n<pre><code class=\"Java\">/**\n * 单边循环\n * @author MR.W\n */\npublic class QucikSort2 &#123;\n    public static int pivotIndex(int[] ary,int startIndex,int endIndex) &#123;\n        int mark = startIndex;\n        int pivot = ary[startIndex];\n        for (int i = startIndex+1; i &lt;= endIndex; i++) &#123;\n            //如果指针指向的元素小于基准元素，干两件事情\n            //1.mark+1,扩大小于基准数的区间\n            //2.将指针所指向的数和mark位置处的数进行交换\n            if(ary[i]&lt;pivot) &#123;\n                mark++;\n                int temp = ary[i];\n                ary[i] = ary[mark];\n                ary[mark] = temp;\n            &#125;\n        &#125;\n        //当循环结束时将mark位置的数和基准数进行交换\n        ary[startIndex]= ary[mark]; \n        ary[mark] = pivot;\n        return mark;\n    &#125;\n    public static void quickSort(int[] ary,int startIndex,int endIndex) &#123;\n        if(startIndex&gt;endIndex) &#123;\n            return;\n        &#125;\n        int index = pivotIndex(ary, startIndex, endIndex);\n        quickSort(ary, startIndex, index-1);\n        quickSort(ary, index+1, endIndex);\n    &#125;\n    public static void main(String[] args) &#123;\n        int [] a = &#123;7,9,1,4,8&#125;;\n        quickSort(a, 0, a.length-1);\n        System.out.println(Arrays.toString(a));\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public static void main(String[] args) &#123;\n        \n        int [] a = &#123;5,1,6,2,3&#125;;\n        \n        for (int i = 0; i &lt; a.length; i++) &#123;\n            for (int j = 0; j &lt; a.length-1; j++) &#123;\n                int temp;\n                if(a[i]&lt;a[j]) &#123;\n                    temp = a[j];\n                    a[j] = a[i];\n                    a[i] = temp;\n                &#125;\n                System.out.println(&quot;每次&quot;+Arrays.toString(a));\n            &#125;\n            System.out.println(&quot;每轮&quot;+Arrays.toString(a));\n        &#125;\n        System.out.println(&quot;最后&quot;+Arrays.toString(a));\n    &#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"<p> Java常见得的排序算法<br>","more":"</p>\n<h1 id=\"Java常见得的排序算法\"><a href=\"#Java常见得的排序算法\" class=\"headerlink\" title=\"Java常见得的排序算法\"></a>Java常见得的排序算法</h1><h2 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1.冒泡排序\"></a>1.冒泡排序</h2><ol>\n<li><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p>\n</li>\n<li><p>对每一对相邻元素放同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p>\n</li>\n<li><p>针对所有的元素重复以上的步骤，除了最后一个。</p>\n</li>\n<li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>\n</li>\n</ol>\n<p><img src=\"https://files.catbox.moe/a0pb5h.gif\"></p>\n<pre><code class=\"java\">public static void main(String[] args) &#123;\n        int[] a = &#123;6,9,7,3,1&#125;;\n        for (int i = 0; i &lt; a.length-1; i++) &#123;\n            for (int j = 0; j &lt; a.length-i-1; j++) &#123;\n                if(a[j]&gt;a[j+1]) &#123;\n                    int temp =a[j];\n                    a[j] = a[j+1];\n                    a[j+1] =temp;\n                &#125;\n            &#125;\n        &#125;\n        System.out.println(Arrays.toString(a));\n&#125;\n</code></pre>\n<h2 id=\"2-选择排序\"><a href=\"#2-选择排序\" class=\"headerlink\" title=\"2.选择排序\"></a>2.选择排序</h2><ol>\n<li>在长度为N的无序数组中，第一次遍历-1个数，找到最小的数与第一个元素交换</li>\n<li>第二次遍历-2个数，找到最小的数值与第二个元素交换</li>\n<li>重复以上步骤</li>\n<li>第n-1次遍历，找到最小的数值与第n-1的元素交换，排序完成</li>\n</ol>\n<p><img src=\"https://files.catbox.moe/6jqfd2.gif\"></p>\n<pre><code class=\"java\">public static void main(String[] args) &#123;\n        int[] a = &#123;8,2,3,17,23,85,1,9&#125;;\n        for (int i = 0; i &lt; a.length; i++) &#123;\n            //定义此轮循环最小数放置的位置\n            int minIndex = i;\n            //从第2个数依次和后面的数进行对比\n            for (int j = i+1; j &lt; a.length; j++) &#123;\n                //如果minIndex的数比j大则记录j\n                if(a[minIndex]&gt;a[j]) &#123;\n                    minIndex=j;\n                &#125;\n            &#125;\n            if(minIndex!=i)&#123;\n                int temp = a[minIndex];\n                a[minIndex] = a[i];\n                a[i] = temp;\n                System.out.println(&quot;每次结果&gt;&gt;&gt;&quot;+Arrays.toString(a));\n            &#125;\n            System.out.println(&quot;每轮结果===&quot;+Arrays.toString(a));\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"3-插入排序\"><a href=\"#3-插入排序\" class=\"headerlink\" title=\"3.插入排序\"></a>3.插入排序</h2><ol>\n<li>在要排序的无序数组中，假定-1个数已经排好序，现在将第个数插入到前面的有序数列中，使得这个个数也是拍好序的，反复循环，直到全部排好顺序。插入排序也可以理解为从第二个数开始，前面的相邻的数依次两两对比，如果后面的数比前面的数小，则交换位置。(如果实在理解不了，可以类比冒泡排序，把插入排序理解为一种特殊的冒泡排序）</li>\n</ol>\n<p><img src=\"https://files.catbox.moe/hzemg8.gif\"></p>\n<pre><code class=\"java\">public static void main(String[] args) &#123;\n        int[] a = &#123;87,86,82,10,30&#125;;\n        for (int i = 0; i &lt; a.length-1; i++) &#123;\n            for (int j = i+1; j &gt;0; j--) &#123;\n                if(a[j]&lt;a[j-1]) &#123;\n                    int temp = a[j];\n                    a[j] = a[j-1];\n                    a[j-1] = temp;\n                &#125;else&#123;\n                    break;   \n                &#125;\n                System.out.println(&quot;每次结果===&quot;+Arrays.toString(a));\n            &#125;\n            System.out.println(&quot;第&quot;+(i+1)+&quot;轮结果&gt;&gt;&gt;&quot;+Arrays.toString(a));\n        &#125;\n    &#125;\n</code></pre>\n<h2 id=\"4-快速排序\"><a href=\"#4-快速排序\" class=\"headerlink\" title=\"4.快速排序\"></a>4.快速排序</h2><p>快速排序有两种实现方式：双边循环法和挖坑法，思路如下：</p>\n<h5 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h5><ol>\n<li>定义左右指针，并选取一个数作为基准（通常选择数组第一个）</li>\n<li>移动右指针，如果右指针的数小于基准数，则停止移动，反之则继续移动</li>\n<li>移动左指针，如果左指针的数大于基准数，则停止移动，反之则继续移动</li>\n<li>当左右指针都停止移动时交换左右指针处的数</li>\n<li>当左右两个指针停在相同位置时，交换指针处的数和基准数的位置</li>\n<li>将数组以左右指针位置处一分为二重复上述步骤。</li>\n</ol>\n<pre><code class=\"Java\">public class QuickSort &#123;\n    /**\n     * 双边循环\n     * @return\n     */\n    public static int pivotIndex(int[]ary,int startIndex,int endIndex) &#123;\n        //保存左右两个指针，从第一个元素和最后一个元素开始\n        int left = startIndex;\n        int right = endIndex;\n        //获取基准，一般选择数组第一个数\n        int pivot = ary[startIndex];\n        //大循环，当左右两个指针不相等时，左指针右移，右指针左移\n        while (left!=right) &#123;\n            //右边指针向左移动，当对应元素大于基准数时继续移动，小于基准数时停止移动\n            while(right&gt;left&amp;&amp;ary[right]&gt;=pivot) &#123;\n                right--;\n            &#125;\n            //左边指针向右移动，当小于基准数时继续移动，大于基准数时停止移动\n            while (right&gt;left&amp;&amp;ary[left]&lt;=pivot) &#123;\n                left++;\n            &#125;\n            //此时如果左边指针小于右边指针时；左右指针交换元素\n            if(left&lt;right) &#123;\n                int temp = ary[right];\n                ary[right] = ary[left];\n                ary[left] = temp;\n            &#125;\n        &#125;\n        int index = left;\n        //如果两个指针相等时,交换基准元素和当前位置的数\n        ary[startIndex] = ary[index];\n        ary[index] = pivot;\n        return index;\n    &#125;\n    public static void qucikSort(int[] ary,int startIndex,int endIndex) &#123;\n        if(startIndex&gt;endIndex) &#123;\n            return;\n        &#125;\n        int index = pivotIndex(ary,startIndex,endIndex);\n        qucikSort(ary, startIndex, index-1);\n        qucikSort(ary, index+1, endIndex);\n    &#125;\n    public static void main(String[] args) &#123;\n        int[] a= &#123;5,6,1,2,4,9,3&#125;;\n        qucikSort(a, 0, a.length-1);\n        System.out.println(Arrays.toString(a));\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"挖坑法\"><a href=\"#挖坑法\" class=\"headerlink\" title=\"挖坑法\"></a>挖坑法</h5><ol>\n<li>选取起始位置作为标记位（也就是坑），选取一个数作为基准，通常是数组第一个</li>\n<li>从数组第二数开始依次和基准数对比，如果比基准数小，则扩大小于基准数的区间，也就是mark++,并将该数与标mark处的数交换</li>\n<li>循环结束后，将mark处的数和基准数进行交换</li>\n<li>以mark为界，将数组一分为二重复上述步骤</li>\n</ol>\n<p><img src=\"https://files.catbox.moe/dcwsxe.gif\"></p>\n<pre><code class=\"Java\">/**\n * 单边循环\n * @author MR.W\n */\npublic class QucikSort2 &#123;\n    public static int pivotIndex(int[] ary,int startIndex,int endIndex) &#123;\n        int mark = startIndex;\n        int pivot = ary[startIndex];\n        for (int i = startIndex+1; i &lt;= endIndex; i++) &#123;\n            //如果指针指向的元素小于基准元素，干两件事情\n            //1.mark+1,扩大小于基准数的区间\n            //2.将指针所指向的数和mark位置处的数进行交换\n            if(ary[i]&lt;pivot) &#123;\n                mark++;\n                int temp = ary[i];\n                ary[i] = ary[mark];\n                ary[mark] = temp;\n            &#125;\n        &#125;\n        //当循环结束时将mark位置的数和基准数进行交换\n        ary[startIndex]= ary[mark]; \n        ary[mark] = pivot;\n        return mark;\n    &#125;\n    public static void quickSort(int[] ary,int startIndex,int endIndex) &#123;\n        if(startIndex&gt;endIndex) &#123;\n            return;\n        &#125;\n        int index = pivotIndex(ary, startIndex, endIndex);\n        quickSort(ary, startIndex, index-1);\n        quickSort(ary, index+1, endIndex);\n    &#125;\n    public static void main(String[] args) &#123;\n        int [] a = &#123;7,9,1,4,8&#125;;\n        quickSort(a, 0, a.length-1);\n        System.out.println(Arrays.toString(a));\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public static void main(String[] args) &#123;\n        \n        int [] a = &#123;5,1,6,2,3&#125;;\n        \n        for (int i = 0; i &lt; a.length; i++) &#123;\n            for (int j = 0; j &lt; a.length-1; j++) &#123;\n                int temp;\n                if(a[i]&lt;a[j]) &#123;\n                    temp = a[j];\n                    a[j] = a[i];\n                    a[i] = temp;\n                &#125;\n                System.out.println(&quot;每次&quot;+Arrays.toString(a));\n            &#125;\n            System.out.println(&quot;每轮&quot;+Arrays.toString(a));\n        &#125;\n        System.out.println(&quot;最后&quot;+Arrays.toString(a));\n    &#125;\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5hmbtlf00012cuj3xr2a53h","category_id":"cl5hmbtlj00032cujfuwk7455","_id":"cl5hmbtlr000d2cujaaqh25kh"},{"post_id":"cl5hmbtlh00022cuj1at992td","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtlu000j2cuje7pq2ams"},{"post_id":"cl5hmbtll00042cujdsgog32c","category_id":"cl5hmbtlr000e2cuj2ptj0683","_id":"cl5hmbtlx000q2cujcqfofbfb"},{"post_id":"cl5hmbtlt000i2cuj8suieqnr","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtly000v2cuja3e2a7q5"},{"post_id":"cl5hmbtlu000m2cuj6mcih9qy","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtlz000y2cuj2yhbgr9u"},{"post_id":"cl5hmbtln00062cujhh2e49cl","category_id":"cl5hmbtlu000k2cuj6vnkev23","_id":"cl5hmbtm100132cuj1euw2qq6"},{"post_id":"cl5hmbtlw000p2cujarhm1g62","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtm100162cuja4lceax7"},{"post_id":"cl5hmbtlx000t2cuj2sbzef46","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtm2001a2cuj5kgcgor4"},{"post_id":"cl5hmbtlo00072cuj9fa65kdb","category_id":"cl5hmbtlu000k2cuj6vnkev23","_id":"cl5hmbtm3001d2cujfge988ex"},{"post_id":"cl5hmbtlz000x2cujgcwff329","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtm4001h2cujdqligpq2"},{"post_id":"cl5hmbtm000112cujhipy7doj","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtm5001k2cuj8me8f3a9"},{"post_id":"cl5hmbtm100152cuj11xiasgx","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtm5001m2cuj8me82p1e"},{"post_id":"cl5hmbtlp00092cuj5kxgd4rd","category_id":"cl5hmbtm000102cuj4ax799q2","_id":"cl5hmbtm6001o2cujey71aj8o"},{"post_id":"cl5hmbtm200182cujhrlmd15c","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtm6001q2cuj7sv807nx"},{"post_id":"cl5hmbtm3001c2cuj2xti1kbk","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtm6001s2cuj90zdfx9k"},{"post_id":"cl5hmbtlr000c2cuj98brawgx","category_id":"cl5hmbtm000102cuj4ax799q2","_id":"cl5hmbtm6001u2cuja2xvbfop"},{"post_id":"cl5hmbtm3001f2cujb8nbh6sy","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtm6001w2cujdfsk53gg"},{"post_id":"cl5hmbtm4001j2cuj7vec3n89","category_id":"cl5hmbtlp00082cuj9qxd3694","_id":"cl5hmbtm6001x2cuj1be4h1gb"},{"post_id":"cl5hmbtls000f2cujbb7ngnfl","category_id":"cl5hmbtlu000k2cuj6vnkev23","_id":"cl5hmbtm6001y2cuj1wo75piv"},{"post_id":"cl5pzwvlb0000j4uj7qsic3je","category_id":"cl5pzwvle0001j4uj0no4ek4v","_id":"cl5pzwvll0004j4ujdyzoa65q"},{"post_id":"cl5rjxbao0000lcuj9cpj6w23","category_id":"cl5pzwvle0001j4uj0no4ek4v","_id":"cl5rjxbas0002lcuj4omh4ebs"},{"post_id":"cl5s6dpfq00009cujb26u6maa","category_id":"cl5pzwvle0001j4uj0no4ek4v","_id":"cl5s6dpfx00029cuj8kqtarl4"}],"PostTag":[{"post_id":"cl5hmbtlh00022cuj1at992td","tag_id":"cl5hmbtll00052cuj15rn96mk","_id":"cl5hmbtlq000b2cuj444r8umj"},{"post_id":"cl5hmbtlr000c2cuj98brawgx","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtlt000h2cuj21dlaill"},{"post_id":"cl5hmbtll00042cujdsgog32c","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtlu000l2cuj0wblfj6b"},{"post_id":"cl5hmbtlt000i2cuj8suieqnr","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtlv000o2cujdmlu5jn7"},{"post_id":"cl5hmbtln00062cujhh2e49cl","tag_id":"cl5hmbtlt000g2cuj97f3bv77","_id":"cl5hmbtlx000r2cuj6pj20bcg"},{"post_id":"cl5hmbtlu000m2cuj6mcih9qy","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtly000w2cujbhd9cpwj"},{"post_id":"cl5hmbtlw000p2cujarhm1g62","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtlz000z2cujacv03yse"},{"post_id":"cl5hmbtlo00072cuj9fa65kdb","tag_id":"cl5hmbtlt000g2cuj97f3bv77","_id":"cl5hmbtm100142cuj6c3r1a88"},{"post_id":"cl5hmbtlx000t2cuj2sbzef46","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtm100172cujhio3c7lu"},{"post_id":"cl5hmbtlz000x2cujgcwff329","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtm3001b2cujcwrx0s3t"},{"post_id":"cl5hmbtlp00092cuj5kxgd4rd","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtm3001e2cuj3pk220f4"},{"post_id":"cl5hmbtm000112cujhipy7doj","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtm4001i2cuj7nw42nre"},{"post_id":"cl5hmbtm100152cuj11xiasgx","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtm5001l2cujbol1coph"},{"post_id":"cl5hmbtls000f2cujbb7ngnfl","tag_id":"cl5hmbtlt000g2cuj97f3bv77","_id":"cl5hmbtm6001n2cuj1bqe5h14"},{"post_id":"cl5hmbtm200182cujhrlmd15c","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtm6001p2cuj1b3i89ll"},{"post_id":"cl5hmbtm3001c2cuj2xti1kbk","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtm6001r2cuj8do8cxr2"},{"post_id":"cl5hmbtm3001f2cujb8nbh6sy","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtm6001t2cujagwf4ii9"},{"post_id":"cl5hmbtm4001j2cuj7vec3n89","tag_id":"cl5hmbtlq000a2cujhwjfdl3i","_id":"cl5hmbtm6001v2cuj4u737a5z"},{"post_id":"cl5pzwvlb0000j4uj7qsic3je","tag_id":"cl5pzwvlj0002j4uj89godyay","_id":"cl5pzwvlk0003j4ujaveud32l"},{"post_id":"cl5rjxbao0000lcuj9cpj6w23","tag_id":"cl5pzwvlj0002j4uj89godyay","_id":"cl5rjxbas0001lcujcn4p5j3o"},{"post_id":"cl5s6dpfq00009cujb26u6maa","tag_id":"cl5pzwvlj0002j4uj89godyay","_id":"cl5s6dpfx00019cujdwe20nmf"}],"Tag":[{"name":"JavaScript","_id":"cl5hmbtll00052cuj15rn96mk"},{"name":"知识","_id":"cl5hmbtlq000a2cujhwjfdl3i"},{"name":"瞎写的","_id":"cl5hmbtlt000g2cuj97f3bv77"},{"name":"Java","_id":"cl5pzwvlj0002j4uj89godyay"}]}}